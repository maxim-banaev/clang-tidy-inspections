{
  "$schema": "https://raw.githubusercontent.com/schemastore/schemastore/master/src/schemas/json/sarif-2.1.0-rtm.5.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "CL",
          "fullName": "Qodana",
          "version": "243.6317",
          "rules": [
            {
              "id": "ArrayIndexOutOfBounds",
              "shortDescription": {
                "text": "Array Index Out Of Bounds"
              },
              "fullDescription": {
                "text": "Reports array or pointer variable access expressions where index may be out of bounds of an array or allocated buffer. Example: 'void foo() {\n      int buffer[100];\n\n      for (int i = 0; i <= 100; i ++)\n          buffer[i] = 0; // buffer overflow when i is equal to 100\n  }' New in 2022.2",
                "markdown": "Reports array or pointer variable access expressions where index may be out of bounds of an array or allocated buffer.\n\n**Example:**\n\n\n      void foo() {\n          int buffer[100];\n\n          for (int i = 0; i <= 100; i ++)\n              buffer[i] = 0; // buffer overflow when i is equal to 100\n      }\n\nNew in 2022.2"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "ArrayIndexOutOfBounds",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnconstrainedVariableType",
              "shortDescription": {
                "text": "Unconstrained variable type"
              },
              "fullDescription": {
                "text": "Reports cases where an expression constrained by a concept is assigned to a variable declared as 'auto' and suggests adding a type constraint. Example: 'template<class T>\n  concept Foo = true;\n\n  Foo auto func() { return true; }\n\n  void bar() {\n      auto f = func(); //warn here to add constraint 'Foo'\n  }'",
                "markdown": "Reports cases where an expression constrained by a concept is assigned to a variable declared as `auto` and suggests adding a type constraint.\n\n**Example:**\n\n\n      template<class T>\n      concept Foo = true;\n\n      Foo auto func() { return true; }\n\n      void bar() {\n          auto f = func(); //warn here to add constraint 'Foo'\n      }\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "UnconstrainedVariableType",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/General",
                    "index": 28,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConstantConditionsOC",
              "shortDescription": {
                "text": "Constant condition"
              },
              "fullDescription": {
                "text": "Reports conditions that are always 'true' or 'false' and expressions whose value is statically proven to be constant. Example: 'void process(State current) {\n    current = State::Started;\n\n    if (current == State::Stopped) {\n        //code\n    }\n    //code\n  }'",
                "markdown": "Reports conditions that are always `true` or `false` and expressions whose value is statically proven to be constant.\n\n**Example:**\n\n\n      void process(State current) {\n        current = State::Started;\n\n        if (current == State::Stopped) {\n            //code\n        }\n        //code\n      }\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "ConstantConditionsOC",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedLocalVariable",
              "shortDescription": {
                "text": "Unused Local Variable"
              },
              "fullDescription": {
                "text": "Reports the local variables that are declared but never accessed for reading. Such declarations and assignment can be removed safely.",
                "markdown": "Reports the local variables that are declared but never accessed for reading. Such declarations and assignment can be removed safely."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "UnusedLocalVariable",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCInconsistentNaming",
              "shortDescription": {
                "text": "Inconsistent Naming"
              },
              "fullDescription": {
                "text": "Reports the names that don't match the naming convention for that kind of symbol. Learn More",
                "markdown": "Reports the names that don't match the naming convention for that kind of symbol.\n\n[Learn More](https://www.jetbrains.com/help/clion/naming-conventions.html)"
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "note",
                "parameters": {
                  "suppressToolId": "OCInconsistentNaming",
                  "ideaSeverity": "WEAK WARNING",
                  "qodanaSeverity": "Moderate"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/General",
                    "index": 28,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PreprocessorComment",
              "shortDescription": {
                "text": "Preprocessor directive comment"
              },
              "fullDescription": {
                "text": "Reports the mismatches between the preprocessor '#endif' comments and macro names. Example: '#ifndef _UTILS_H\n  #define _UTILS_H\n\n  #endif //_UTILS'",
                "markdown": "Reports the mismatches between the preprocessor `#endif` comments and macro names.\n\n**Example:**\n\n\n      #ifndef _UTILS_H\n      #define _UTILS_H\n\n      #endif //_UTILS\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "PreprocessorComment",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/General",
                    "index": 28,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "VirtualCallInCtorOrDtor",
              "shortDescription": {
                "text": "Virtual call from constructor or destructor"
              },
              "fullDescription": {
                "text": "Reports virtual member function calls from constructors or destructors. Since construction starts with the base class and moves to the derived classes, the resources of the derived class are not yet initialized. Destruction is performed in reverse order, so calling a virtual function can lead to accessing the resources that have already been destroyed. Example: 'class Test {\n  public:\n      void virtual setUp();\n\n      Test() {\n          setUp();\n      }\n  };'",
                "markdown": "Reports virtual member function calls from constructors or destructors. Since construction starts with the base class and moves to the derived classes, the resources of the derived class are not yet initialized. Destruction is performed in reverse order, so calling a virtual function can lead to accessing the resources that have already been destroyed.\n\n**Example:**\n\n\n      class Test {\n      public:\n          void virtual setUp();\n\n          Test() {\n              setUp();\n          }\n      };\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "VirtualCallInCtorOrDtor",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/General",
                    "index": 28,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EmptyDeclOrStmt",
              "shortDescription": {
                "text": "Empty declaration or statement"
              },
              "fullDescription": {
                "text": "Reports empty declarations and statements that can be removed safely. Example: 'void foo() {\n    //code\n  }; // redundant empty declaration'",
                "markdown": "Reports empty declarations and statements that can be removed safely.\n\n**Example:**\n\n\n      void foo() {\n        //code\n      }; // redundant empty declaration\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "EmptyDeclOrStmt",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/General",
                    "index": 28,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCUnusedGlobalDeclaration",
              "shortDescription": {
                "text": "Unused Global Declaration"
              },
              "fullDescription": {
                "text": "Reports the global function and variable declarations that are never used and can be removed safely.",
                "markdown": "Reports the global function and variable declarations that are never used and can be removed safely."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCUnusedGlobalDeclaration",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Unused code",
                    "index": 56,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "HidingNonVirtualFunction",
              "shortDescription": {
                "text": "Hiding non-virtual function"
              },
              "fullDescription": {
                "text": "Reports the functions that hide non-virtual functions with the same signature declared in the base class. Example: class Base {\n  public:\n    void operate() {}\n};\n\nclass Derived : public Base {\n  public:\n    void operate() {}\n}",
                "markdown": "Reports the functions that hide non-virtual functions with the same signature declared in the base class.\n\nExample:\n\n```\nclass Base {\n  public:\n    void operate() {}\n};\n\nclass Derived : public Base {\n  public:\n    void operate() {}\n}\n```"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "HidingNonVirtualFunction",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Functions",
                    "index": 57,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LoopDoesntUseConditionVariable",
              "shortDescription": {
                "text": "Loop condition isn't updated inside the loop"
              },
              "fullDescription": {
                "text": "Reports the loop conditions that are not updated inside the loop. This can indicate code defects and cause infinite loops at runtime. Example: 'int i = 0, j = 0;\n    while (i < 10) {\n        ++j;\n    }'",
                "markdown": "Reports the loop conditions that are not updated inside the loop. This can indicate code defects and cause infinite loops at runtime.\n\n**Example:**\n\n\n        int i = 0, j = 0;\n        while (i < 10) {\n            ++j;\n        }\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "LoopDoesntUseConditionVariable",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MemoryLeak",
              "shortDescription": {
                "text": "Memory Leak"
              },
              "fullDescription": {
                "text": "Reports the allocations of memory (either 'new' operator or 'malloc()' function) that were not released before they become non-accessible. Example: 'class MyClass {\n      int* leakedField = new int;\n  };\n\n  void foo() {\n      MyClass* c = new MyClass;\n      delete c;\n  }'",
                "markdown": "Reports the allocations of memory (either `new` operator or `malloc()` function) that were not released before they become non-accessible.\n\n**Example:**\n\n\n      class MyClass {\n          int* leakedField = new int;\n      };\n\n      void foo() {\n          MyClass* c = new MyClass;\n          delete c;\n      }\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "MemoryLeak",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCUnusedInstanceVariable",
              "shortDescription": {
                "text": "Unused Instance Variable"
              },
              "fullDescription": {
                "text": "Reports the instance variables that are never accessed or written.",
                "markdown": "Reports the instance variables that are never accessed or written."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCUnusedInstanceVariable",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "Objective-C/Unused code",
                    "index": 61,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnreachableCode",
              "shortDescription": {
                "text": "Unreachable Code"
              },
              "fullDescription": {
                "text": "Reports the code pieces that are never executed in any control flow and can be removed safely.",
                "markdown": "Reports the code pieces that are never executed in any control flow and can be removed safely."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "UnreachableCode",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCUnusedMethod",
              "shortDescription": {
                "text": "Unused Method"
              },
              "fullDescription": {
                "text": "Reports the methods that are never called, for example, in send message expressions, '@selector' expressions, and other places like XIB files.",
                "markdown": "Reports the methods that are never called, for example, in send message expressions, `@selector` expressions, and other places like XIB files."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCUnusedMethod",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "Objective-C/Unused code",
                    "index": 61,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "LocalValueEscapesScope",
              "shortDescription": {
                "text": "Local Value Escapes Scope"
              },
              "fullDescription": {
                "text": "Reports the references to local values that escape the function Example: 'int *escapeLocalScope() {\n    int lv = 100;\n    return &lv;\n  }'",
                "markdown": "Reports the references to local values that escape the function\n\n**Example:**\n\n\n      int *escapeLocalScope() {\n        int lv = 100;\n        return &lv;\n      }\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "LocalValueEscapesScope",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCUnusedMacro",
              "shortDescription": {
                "text": "Unused Macro"
              },
              "fullDescription": {
                "text": "Reports the macro definitions that are never used and can be removed safely.",
                "markdown": "Reports the macro definitions that are never used and can be removed safely."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCUnusedMacro",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Unused code",
                    "index": 56,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCUnusedConcept",
              "shortDescription": {
                "text": "Unused Concept"
              },
              "fullDescription": {
                "text": "Reports the concepts that are never used and can be removed safely.",
                "markdown": "Reports the concepts that are never used and can be removed safely."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCUnusedConcept",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Unused code",
                    "index": 56,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCDFA",
              "shortDescription": {
                "text": "Context-sensitive analysis"
              },
              "fullDescription": {
                "text": "Reports the issues found by the context-sensitive data flow analyser. Such as: \"Constant condition\", \"Dangling pointer\", \"Null dereference\", \"Unreachable code\", and so on.",
                "markdown": "Reports the issues found by the context-sensitive data flow analyser. Such as: \"Constant condition\", \"Dangling pointer\", \"Null dereference\", \"Unreachable code\", and so on."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCDFA",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Clazy",
              "shortDescription": {
                "text": "Clazy"
              },
              "fullDescription": {
                "text": "Reports the Qt-related compiler warnings, ranging from unneeded memory allocations to the misused API.",
                "markdown": "Reports the Qt-related compiler warnings, ranging from unneeded memory allocations to the misused API."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "Clazy",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Static Analysis Tools",
                    "index": 71,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "EndlessLoop",
              "shortDescription": {
                "text": "Endless Loop"
              },
              "fullDescription": {
                "text": "Reports the 'for', 'while', 'do while', and 'goto' statements that exit only by throwing an exception. Even though such statements may be correct, they often indicate code errors.",
                "markdown": "Reports the `for`, `while`, `do while`, and `goto` statements that exit only by throwing an exception. Even though such statements may be correct, they often indicate code errors."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "EndlessLoop",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Simplify",
              "shortDescription": {
                "text": "Simplifiable statement"
              },
              "fullDescription": {
                "text": "Reports the statements that can be simplified, such as constant conditions, identical if branches, redundant boolean expressions, and others. Use the checkboxes below to control the analysis options: Simplify \"if (true)\", \"while(false)\": suggest replacing the 'if'/'while' statement with a boolean literal. Simplify \"condition == true\": suggest replacing equality statements with boolean literals. Simplify \"condition1 ? true : condition2;\": suggest simplifying ternary operators where one of the expressions is a boolean literal. Simplify \"if (condition1) return true; return condition2;\": suggest simplifying 'if' where a boolean literal is returned if the condition is true and another condition is returned otherwise.",
                "markdown": "Reports the statements that can be simplified, such as constant conditions, identical if branches, redundant boolean expressions, and others. Use the checkboxes below to control the analysis options:\n\n* **Simplify \"if (true)\", \"while(false)\"** : suggest replacing the `if`/`while` statement with a boolean literal.\n* **Simplify \"condition == true\"**: suggest replacing equality statements with boolean literals.\n* **Simplify \"condition1 ? true : condition2;\"**: suggest simplifying ternary operators where one of the expressions is a boolean literal.\n* **Simplify \"if (condition1) return true; return condition2;\"** : suggest simplifying `if` where a boolean literal is returned if the condition is true and another condition is returned otherwise."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "Simplify",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/General",
                    "index": 28,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCUnusedIncludeDirective",
              "shortDescription": {
                "text": "Unused Include Directive"
              },
              "fullDescription": {
                "text": "Reports the include directives that are not used or not required and can be removed safely. Detect completely unused An include directive is considered unused if declarations from it are never used within the translation unit. Detect not directly used An include directive is considered unused if declarations from it are not used in the file directly. This works best with the \"Include What You Use\" policy. Detect not required Detects the minimal set of include directives for the file to be compilable. All other #include directives are considered unused. Use the checkbox below to run inspection in header files.",
                "markdown": "Reports the include directives that are not used or not required and can be removed safely.\n\n**Detect completely unused**\n:   An include directive is considered unused if declarations from it are never used within the translation unit.\n\n**Detect not directly used**\n:   An include directive is considered unused if declarations from it are not used in the file directly. This works best with the \"Include What You Use\" policy.\n\n**Detect not required**\n:   Detects the minimal set of include directives for the file to be compilable. All other #include directives are considered unused.\n\nUse the checkbox below to run inspection in header files."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCUnusedIncludeDirective",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Unused code",
                    "index": 56,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCUnusedProperty",
              "shortDescription": {
                "text": "Unused Property"
              },
              "fullDescription": {
                "text": "Reports the properties that are never accessed or written, neither in qualified expressions nor in accessor method calls.",
                "markdown": "Reports the properties that are never accessed or written, neither in qualified expressions nor in accessor method calls."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCUnusedProperty",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "Objective-C/Unused code",
                    "index": 61,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConstantFunctionResult",
              "shortDescription": {
                "text": "Constant Function Result"
              },
              "fullDescription": {
                "text": "Reports the functions where the return value is always the same constant.",
                "markdown": "Reports the functions where the return value is always the same constant."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "ConstantFunctionResult",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedValue",
              "shortDescription": {
                "text": "Unused Value"
              },
              "fullDescription": {
                "text": "Reports the variable values that are never used after being assigned. This can happen in the following cases: the variable is never read after the assignment the value is overwritten by another assignment before it is accessed for reading the variable initializer is redundant (for one of the above two reasons) the variable itself is never used. Example: 'class C {\n    int field;\n\n    void foo() {\n      field = unused_value;\n    }\n\n    void bar() {\n      use(field);\n      foo();\n    }\n  };' Use the checkbox below to have this inspection ignore variable initializers.",
                "markdown": "Reports the variable values that are never used after being assigned. This can happen in the following cases:\n\n* the variable is never read after the assignment\n* the value is overwritten by another assignment before it is accessed for reading\n* the variable initializer is redundant (for one of the above two reasons)\n* the variable itself is never used.\n\n**Example:**\n\n\n      class C {\n        int field;\n\n        void foo() {\n          field = unused_value;\n        }\n\n        void bar() {\n          use(field);\n          foo();\n        }\n      };\n\nUse the checkbox below to have this inspection ignore variable initializers."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "UnusedValue",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCDFABatch",
              "shortDescription": {
                "text": "Context-sensitive analysis"
              },
              "fullDescription": {
                "text": "Reports the issues found by the context-sensitive data flow analyser. Such as: \"Constant condition\", \"Dangling pointer\", \"Null dereference\", \"Unreachable code\", and so on.",
                "markdown": "Reports the issues found by the context-sensitive data flow analyser. Such as: \"Constant condition\", \"Dangling pointer\", \"Null dereference\", \"Unreachable code\", and so on."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCDFABatch",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ConstantParameter",
              "shortDescription": {
                "text": "Constant Parameter"
              },
              "fullDescription": {
                "text": "Reports function parameters that always have the same value.",
                "markdown": "Reports function parameters that always have the same value."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "ConstantParameter",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCUnusedTypeAlias",
              "shortDescription": {
                "text": "Unused Type Alias"
              },
              "fullDescription": {
                "text": "Reports the statements that are never used and can be removed safely.",
                "markdown": "Reports the statements that are never used and can be removed safely."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCUnusedTypeAlias",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Unused code",
                    "index": 56,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ArgumentSelectionDefects",
              "shortDescription": {
                "text": "Argument selection defect"
              },
              "fullDescription": {
                "text": "Reports mismatches between the argument identifier name and the formal parameter name. This can help detect programming errors, for example, when you accidentally switch the arguments of the same type. The original research paper can be found here. Example: 'const User* get_User(int64_t company_id, int64_t user_id) {\n    return new User{company_id, user_id, \"foo\"};\n  }\n\n  void call_User(int64_t company_id, int64_t user_id) {\n    const User* user = get_User(user_id, company_id); // potential issue here\n    //...\n  }' Use the checkbox below to inspect arguments with names shorter than three symbols. Learn More.",
                "markdown": "Reports mismatches between the argument identifier name and the formal parameter name. This can help detect programming errors, for example, when you accidentally switch the arguments of the same type. The original research paper can be found [here](https://static.googleusercontent.com/media/research.google.com/ru//pubs/archive/46317.pdf).\n\n**Example:**\n\n\n      const User* get_User(int64_t company_id, int64_t user_id) {\n        return new User{company_id, user_id, \"foo\"};\n      }\n\n      void call_User(int64_t company_id, int64_t user_id) {\n        const User* user = get_User(user_id, company_id); // potential issue here\n        //...\n      }\n\nUse the checkbox below to inspect arguments with names shorter than three symbols.\n\n[Learn More.](https://www.jetbrains.com/help/clion/argument-selection-defects-inspection.html)"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "ArgumentSelectionDefects",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/General",
                    "index": 28,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Misra",
              "shortDescription": {
                "text": "MISRA"
              },
              "fullDescription": {
                "text": "Reports various issues defined by the MISRA C 2012 and MISRA C++ 2008 guidelines. The list of currently supported checks is here.",
                "markdown": "Reports various issues defined by the MISRA C 2012 and MISRA C++ 2008 guidelines.\n\nThe list of currently supported checks is [here](https://youtrack.jetbrains.com/articles/CPP-A-191430682/MISRA-checks-supported-in-CLion)."
              },
              "defaultConfiguration": {
                "enabled": false,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "Misra",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Static Analysis Tools",
                    "index": 71,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotImplementedFunctions",
              "shortDescription": {
                "text": "Not Implemented Functions"
              },
              "fullDescription": {
                "text": "Reports the functions that were declared in a class but have no implementations. Example: class Test {\n  public:\n    void setUp();\n};",
                "markdown": "Reports the functions that were declared in a class but have no implementations.\n\n**Example:**\n\n```\nclass Test {\n  public:\n    void setUp();\n};\n```"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "NotImplementedFunctions",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Functions",
                    "index": 57,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnusedParameter",
              "shortDescription": {
                "text": "Unused Parameter"
              },
              "fullDescription": {
                "text": "Reports the parameters that are declared but never accessed for reading and can be removed safely.",
                "markdown": "Reports the parameters that are declared but never accessed for reading and can be removed safely."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "UnusedParameter",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "UnreachableCallsOfFunction",
              "shortDescription": {
                "text": "Unreachable Calls Of Function"
              },
              "fullDescription": {
                "text": "Reports the functions which calls are never used. Such functions are also never executed.",
                "markdown": "Reports the functions which calls are never used. Such functions are also never executed."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "UnreachableCallsOfFunction",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCUnusedClass",
              "shortDescription": {
                "text": "Unused Class"
              },
              "fullDescription": {
                "text": "Reports Objective-C classes and protocols that are never used.",
                "markdown": "Reports Objective-C classes and protocols that are never used."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCUnusedClass",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "Objective-C/Unused code",
                    "index": 61,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ClangdErrorsAndWarnings",
              "shortDescription": {
                "text": "Clangd errors and warnings"
              },
              "fullDescription": {
                "text": "Reports C/C++ errors and warnings from clangd.",
                "markdown": "Reports C/C++ errors and warnings from clangd.  "
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "ClangdErrorsAndWarnings",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/General",
                    "index": 28,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCUnusedTemplateParameter",
              "shortDescription": {
                "text": "Unused Template Parameter"
              },
              "fullDescription": {
                "text": "Reports the template parameters that are never used and can be removed safely.",
                "markdown": "Reports the template parameters that are never used and can be removed safely."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCUnusedTemplateParameter",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Unused code",
                    "index": 56,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "OCUnusedStruct",
              "shortDescription": {
                "text": "Unused Struct"
              },
              "fullDescription": {
                "text": "Reports the classes and structures that are never used and can be removed safely.",
                "markdown": "Reports the classes and structures that are never used and can be removed safely."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "OCUnusedStruct",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Unused code",
                    "index": 56,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NotInitializedField",
              "shortDescription": {
                "text": "Not Initialized Field"
              },
              "fullDescription": {
                "text": "Reports the fields that may have not been initialized before their usage. Initialization and usage may be in different functions.",
                "markdown": "Reports the fields that may have not been initialized before their usage. Initialization and usage may be in different functions."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "NotInitializedField",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "DanglingPointer",
              "shortDescription": {
                "text": "Dangling Pointer"
              },
              "fullDescription": {
                "text": "Reports the usages of the pointers that refer to the memory already deleted by the 'delete' operator or the 'free(void* ptr)' function. Example: 'void process() {\n    for(node *pt = head; pt != nullptr; pt = pt->next) {\n        delete pt;\n    }\n  }'",
                "markdown": "Reports the usages of the pointers that refer to the memory already deleted by the `delete` operator or the `free(void* ptr)` function.\n\n**Example:**\n\n\n      void process() {\n        for(node *pt = head; pt != nullptr; pt = pt->next) {\n            delete pt;\n        }\n      }\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "DanglingPointer",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "ClangTidy",
              "shortDescription": {
                "text": "Clang-Tidy"
              },
              "fullDescription": {
                "text": "Reports various issues related to The C++ Core Guidelines, Modernize, Readability and Performance. CLion's default configuration is described here. For more information, visit the official Clang-Tidy page. Use the checkbox below to have this inspection ignore the IDE settings and use a list of checks specified in the .clang-tidy file if any exist.",
                "markdown": "Reports various issues related to The C++ Core Guidelines, Modernize, Readability and Performance.   \nCLion's default configuration is described [here](https://youtrack.jetbrains.com/articles/CPP-A-90276519/Clang-Tidy-in-CLion:-default-configuration).   \nFor more information, visit the official [Clang-Tidy](https://clang.llvm.org/extra/clang-tidy/) page.\n\nUse the checkbox below to have this inspection ignore the IDE settings and use a list of checks specified in the **.clang-tidy** file if any exist."
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "ClangTidy",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Static Analysis Tools",
                    "index": 71,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "InfiniteRecursion",
              "shortDescription": {
                "text": "Infinite Recursion"
              },
              "fullDescription": {
                "text": "Reports methods and functions with infinite recursion. Example: 'int factorial(int n) {\n    return n * factorial(n - 1);\n  }'",
                "markdown": "Reports methods and functions with infinite recursion.\n\n**Example:**\n\n\n      int factorial(int n) {\n        return n * factorial(n - 1);\n      }\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "InfiniteRecursion",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "NullDereference",
              "shortDescription": {
                "text": "Null Dereference"
              },
              "fullDescription": {
                "text": "Reports dereferences of the pointers that may contain 'nullptr'. Example: 'using namespace std;\n  void process(string *a, string b) {\n    if (a != nullptr || a->length()) {\n      a = &b;\n    }\n  }'",
                "markdown": "Reports dereferences of the pointers that may contain `nullptr`.\n\n**Example:**\n\n\n      using namespace std;\n      void process(string *a, string b) {\n        if (a != nullptr || a->length()) {\n          a = &b;\n        }\n      }\n"
              },
              "defaultConfiguration": {
                "enabled": true,
                "level": "warning",
                "parameters": {
                  "suppressToolId": "NullDereference",
                  "ideaSeverity": "WARNING",
                  "qodanaSeverity": "High"
                }
              },
              "relationships": [
                {
                  "target": {
                    "id": "C_C++/Data Flow Analysis",
                    "index": 15,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            }
          ],
          "taxa": [
            {
              "id": "JavaScript and TypeScript",
              "name": "JavaScript and TypeScript"
            },
            {
              "id": "JavaScript and TypeScript/Control flow issues",
              "name": "Control flow issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Python",
              "name": "Python"
            },
            {
              "id": "HTTP Client",
              "name": "HTTP Client"
            },
            {
              "id": "Angular",
              "name": "Angular"
            },
            {
              "id": "PostCSS",
              "name": "PostCSS"
            },
            {
              "id": "Sass_SCSS",
              "name": "Sass/SCSS"
            },
            {
              "id": "XPath",
              "name": "XPath"
            },
            {
              "id": "Shell script",
              "name": "Shell script"
            },
            {
              "id": "JavaScript and TypeScript/Unit testing",
              "name": "Unit testing",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Makefile",
              "name": "Makefile"
            },
            {
              "id": "CMake",
              "name": "CMake"
            },
            {
              "id": "CMake/General",
              "name": "General",
              "relationships": [
                {
                  "target": {
                    "id": "CMake",
                    "index": 11,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JSON and JSON5",
              "name": "JSON and JSON5"
            },
            {
              "id": "C_C++",
              "name": "C/C++"
            },
            {
              "id": "C_C++/Data Flow Analysis",
              "name": "Data Flow Analysis",
              "relationships": [
                {
                  "target": {
                    "id": "C_C++",
                    "index": 14,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MongoJS",
              "name": "MongoJS"
            },
            {
              "id": "JavaScript and TypeScript/General",
              "name": "General",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "MySQL",
              "name": "MySQL"
            },
            {
              "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
              "name": "Potentially undesirable code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Flow type checker",
              "name": "Flow type checker",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Markdown",
              "name": "Markdown"
            },
            {
              "id": "JavaScript and TypeScript/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Devicetree",
              "name": "Devicetree"
            },
            {
              "id": "HTML",
              "name": "HTML"
            },
            {
              "id": "JavaScript and TypeScript/Unused symbols",
              "name": "Unused symbols",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Data flow",
              "name": "Data flow",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "C_C++/General",
              "name": "General",
              "relationships": [
                {
                  "target": {
                    "id": "C_C++",
                    "index": 14,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Bitwise operation issues",
              "name": "Bitwise operation issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/ES2015 migration aids",
              "name": "ES2015 migration aids",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "General",
              "name": "General"
            },
            {
              "id": "HTML/Accessibility",
              "name": "Accessibility",
              "relationships": [
                {
                  "target": {
                    "id": "HTML",
                    "index": 25,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/React",
              "name": "React",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/TypeScript",
              "name": "TypeScript",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Validity issues",
              "name": "Validity issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Docker-compose",
              "name": "Docker-compose"
            },
            {
              "id": "JavaScript and TypeScript/Potentially confusing code constructs",
              "name": "Potentially confusing code constructs",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSS",
              "name": "CSS"
            },
            {
              "id": "CSS/Invalid elements",
              "name": "Invalid elements",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 38,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "SQL",
              "name": "SQL"
            },
            {
              "id": "Dockerfile",
              "name": "Dockerfile"
            },
            {
              "id": "JavaScript and TypeScript/Try statement issues",
              "name": "Try statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Function metrics",
              "name": "Function metrics",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Structural search",
              "name": "Structural search"
            },
            {
              "id": "YAML",
              "name": "YAML"
            },
            {
              "id": "Requirements",
              "name": "Requirements"
            },
            {
              "id": "XML",
              "name": "XML"
            },
            {
              "id": "JavaScript and TypeScript/Assignment issues",
              "name": "Assignment issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSS/Code style issues",
              "name": "Code style issues",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 38,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Less",
              "name": "Less"
            },
            {
              "id": "RegExp",
              "name": "RegExp"
            },
            {
              "id": "Vue",
              "name": "Vue"
            },
            {
              "id": "JavaScript and TypeScript/Node.js",
              "name": "Node.js",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Ini files",
              "name": "Ini files"
            },
            {
              "id": "XSLT",
              "name": "XSLT"
            },
            {
              "id": "C_C++/Unused code",
              "name": "Unused code",
              "relationships": [
                {
                  "target": {
                    "id": "C_C++",
                    "index": 14,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "C_C++/Functions",
              "name": "Functions",
              "relationships": [
                {
                  "target": {
                    "id": "C_C++",
                    "index": 14,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Imports and dependencies",
              "name": "Imports and dependencies",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "RELAX NG",
              "name": "RELAX NG"
            },
            {
              "id": "Objective-C",
              "name": "Objective-C"
            },
            {
              "id": "Objective-C/Unused code",
              "name": "Unused code",
              "relationships": [
                {
                  "target": {
                    "id": "Objective-C",
                    "index": 60,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSS/Probable bugs",
              "name": "Probable bugs",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 38,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Naming conventions",
              "name": "Naming conventions",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Switch statement issues",
              "name": "Switch statement issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/DOM issues",
              "name": "DOM issues",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Async code and promises",
              "name": "Async code and promises",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "JavaScript and TypeScript/Code quality tools",
              "name": "Code quality tools",
              "relationships": [
                {
                  "target": {
                    "id": "JavaScript and TypeScript",
                    "index": 0,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "Code Coverage",
              "name": "Code Coverage"
            },
            {
              "id": "Proofreading",
              "name": "Proofreading"
            },
            {
              "id": "GitHub actions",
              "name": "GitHub actions"
            },
            {
              "id": "C_C++/Static Analysis Tools",
              "name": "Static Analysis Tools",
              "relationships": [
                {
                  "target": {
                    "id": "C_C++",
                    "index": 14,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "CSS/Code quality tools",
              "name": "Code quality tools",
              "relationships": [
                {
                  "target": {
                    "id": "CSS",
                    "index": 38,
                    "toolComponent": {
                      "name": "CL"
                    }
                  },
                  "kinds": [
                    "superset"
                  ]
                }
              ]
            },
            {
              "id": "PostgreSQL",
              "name": "PostgreSQL"
            },
            {
              "id": "SQL server",
              "name": "SQL server"
            },
            {
              "id": "ReST",
              "name": "ReST"
            },
            {
              "id": "JSONPath",
              "name": "JSONPath"
            },
            {
              "id": "Dev Container",
              "name": "Dev Container"
            },
            {
              "id": "Clangd Inspections",
              "name": "Clangd Inspections"
            },
            {
              "id": "Qodana",
              "name": "Qodana"
            },
            {
              "id": "Security",
              "name": "Security"
            },
            {
              "id": "Oracle",
              "name": "Oracle"
            },
            {
              "id": "Internationalization",
              "name": "Internationalization"
            },
            {
              "id": "TOML",
              "name": "TOML"
            },
            {
              "id": "Version control",
              "name": "Version control"
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        },
        "extensions": [
          {
            "name": "JavaScript",
            "version": "243.6317",
            "rules": [
              {
                "id": "ConstantConditionalExpressionJS",
                "shortDescription": {
                  "text": "Constant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression in the format 'true? result1: result2' or 'false? result1: result2. Suggests simplifying the expression.'",
                  "markdown": "Reports a conditional expression in the format `true? result1: result2` or `false? result1: result2``.\nSuggests simplifying the expression.\n`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTestFailedLine",
                "shortDescription": {
                  "text": "Highlight failure line in test code"
                },
                "fullDescription": {
                  "text": "Reports a failed method call or an assertion in a test.",
                  "markdown": "Reports a failed method call or an assertion in a test."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSTestFailedLine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unit testing",
                      "index": 9,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateJSDoc",
                "shortDescription": {
                  "text": "Syntax errors and unresolved references in JSDoc"
                },
                "fullDescription": {
                  "text": "Reports a syntax discrepancy in a documentation comment.",
                  "markdown": "Reports a syntax discrepancy in a documentation comment."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSValidateJSDoc",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonBlockStatementBodyJS",
                "shortDescription": {
                  "text": "Statement body without braces"
                },
                "fullDescription": {
                  "text": "Reports a 'if', 'while', 'for', or 'with' statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance.",
                  "markdown": "Reports a `if`, `while`, `for`, or `with` statements whose body is not a block statement. Using code block in statement bodies is usually safer for downstream maintenance."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonBlockStatementBodyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithTooManyBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with too many branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction. Use the field below to specify the maximum number of branches expected.",
                  "markdown": "Reports an `if` statement with too many branches. Such statements may be confusing, and often indicate inadequate levels of design abstraction.\n\n\nUse the field below to specify the maximum number of branches expected."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfStatementWithTooManyBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementJS",
                "shortDescription": {
                  "text": "'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'break' statements. Ignores 'break' statements that end case blocks.",
                  "markdown": "Reports a `break` statements. Ignores `break` statements that end case blocks."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BreakStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 20,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSConfig",
                "shortDescription": {
                  "text": "Missing .flowconfig"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file with a '@flow' flag that doesn't have an associated '.flowconfig' file in the project.",
                  "markdown": "Reports a JavaScript file with a `@flow` flag that doesn't have an associated `.flowconfig` file in the project."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FlowJSConfig",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 21,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfClassThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' of a class from closure"
                },
                "fullDescription": {
                  "text": "Reports an attempt to reference a member of an ECMAScript class via the 'this.' qualifier in a nested function that is not a lambda. 'this' in a nested function that is not a lambda is the function's own 'this' and doesn't relate to the outer class.",
                  "markdown": "Reports an attempt to reference a member of an ECMAScript class via the `this.` qualifier in a nested function that is not a lambda.  \n`this` in a nested function that is not a lambda is the function's own `this` and doesn't relate to the outer class."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidUsageOfClassThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DebuggerStatementJS",
                "shortDescription": {
                  "text": "'debugger' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'debugger' statement used for interaction with the Javascript debuggers. Such statements should not appear in production code.",
                  "markdown": "Reports a `debugger` statement used for interaction with the Javascript debuggers. Such statements should not appear in production code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DebuggerStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 20,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedAssignment",
                "shortDescription": {
                  "text": "Unused assignment"
                },
                "fullDescription": {
                  "text": "Reports a variable whose value is never used after assignment. Suggests removing the unused variable to shorten the code and to avoid redundant allocations. The following cases are reported: A variable is never read after assignment. The value of a variable is always overwritten with another assignment before the variable is read next time. The initializer of a variable is redundant (for one of the above-mentioned reasons).",
                  "markdown": "Reports a variable whose value is never used after assignment.  \nSuggests removing the unused variable to shorten the code and to avoid redundant allocations.\n\nThe following cases are reported:\n\n* A variable is never read after assignment.\n* The value of a variable is always overwritten with another assignment before the variable is read next time.\n* The initializer of a variable is redundant (for one of the above-mentioned reasons)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 26,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSError",
                "shortDescription": {
                  "text": "Flow type checker"
                },
                "fullDescription": {
                  "text": "Reports errors from Flow.",
                  "markdown": "Reports errors from [Flow](https://flowtype.org/)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "FlowJSError",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 21,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReuseOfLocalVariableJS",
                "shortDescription": {
                  "text": "Reuse of local variable"
                },
                "fullDescription": {
                  "text": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity.",
                  "markdown": "Reports reusing a local variable and overwriting its value with a new value that is not related to the original variable usage. Reusing a local variable in this way may be confusing because the intended semantics of the local variable may vary with each usage. It may also cause bugs, if code changes result in values that were expected to be overwritten while they are actually live. It is good practices to keep variable lifetimes as short as possible, and not reuse local variables for the sake of brevity."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReuseOfLocalVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 27,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ShiftOutOfRangeJS",
                "shortDescription": {
                  "text": "Shift operation by possibly wrong constant"
                },
                "fullDescription": {
                  "text": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range '0..31', shifting by negative or overly large values.",
                  "markdown": "Reports a shift operation where the second operand is a constant outside the reasonable range, for example, an integer shift operation outside the range `0..31`, shifting by negative or overly large values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ShiftOutOfRangeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 29,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryContinueJS",
                "shortDescription": {
                  "text": "Unnecessary 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'continue' statement at the end of a loop. Suggests removing such statements.",
                  "markdown": "Reports an unnecessary `continue` statement at the end of a loop. Suggests removing such statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryContinueJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClosureCompilerSyntax",
                "shortDescription": {
                  "text": "Incorrect usage of JSDoc tags"
                },
                "fullDescription": {
                  "text": "Reports warnings implied by Google Closure Compiler annotations including correct use of '@abstract', '@interface', and '@implements' tags.",
                  "markdown": "Reports warnings implied by *Google Closure Compiler* annotations including correct use of `@abstract`, `@interface`, and `@implements` tags."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSClosureCompilerSyntax",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertLetToConst",
                "shortDescription": {
                  "text": "'let' is used instead of 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'let' declaration that can be made 'const'.",
                  "markdown": "Reports a `let` declaration that can be made `const`.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertLetToConst",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXDomNesting",
                "shortDescription": {
                  "text": "Invalid DOM element nesting"
                },
                "fullDescription": {
                  "text": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements.",
                  "markdown": "Detects HTML elements in JSX files which are not nested properly according to the DOM specification. React reports runtime warnings on incorrectly nested elements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSXDomNesting",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/React",
                      "index": 33,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports a parameter, return value, or assigned expression of incorrect type.",
                  "markdown": "Reports a parameter, return value, or assigned expression of incorrect type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptValidateTypes",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BadExpressionStatementJS",
                "shortDescription": {
                  "text": "Expression statement which is not assignment or call"
                },
                "fullDescription": {
                  "text": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error.",
                  "markdown": "Reports an expression statement that is neither an assignment nor a call. Such statements usually indicate an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "BadExpressionStatementJS",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingFloatingPointLiteralJS",
                "shortDescription": {
                  "text": "Confusing floating point literal"
                },
                "fullDescription": {
                  "text": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards.",
                  "markdown": "Reports any floating point number that does not have a decimal point, or any numbers before the decimal point, or and numbers after the decimal point. Such literals may be confusing, and violate several coding standards."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingFloatingPointLiteralJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BreakStatementWithLabelJS",
                "shortDescription": {
                  "text": "'break' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement.",
                  "markdown": "Reports a labeled `break` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BreakStatementWithLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 20,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueOrBreakFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'continue' or 'break' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'break' or 'continue' statement inside a 'finally' block. Such statements are very confusing, may hide exceptions, and complicate debugging.",
                  "markdown": "Reports a `break` or `continue` statement inside a `finally` block. Such statements are very confusing, may hide exceptions, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueOrBreakFromFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StatementsPerFunctionJS",
                "shortDescription": {
                  "text": "Overly long function"
                },
                "fullDescription": {
                  "text": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test. Use the field below to specify the maximum acceptable number of statements in a function.",
                  "markdown": "Reports an overly long function. Function length is calculated by counting up the number of non-empty statements in the function. Functions that are too long are error-prone and difficult to test.\n\n\nUse the field below to specify the maximum acceptable number of statements in a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionTooLongJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 43,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLocalVariableJS",
                "shortDescription": {
                  "text": "Redundant local variable"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary local variable that does not make a function more comprehensible: a local variable that is immediately returned a local variable that is immediately assigned to another variable and is not used anymore a local variable that always has the same value as another local variable or parameter. Use the checkbox below to have this inspection ignore variables that are immediately returned or thrown. Some coding styles suggest using such variables for clarity and ease of debugging.",
                  "markdown": "Reports an unnecessary local variable that does not make a function more comprehensible:\n\n* a local variable that is immediately returned\n* a local variable that is immediately assigned to another variable and is not used anymore\n* a local variable that always has the same value as another local variable or parameter.\n\n\nUse the checkbox below to have this inspection ignore variables that are immediately\nreturned or thrown. Some coding styles suggest using such variables for clarity and\nease of debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLocalVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Data flow",
                      "index": 27,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMethodCanBeStatic",
                "shortDescription": {
                  "text": "Method can be made 'static'"
                },
                "fullDescription": {
                  "text": "Reports a class method that can be safely made 'static'. A method can be 'static' if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass. Use the first checkbox below to inspect only 'private' methods.",
                  "markdown": "Reports a class method that can be safely made `static`. A method can be `static` if it does not reference any of its class' non-static methods and non-static fields and is not overridden in a subclass.\n\n\nUse the first checkbox below to inspect only `private` methods."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMethodCanBeStatic",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeclarationsAtScopeStart",
                "shortDescription": {
                  "text": "'var' declared not at the beginning of a function"
                },
                "fullDescription": {
                  "text": "Checks that declarations of local variables declared with var are at the top of a function scope. By default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code.",
                  "markdown": "Checks that declarations of local variables declared with **var** are at the top of a function scope.   \n\nBy default, variable declarations are always moved (\"hoisted\") invisibly to the top of their containing scope when the code is executed. Therefore, declaring them at the top of the scope helps represent this behavior in the code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSDeclarationsAtScopeStart",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementWithLabelJS",
                "shortDescription": {
                  "text": "'continue' statement with label"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement.",
                  "markdown": "Reports a labeled `continue` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueStatementWithLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 20,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingConfigOption",
                "shortDescription": {
                  "text": "Missing tsconfig.json option "
                },
                "fullDescription": {
                  "text": "Reports a usage that requires an explicit option in 'tsconfig.json'. For example, to use JSX in '.tsx' files, 'tsconfig.json' must contain '\"jsx\"' property.",
                  "markdown": "Reports a usage that requires an explicit option in `tsconfig.json`. For example, to use JSX in `.tsx` files, `tsconfig.json` must contain `\"jsx\"` property."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptMissingConfigOption",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSObjectNullOrUndefined",
                "shortDescription": {
                  "text": "Object is 'null' or 'undefined'"
                },
                "fullDescription": {
                  "text": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is 'undefined' or 'null'.",
                  "markdown": "Reports an error caused by invoking a method, accessing a property, or calling a function on an object that is `undefined` or `null`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSObjectNullOrUndefined",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name. The template for a new component can be modified in Editor | File and Code Templates.",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding a missing import statement if the referenced component is defined in the project or its dependencies or creating a new component with this name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSXUnresolvedComponent",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnBreakStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'break' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'break' statement whose labels may be removed without changing the flow of control.",
                  "markdown": "Reports a labeled `break` statement whose labels may be removed without changing the flow of control."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelOnBreakStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ShorthandObjectProperty",
                "shortDescription": {
                  "text": "Property can be replaced with shorthand"
                },
                "fullDescription": {
                  "text": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it. Example: 'var obj = {foo:foo}' After applying the quick-fix the code looks as follows: 'var obj = {foo}'",
                  "markdown": "Reports an object property that can be converted to ES6 shorthand style and provides a quick-fix to do it.\n\nExample:\n\n\n    var obj = {foo:foo}\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    var obj = {foo}\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ShorthandObjectProperty",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ContinueStatementJS",
                "shortDescription": {
                  "text": "'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'continue' statement.",
                  "markdown": "Reports a `continue` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ContinueStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 20,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToForLoopParameterJS",
                "shortDescription": {
                  "text": "Assignment to 'for' loop parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a variable declared as a 'for' loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.",
                  "markdown": "Reports an assignment to a variable declared as a `for` loop parameter. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToForLoopParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidConstructorUsage",
                "shortDescription": {
                  "text": "Potentially invalid constructor usage"
                },
                "fullDescription": {
                  "text": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after 'new', using a constructor's prototype or calling a constructor without 'new'. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc '@constructor' tag.",
                  "markdown": "Reports a usage of a potentially invalid constructor function, for example: a function that is not a constructor after `new`, using a constructor's prototype or calling a constructor without `new`. A constructor function is assumed to have an upper case name (optional) or have an explicit JSDoc `@constructor` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidConstructorUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Pointless arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring.",
                  "markdown": "Reports an arithmetic expression that include adding or subtracting zero, multiplying by zero or one, division by one, and shift by zero. Such expressions may result from not fully completed automated refactoring."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessArithmeticExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NodeCoreCodingAssistance",
                "shortDescription": {
                  "text": "Unresolved Node.js APIs"
                },
                "fullDescription": {
                  "text": "Suggests configuring coding assistance for Node.js, for example, 'require' and/or core modules ('path', 'http', 'fs', etc.). See https://nodejs.org/api/ for the complete list.",
                  "markdown": "Suggests configuring coding assistance for Node.js, for example, `require` and/or core modules ('path', 'http', 'fs', etc.).\n\n\nSee <https://nodejs.org/api/> for the complete list."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NodeCoreCodingAssistance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Node.js",
                      "index": 53,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndeclaredVariable",
                "shortDescription": {
                  "text": "Implicitly declared global JavaScript variable"
                },
                "fullDescription": {
                  "text": "Reports an implicit declaration of a global variable. Example: 'var aaa = 1; // good\n  bbb = 2; // bad, if bbb is not declared with 'var' somewhere'",
                  "markdown": "Reports an implicit declaration of a global variable.\n\nExample:\n\n\n      var aaa = 1; // good\n      bbb = 2; // bad, if bbb is not declared with 'var' somewhere\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUndeclaredVariable",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DivideByZeroJS",
                "shortDescription": {
                  "text": "Division by zero"
                },
                "fullDescription": {
                  "text": "Reports division by zero or a remainder by zero.",
                  "markdown": "Reports division by zero or a remainder by zero."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DivideByZeroJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPrimitiveTypeWrapperUsage",
                "shortDescription": {
                  "text": "Primitive type object wrapper used"
                },
                "fullDescription": {
                  "text": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost.",
                  "markdown": "Reports an improper usage of a wrapper for primitive types or a property of a primitive type being modified, as in the latter case the assigned value will be lost."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPrimitiveTypeWrapperUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSmartCast",
                "shortDescription": {
                  "text": "Narrowed type"
                },
                "fullDescription": {
                  "text": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection.",
                  "markdown": "Reports a usage of a variable where the variable type is narrowed by a type guard. Note that severity level doesn't affect this inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptSmartCast",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertIndexedForToForOf",
                "shortDescription": {
                  "text": "Indexed 'for' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports an indexed 'for' loop used on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops are introduced in ECMAScript 6 and iterate over 'iterable' objects.",
                  "markdown": "Reports an indexed [for](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for) loop used on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops are introduced in ECMAScript 6 and iterate over `iterable` objects."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertIndexedForToForOf",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInArrayLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in array literal"
                },
                "fullDescription": {
                  "text": "Reports a usage of a trailing comma in an array literal. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Although trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation.",
                  "markdown": "Reports a usage of a trailing comma in an array literal.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nAlthough trailing commas in arrays are allowed by the specification, some browsers may throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSLastCommaInArrayLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionJS",
                "shortDescription": {
                  "text": "Conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit 'if' statements.",
                  "markdown": "Reports a ternary conditional expression. Some coding standards prohibit such expressions in favor of explicit `if` statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 20,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertVarToLetConst",
                "shortDescription": {
                  "text": "'var' is used instead of 'let' or 'const'"
                },
                "fullDescription": {
                  "text": "Reports a 'var' declaration that is used instead of 'let' or 'const'. Both 'let' and 'const' are block-scoped and behave more strictly. Suggests replacing all 'var' declarations with 'let' or 'const' declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors. Select the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action.",
                  "markdown": "Reports a `var` declaration that is used instead of `let` or `const`.  \nBoth `let` and `const` are block-scoped and behave more strictly.   \n\nSuggests replacing all `var` declarations with `let` or `const` declarations, depending on the semantics of a particular value. The declarations may be moved to the top of the function or placed before the first usage of the variable to avoid Reference errors.   \nSelect the 'Conservatively convert var with Fix all action' option to prevent any changes in these complex cases when using the 'Fix all' action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertVarToLetConst",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBooleanExpressionJS",
                "shortDescription": {
                  "text": "Pointless statement or boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a pointless or pointlessly complicated boolean expression or statement. Example: 'let a = !(false && x);\n  let b = false || x;' After the quick fix is applied the result looks like: 'let a = true;\n  let b = x;'",
                  "markdown": "Reports a pointless or pointlessly complicated boolean expression or statement.\n\nExample:\n\n\n      let a = !(false && x);\n      let b = false || x;\n\nAfter the quick fix is applied the result looks like:\n\n\n      let a = true;\n      let b = x;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessBooleanExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSReferencingMutableVariableFromClosure",
                "shortDescription": {
                  "text": "Referencing mutable variable from closure"
                },
                "fullDescription": {
                  "text": "Reports access to outer mutable variables from functions. Example: 'for (var i = 1; i <= 3; i++) {\n    setTimeout(function() {\n        console.log(i); // bad\n    }, 0);\n  }'",
                  "markdown": "Reports access to outer mutable variables from functions.\n\nExample:\n\n\n      for (var i = 1; i <= 3; i++) {\n        setTimeout(function() {\n            console.log(i); // bad\n        }, 0);\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSReferencingMutableVariableFromClosure",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DynamicallyGeneratedCodeJS",
                "shortDescription": {
                  "text": "Execution of dynamically generated code"
                },
                "fullDescription": {
                  "text": "Reports a call of the 'eval()', 'setTimeout()', or 'setInterval()' function or an allocation of a 'Function' object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk. Ignores the cases when a callback function is provided to these methods statically, without code generation.",
                  "markdown": "Reports a call of the `eval()`, `setTimeout()`, or `setInterval()` function or an allocation of a `Function` object. These functions are used to execute arbitrary strings of JavaScript text, which often dynamically generated. This can be very confusing, and may be a security risk.   \n\nIgnores the cases when a callback function is provided to these methods statically, without code generation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DynamicallyGeneratedCodeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Negated conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: '!condition ? 2 : 1'",
                  "markdown": "Reports a conditional expression whose condition is negated. Suggests flipping the order of branches in the conditional expression to increase the clarity of the statement. Example: `!condition ? 2 : 1`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegatedConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUrlImportUsage",
                "shortDescription": {
                  "text": "URL import is used"
                },
                "fullDescription": {
                  "text": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation. URLs in import specifiers are supported only for ECMAScript modules in the JavaScript language.",
                  "markdown": "Checks used URL imports in the JavaScript language. Suggests downloading the module for the specified remote URL. Such association enables the IDE to provide proper code completion and navigation.   \n\nURLs in import specifiers are supported only for ECMAScript modules in the JavaScript language."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUrlImportUsage",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 58,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelOnContinueStatementJS",
                "shortDescription": {
                  "text": "Unnecessary label on 'continue' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled 'continue' statement whose labels may be removed without changing the flow of control.",
                  "markdown": "Reports a labeled `continue` statement whose labels may be removed without changing the flow of control."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelOnContinueStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedEqualityJS",
                "shortDescription": {
                  "text": "Chained equality"
                },
                "fullDescription": {
                  "text": "Reports a chained equality comparison (i.e. 'a==b==c'). Such comparisons are confusing.",
                  "markdown": "Reports a chained equality comparison (i.e. `a==b==c`). Such comparisons are confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChainedEqualityComparisonsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SillyAssignmentJS",
                "shortDescription": {
                  "text": "Variable is assigned to itself"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'x = x'.",
                  "markdown": "Reports an assignment in the form `x = x`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SillyAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                "shortDescription": {
                  "text": "Possibly incorrect target of indexed property access"
                },
                "fullDescription": {
                  "text": "Reports a potentially invalid indexed property access, for example, 'Array[1]'.",
                  "markdown": "Reports a potentially invalid indexed property access, for example, `Array[1]`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidTargetOfIndexedPropertyAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAccessibilityCheck",
                "shortDescription": {
                  "text": "Inaccessible @private and @protected members referenced"
                },
                "fullDescription": {
                  "text": "Reports a reference to a JavaScript member that is marked with a '@private' or '@protected' tag but does not comply with visibility rules that these tags imply.",
                  "markdown": "Reports a reference to a JavaScript member that is marked with a `@private` or `@protected` tag but does not comply with visibility rules that these tags imply."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSAccessibilityCheck",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertRequireIntoImport",
                "shortDescription": {
                  "text": "'require()' is used instead of 'import'"
                },
                "fullDescription": {
                  "text": "Reports a 'require()' statement. Suggests converting it to a 'require()' call with an 'import' statement. Enable 'Convert require() inside inner scopes with Fix all action' to convert all 'require()' calls inside the nested functions and statements when using the 'Fix all' action. Please note that converting 'require()' statements inside inner scopes to 'import' statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. 'require()' calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used. Clear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action.",
                  "markdown": "Reports a `require()` statement. Suggests converting it to a `require()` call with an `import` statement.   \n\nEnable 'Convert require() inside inner scopes with Fix all action' to convert all `require()` calls inside the nested functions and statements when using the 'Fix all' action.   \n\nPlease note that converting `require()` statements inside inner scopes to `import` statements may cause changes in the semantics of the code. Import statements are static module dependencies and are hoisted, which means that they are moved to the top of the current module. `require()` calls load modules dynamically. They can be executed conditionally, and their scope is defined by the expression in which they are used.   \nClear the 'Convert require() inside inner scopes with Fix all action' checkbox to prevent any changes in these complex cases when using the 'Fix all' action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertRequireIntoImport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleLoopsJS",
                "shortDescription": {
                  "text": "Function with multiple loops"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple loop statements.",
                  "markdown": "Reports a function with multiple loop statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMultipleLoopsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 43,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LabeledStatementJS",
                "shortDescription": {
                  "text": "Labeled statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement.",
                  "markdown": "Reports a labeled statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LabeledStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 20,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedCatchParameterJS",
                "shortDescription": {
                  "text": "Unused 'catch' parameter"
                },
                "fullDescription": {
                  "text": "Reports a 'catch' parameter that is not used in the corresponding block. The 'catch' parameters named 'ignore' or 'ignored' are ignored. Use the checkbox below to disable this inspection for 'catch' blocks with comments.",
                  "markdown": "Reports a `catch` parameter that is not used in the corresponding block. The `catch` parameters named `ignore` or `ignored` are ignored.\n\n\nUse the checkbox below to disable this inspection for `catch`\nblocks with comments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedCatchParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NpmUsedModulesInstalled",
                "shortDescription": {
                  "text": "Missing module dependency"
                },
                "fullDescription": {
                  "text": "Reports a module from a 'require()' call or an 'import' statement that is not installed or is not listed in package.json dependencies. Suggests installing the module and/or including it into package.json. For 'require()' calls, works only in the files from the scope of Node.js Core JavaScript library.",
                  "markdown": "Reports a module from a `require()` call or an `import` statement that is not installed or is not listed in package.json dependencies.\n\nSuggests installing the module and/or including it into package.json.\n\nFor `require()` calls, works only in the files from the scope of *Node.js Core* JavaScript library."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "NpmUsedModulesInstalled",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 58,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "WithStatementJS",
                "shortDescription": {
                  "text": "'with' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'with' statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables.",
                  "markdown": "Reports a `with` statements. Such statements result in potentially confusing implicit bindings, and may behave strangely in setting new variables."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WithStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 20,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConstantReassignment",
                "shortDescription": {
                  "text": "Attempt to assign to const or readonly variable"
                },
                "fullDescription": {
                  "text": "Reports reassigning a value to a constant or a readonly variable.",
                  "markdown": "Reports reassigning a value to a constant or a readonly variable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSConstantReassignment",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptCheckImport",
                "shortDescription": {
                  "text": "Unresolved imported name"
                },
                "fullDescription": {
                  "text": "Reports an unresolved name or binding in an 'import' declaration in TypeScript code.",
                  "markdown": "Reports an unresolved name or binding in an `import` declaration in TypeScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptCheckImport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MagicNumberJS",
                "shortDescription": {
                  "text": "Magic number"
                },
                "fullDescription": {
                  "text": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored.",
                  "markdown": "Reports a \"magic number\" that is a numeric literal used without being named by a constant declaration. Magic numbers can result in code whose intention is unclear, and may result in errors if a magic number is changed in one code location but remains unchanged in another. The numbers 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100, 1000, 0.0 and 1.0 are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MagicNumberJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionNamingConventionJS",
                "shortDescription": {
                  "text": "Function naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression for function names. Use the standard 'java.util.regex' format for regular expressions.",
                  "markdown": "Reports a function whose name is too short, too long, or does not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nfor function names. Use the standard `java.util.regex` format for regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 63,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXSyntaxUsed",
                "shortDescription": {
                  "text": "JSX syntax used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX tag in JavaScript code.",
                  "markdown": "Reports a usage of a JSX tag in JavaScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSXSyntaxUsed",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJoinVariableDeclarationAndAssignment",
                "shortDescription": {
                  "text": "Variable declaration can be merged with the first assignment to the variable"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression.",
                  "markdown": "Reports a variable that is declared without an initializer and is used much further in the code or in a single nested scope. Suggests moving the variable closer to its usages and joining it with the initializer expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSJoinVariableDeclarationAndAssignment",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRedundantSwitchStatement",
                "shortDescription": {
                  "text": "'switch' statement is redundant and can be replaced"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement with an empty body, or with only one 'case' branch, or with a 'default' branch only.",
                  "markdown": "Reports a `switch` statement with an empty body, or with only one `case` branch, or with a `default` branch only."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSRedundantSwitchStatement",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptLibrary",
                "shortDescription": {
                  "text": "Missing global library"
                },
                "fullDescription": {
                  "text": "Reports a TypeScript library file that is required for a symbol but is not listed under the 'lib' compiler option in 'tsconfig.json'.",
                  "markdown": "Reports a TypeScript library file that is required for a symbol but is not listed under the `lib` compiler option in `tsconfig.json`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptLibrary",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptMissingAugmentationImport",
                "shortDescription": {
                  "text": "Missing augmentation import"
                },
                "fullDescription": {
                  "text": "Reports a usage from augmentation module without an explicit import.",
                  "markdown": "Reports a usage from [augmentation module](https://www.typescriptlang.org/docs/handbook/declaration-merging.html#module-augmentation) without an explicit import."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptMissingAugmentationImport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedGlobalSymbols",
                "shortDescription": {
                  "text": "Unused global symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused globally accessible public function, variable, class, or property.",
                  "markdown": "Reports an unused globally accessible public function, variable, class, or property."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedGlobalSymbols",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 26,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertModuleExportToExport",
                "shortDescription": {
                  "text": "'module.exports' is used instead of 'export'"
                },
                "fullDescription": {
                  "text": "Reports a 'module.export' statement. Suggests replacing it with an 'export' or 'export default' statement. Please note that the quick-fix for converting 'module.export' into 'export' is not available for 'module.export' inside functions or statements because 'export' statements can only be at the top level of a module.",
                  "markdown": "Reports a `module.export` statement. Suggests replacing it with an `export` or `export default` statement.   \n\nPlease note that the quick-fix for converting `module.export` into `export` is not available for `module.export` inside functions or statements because `export` statements can only be at the top level of a module."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertModuleExportToExport",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DocumentWriteJS",
                "shortDescription": {
                  "text": "Call to 'document.write()'"
                },
                "fullDescription": {
                  "text": "Reports a method call to 'document.write()' or 'document.writeln()'. Most usages of such calls are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, the 'write()' and 'writeln()' calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs.",
                  "markdown": "Reports a method call to `document.write()` or `document.writeln()`. Most usages of such calls are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, the `write()` and `writeln()` calls will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can result in difficulty to point out bugs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DocumentWriteJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 65,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "BlockStatementJS",
                "shortDescription": {
                  "text": "Unnecessary block statement"
                },
                "fullDescription": {
                  "text": "Reports a block statement that is not used as the body of 'if', 'for', 'while', 'do', 'with', or 'try' statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for 'let' and 'const' variables, but still free-standing block statements may be confusing and result in subtle bugs when used with 'var' variables.",
                  "markdown": "Reports a block statement that is not used as the body of `if`, `for`, `while`, `do`, `with`, or `try` statements, or as the body of a function declaration. Starting from ECMAScript 6, JavaScript blocks introduce new scopes for `let` and `const` variables, but still free-standing block statements may be confusing and result in subtle bugs when used with `var` variables."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "BlockStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AnonymousFunctionJS",
                "shortDescription": {
                  "text": "Anonymous function"
                },
                "fullDescription": {
                  "text": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a 'name' property specified in the ECMAScript 6 standard. For example, 'var bar = function() {};' is not reported.",
                  "markdown": "Reports an anonymous function. An explicit name of a function expression may be helpful for debugging. Ignores function expressions without names if they have a `name` property specified in the ECMAScript 6 standard. For example, `var bar = function() {};` is not reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AnonymousFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 20,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ObjectAllocationIgnoredJS",
                "shortDescription": {
                  "text": "Result of object allocation ignored"
                },
                "fullDescription": {
                  "text": "Reports object allocation where the result of the allocated object is ignored, for example, 'new Error();' as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy.",
                  "markdown": "Reports object allocation where the result of the allocated object is ignored, for example, `new Error();` as a statement, without any assignment. Such allocation expressions may indicate an odd object initialization strategy."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ObjectAllocationIgnored",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteRecursionJS",
                "shortDescription": {
                  "text": "Infinite recursion"
                },
                "fullDescription": {
                  "text": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally.",
                  "markdown": "Reports a function which must either recurse infinitely or throw an exception. Such functions may not return normally."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InfiniteRecursionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedConditionalExpressionJS",
                "shortDescription": {
                  "text": "Nested conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic.",
                  "markdown": "Reports a ternary conditional expression within another ternary condition. Such nested conditionals may be extremely confusing, and best replaced by more explicit conditional logic."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSTypeOfValues",
                "shortDescription": {
                  "text": "'typeof' comparison with non-standard value"
                },
                "fullDescription": {
                  "text": "Reports a comparison of a 'typeof' expression with a literal string which is not one of the standard types: 'undefined', 'object', 'boolean', 'number', 'string', 'function', or 'symbol'. Such comparisons always return 'false'.",
                  "markdown": "Reports a comparison of a `typeof` expression with a literal string which is not one of the standard types: `undefined`, `object`, `boolean`, `number`, `string`, `function`, or `symbol`. Such comparisons always return `false`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSTypeOfValues",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncompatibleMaskJS",
                "shortDescription": {
                  "text": "Incompatible bitwise mask operation"
                },
                "fullDescription": {
                  "text": "Reports a bitwise mask expression which for sure evaluates to 'true' or 'false'. Expressions are of the form '(var & constant1) == constant2' or '(var | constant1) == constant2', where 'constant1' and 'constant2' are incompatible bitmask constants. Example: '// Incompatible mask: as the last byte in mask is zero,\n// something like 0x1200 would be possible, but not 0x1234\nif ((mask & 0xFF00) == 0x1234) {...}'",
                  "markdown": "Reports a bitwise mask expression which for sure evaluates to `true` or `false`. Expressions are of the form `(var & constant1) == constant2` or `(var | constant1) == constant2`, where `constant1` and `constant2` are incompatible bitmask constants.\n\nExample:\n\n\n    // Incompatible mask: as the last byte in mask is zero,\n    // something like 0x1200 would be possible, but not 0x1234\n    if ((mask & 0xFF00) == 0x1234) {...}\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncompatibleBitwiseMaskOperation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 29,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TextLabelInSwitchStatementJS",
                "shortDescription": {
                  "text": "Text label in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a labeled statement inside a 'switch' statement, which often results from a typo. Example: 'switch(x)\n    {\n        case 1:\n        case2:   //typo!\n        case 3:\n            break;\n    }'",
                  "markdown": "Reports a labeled statement inside a `switch` statement, which often results from a typo.\n\nExample:\n\n\n        switch(x)\n        {\n            case 1:\n            case2:   //typo!\n            case 3:\n                break;\n        }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TextLabelInSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PossiblyAsyncFunction",
                "shortDescription": {
                  "text": "'await' in non-async function"
                },
                "fullDescription": {
                  "text": "Reports a usage of 'await' in a function that was possibly intended to be async but is actually missing the 'async' modifier. Although 'await' can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made 'async'.",
                  "markdown": "Reports a usage of `await` in a function that was possibly intended to be async but is actually missing the `async` modifier. Although `await` can be used as an identifier, it is likely that it was intended to be used as an operator, so the containing function should be made `async`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6PossiblyAsyncFunction",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 66,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyCatchBlockJS",
                "shortDescription": {
                  "text": "Empty 'catch' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'catch' block. This indicates that errors are simply ignored instead of handling them. Any comment in a 'catch' block mutes the inspection.",
                  "markdown": "Reports an empty `catch` block. This indicates that errors are simply ignored instead of handling them.   \n\nAny comment in a `catch` block mutes the inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyCatchBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSHint",
                "shortDescription": {
                  "text": "JSHint"
                },
                "fullDescription": {
                  "text": "Reports a problem detected by the JSHint linter.",
                  "markdown": "Reports a problem detected by the [JSHint](https://jshint.com/) linter."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSHint",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 67,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FlowJSFlagCommentPlacement",
                "shortDescription": {
                  "text": "Misplaced @flow flag"
                },
                "fullDescription": {
                  "text": "Reports a '@flow' flag comment that is not located at the top of a file.",
                  "markdown": "Reports a `@flow` flag comment that is not located at the top of a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FlowJSFlagCommentPlacement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Flow type checker",
                      "index": 21,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Eslint",
                "shortDescription": {
                  "text": "ESLint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the ESLint linter. The highlighting is based on the rule severity specified in the ESLint configuration file for each individual rule. Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules.",
                  "markdown": "Reports a discrepancy detected by the [ESLint](https://eslint.org) linter.   \n\nThe highlighting is based on the rule severity specified in the [ESLint configuration file](https://eslint.org/docs/user-guide/configuring) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all ESLint rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "Eslint",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 67,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicatedDeclaration",
                "shortDescription": {
                  "text": "Duplicate declaration"
                },
                "fullDescription": {
                  "text": "Reports multiple declarations in a scope.",
                  "markdown": "Reports multiple declarations in a scope."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSDuplicatedDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion.TS",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing '==' or '!=' equality operators with type-safe '===' or '!==' operators. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'.",
                  "markdown": "Reports a usage of equality operators may cause unexpected type coercions. Suggests replacing `==` or `!=` equality operators with type-safe `===` or `!==` operators.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualityComparisonWithCoercionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSOctalInteger",
                "shortDescription": {
                  "text": "Octal integer"
                },
                "fullDescription": {
                  "text": "Reports a deprecated octal integer literal prefixed with '0' instead of '0o'. Such literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error. To force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below.",
                  "markdown": "Reports a deprecated octal integer literal prefixed with `0` instead of `0o`.  \nSuch literals are not allowed in modern ECMAScript code, and using them in the strict mode is an error.  \nTo force this inspection for ES5 and ES3 language levels, select the 'Warn about obsolete octal literals in ES5- code' checkbox below."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSOctalInteger",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ExceptionCaughtLocallyJS",
                "shortDescription": {
                  "text": "Exception used for local control-flow"
                },
                "fullDescription": {
                  "text": "Reports a 'throw' statement whose exceptions are always caught by the containing 'try' statement. Using 'throw' statements as a 'goto' to change the local flow of control is confusing.",
                  "markdown": "Reports a `throw` statement whose exceptions are always caught by the containing `try` statement. Using `throw` statements as a `goto` to change the local flow of control is confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ExceptionCaughtLocallyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThrowFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'throw' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports s 'throw' statement inside a 'finally' block. Such 'throw' statements may mask exceptions thrown, and complicate debugging.",
                  "markdown": "Reports s `throw` statement inside a `finally` block. Such `throw` statements may mask exceptions thrown, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThrowInsideFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptValidateGenericTypes",
                "shortDescription": {
                  "text": "Incorrect generic type argument"
                },
                "fullDescription": {
                  "text": "Reports an invalid type argument in a function, interface, or class declaration.",
                  "markdown": "Reports an invalid type argument in a function, interface, or class declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptValidateGenericTypes",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclomaticComplexityJS",
                "shortDescription": {
                  "text": "Overly complex function"
                },
                "fullDescription": {
                  "text": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test. Use the field provided below to specify the maximum acceptable cyclomatic complexity for a function.",
                  "markdown": "Reports a function with too many branching points in a function (too high cyclomatic complexity). Such functions may be confusing and hard to test.\n\n\nUse the field provided below to specify the maximum acceptable cyclomatic complexity for a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 43,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMismatchedCollectionQueryUpdate",
                "shortDescription": {
                  "text": "Mismatched query and update of collection"
                },
                "fullDescription": {
                  "text": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error. Query methods are automatically detected, based on whether they return something, or a callback is passed to them. Use the table below to specify which methods are update methods.",
                  "markdown": "Reports a collection of fields or variables whose contents are either queried and not updated or updated and not queried. Such mismatched queries and updates are pointless and may indicate either dead code or a typographical error.\n\n\nQuery methods are automatically detected, based on whether they return something, or a callback is passed to them.\nUse the table below to specify which methods are update methods."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSMismatchedCollectionQueryUpdate",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PackageJsonMismatchedDependency",
                "shortDescription": {
                  "text": "Mismatched dependencies in package.json"
                },
                "fullDescription": {
                  "text": "Reports a dependency from package.json that is not installed or doesn't match the specified version range.",
                  "markdown": "Reports a dependency from package.json that is not installed or doesn't match the specified [version range](https://docs.npmjs.com/about-semantic-versioning)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PackageJsonMismatchedDependency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 58,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSPotentiallyInvalidUsageOfThis",
                "shortDescription": {
                  "text": "Potentially invalid reference to 'this' from closure"
                },
                "fullDescription": {
                  "text": "Reports a 'this' in closure that is used for referencing properties of outer context. Example: 'function Outer() {\n  this.outerProp = 1;\n  function inner() {\n    // bad, because 'outerProp' of Outer\n    // won't be updated here\n    // on calling 'new Outer()' as may be expected\n    this.outerProp = 2;\n  }\n  inner();\n}'",
                  "markdown": "Reports a `this` in closure that is used for referencing properties of outer context.\n\nExample:\n\n\n    function Outer() {\n      this.outerProp = 1;\n      function inner() {\n        // bad, because 'outerProp' of Outer\n        // won't be updated here\n        // on calling 'new Outer()' as may be expected\n        this.outerProp = 2;\n      }\n      inner();\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSPotentiallyInvalidUsageOfThis",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchDefault",
                "shortDescription": {
                  "text": "'switch' statement has no 'default' branch"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement without a 'default' clause when some possible values are not enumerated.",
                  "markdown": "Reports a `switch` statement without a `default` clause when some possible values are not enumerated."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMissingSwitchDefault",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSXNamespaceValidation",
                "shortDescription": {
                  "text": "Missing JSX namespace"
                },
                "fullDescription": {
                  "text": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation.",
                  "markdown": "Reports a usage of a JSX construction without importing namespace. Having the namespace in the file scope ensures proper code compilation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSXNamespaceValidation",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 58,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedLibraryURL",
                "shortDescription": {
                  "text": "Missed locally stored library for HTTP link"
                },
                "fullDescription": {
                  "text": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation.",
                  "markdown": "Reports a URL of an external JavaScript library that is not associated with any locally stored file. Suggests downloading the library. Such association enables the IDE to provide proper code completion and navigation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedLibraryURL",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6PreferShortImport",
                "shortDescription": {
                  "text": "Import can be shortened"
                },
                "fullDescription": {
                  "text": "Reports an ES6 import whose 'from' part can be shortened. Suggests importing the parent directory.",
                  "markdown": "Reports an ES6 import whose `from` part can be shortened. Suggests importing the parent directory."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6PreferShortImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PointlessBitwiseExpressionJS",
                "shortDescription": {
                  "text": "Bitwise expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports an expression that includes 'and' with zero, 'or' by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings.",
                  "markdown": "Reports an expression that includes `and` with zero, `or` by zero, or shifting by zero. Such expressions may result from not fully completed automated refactorings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PointlessBitwiseExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 29,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InfiniteLoopJS",
                "shortDescription": {
                  "text": "Infinite loop statement"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement which can only exit by throwing an exception. Such statements often indicate coding errors.",
                  "markdown": "Reports a `for`, `while`, or `do` statement which can only exit by throwing an exception. Such statements often indicate coding errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InfiniteLoopJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSStringConcatenationToES6Template",
                "shortDescription": {
                  "text": "String concatenation is used instead of template literal"
                },
                "fullDescription": {
                  "text": "Reports a string concatenation. Suggests replacing it with a template literal Example '\"result: \" + a + \".\"' After applying the quick-fix the code looks as follows: '`result: ${a}.`'",
                  "markdown": "Reports a string concatenation. Suggests replacing it with a [template literal](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals)\n\nExample\n\n     \"result: \" + a + \".\" \n\nAfter applying the quick-fix the code looks as follows:\n\n     `result: ${a}.` \n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSStringConcatenationToES6Template",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSArrowFunctionBracesCanBeRemoved",
                "shortDescription": {
                  "text": "Redundant braces around arrow function body"
                },
                "fullDescription": {
                  "text": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces. 'let incrementer = (x) => {return x + 1};' After the quick-fix is applied, the code fragment looks as follows: 'let incrementer = (x) => x + 1;'",
                  "markdown": "Reports an arrow function whose body only consists of braces and exactly one statement. Suggests converting to concise syntax without braces.\n\n\n        let incrementer = (x) => {return x + 1};\n\nAfter the quick-fix is applied, the code fragment looks as follows:\n\n\n        let incrementer = (x) => x + 1;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSArrowFunctionBracesCanBeRemoved",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReplaceAssignmentWithOperatorAssignmentJS",
                "shortDescription": {
                  "text": "Assignment could be replaced with operator assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer. Example: 'x = x + 3;'\n  'x = x / 3;'\n After the quick fix is applied the result looks like:   'x += 3;'\n  'x /= 3;'",
                  "markdown": "Reports an assignment operation that can be replaced by an operator assignment to make your code shorter and probably clearer.\n\n\nExample:\n\n      x = x + 3;\n      x = x / 3;\n\nAfter the quick fix is applied the result looks like:\n\n      x += 3;\n      x /= 3;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentReplaceableWithOperatorAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFileReferences",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references.",
                  "markdown": "Reports an unresolved file reference in a JavaScript file, including CommonJS and AMD modules references."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSFileReferences",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithInconsistentReturnsJS",
                "shortDescription": {
                  "text": "Function with inconsistent returns"
                },
                "fullDescription": {
                  "text": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error. Example: 'function foo() {\n  if (true)\n    return 3;\n  return;\n}'",
                  "markdown": "Reports a function that returns a value in some cases while in other cases no value is returned. This usually indicates an error.\n\nExample:\n\n\n    function foo() {\n      if (true)\n        return 3;\n      return;\n    }\n\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithInconsistentReturnsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyTryBlockJS",
                "shortDescription": {
                  "text": "Empty 'try' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'try' block, which usually indicates an error.",
                  "markdown": "Reports an empty `try` block, which usually indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyTryBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ClassMemberInitializationOrder",
                "shortDescription": {
                  "text": "Use of possibly unassigned property in a static initializer"
                },
                "fullDescription": {
                  "text": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet. Initialization of class members happens consequently for fields, so a field cannot reference another field that is declared later.",
                  "markdown": "Reports a class member initializer which references another non-hoisted class member while the latter may be not initialized yet.   \n\nInitialization of class members happens consequently for fields, so a field cannot reference another field that is declared later."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6ClassMemberInitializationOrder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReservedWordUsedAsNameJS",
                "shortDescription": {
                  "text": "Reserved word used as name"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords.",
                  "markdown": "Reports a JavaScript reserved word used as a name. The JavaScript specification reserves a number of words which are currently not used as keywords. Using those words as identifiers may result in broken code if later versions of JavaScript start using them as keywords."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReservedWordAsName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSClassNamingConvention",
                "shortDescription": {
                  "text": "Class naming convention"
                },
                "fullDescription": {
                  "text": "Reports a class or a function that is annotated with a JSDoc '@constructor' or '@class' tag whose names are too short, too long, or do not follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for classes names. Use the standard 'java.util.regex' format for regular expressions.",
                  "markdown": "Reports a class or a function that is annotated with a JSDoc `@constructor` or `@class` tag whose names are too short, too long, or do not follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for classes names. Use the standard `java.util.regex` format for regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSClassNamingConvention",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 63,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionJS",
                "shortDescription": {
                  "text": "Nested function"
                },
                "fullDescription": {
                  "text": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing. Use the checkbox below to ignore anonymous nested functions.",
                  "markdown": "Reports a function nested inside another function. Although JavaScript allows functions to be nested, such constructs may be confusing.\n\n\nUse the checkbox below to ignore anonymous nested functions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XHTMLIncompatabilitiesJS",
                "shortDescription": {
                  "text": "Incompatible XHTML usages"
                },
                "fullDescription": {
                  "text": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include document.body, document.images, document.applets, document.links, document.forms, and document.anchors.",
                  "markdown": "Reports common JavaScript DOM patterns which may present problems with XHTML documents. In particular, the patterns detected will behave completely differently depending on whether the document is loaded as XML or HTML. This can result in subtle bugs where script behaviour is dependent on the MIME-type of the document, rather than its content. Patterns detected include **document.body** , **document.images** , **document.applets** , **document.links** , **document.forms** , and **document.anchors**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XHTMLIncompatabilitiesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 65,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncrementDecrementResultUsedJS",
                "shortDescription": {
                  "text": "Result of increment or decrement used"
                },
                "fullDescription": {
                  "text": "Reports an increment ('++') or decrement ('--') expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: 'var a = b++'",
                  "markdown": "Reports an increment (`++`) or decrement (`--`) expression where the result of the assignment is used in a containing expression. Such assignments can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Example: `var a = b++`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncrementDecrementResultUsedJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SuspiciousTypeOfGuard",
                "shortDescription": {
                  "text": "Unsound type guard check"
                },
                "fullDescription": {
                  "text": "Reports a 'typeof' or 'instanceof' unsound type guard check. The 'typeof x' type guard can be unsound in one of the following two cases: 'typeof x' never corresponds to the specified value (for example, 'typeof x === 'number'' when 'x' is of the type 'string | boolean') 'typeof x' always corresponds to the specified value (for example, 'typeof x === 'string'' when 'x' is of the type 'string') The 'x instanceof A' type guard can be unsound in one of the following two cases: The type of 'x' is not related to 'A' The type of 'x' is 'A' or a subtype of 'A'",
                  "markdown": "Reports a `typeof` or `instanceof` unsound type guard check. The `typeof x` type guard can be unsound in one of the following two cases:\n\n* `typeof x` never corresponds to the specified value (for example, `typeof x === 'number'` when `x` is of the type 'string \\| boolean')\n* `typeof x` always corresponds to the specified value (for example, `typeof x === 'string'` when `x` is of the type 'string')\n\nThe `x instanceof A` type guard can be unsound in one of the following two cases:\n\n* The type of `x` is not related to `A`\n* The type of `x` is `A` or a subtype of `A`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SuspiciousTypeOfGuard",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptJSXUnresolvedComponent",
                "shortDescription": {
                  "text": "Unresolved JSX component"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name. The template for a new component can be modified in Editor | File and Code Templates.",
                  "markdown": "Reports an unresolved reference to a JSX component. Suggests adding an import statement if the referenced component is defined in the project or its dependencies or creating a new component with the specified name.\n\nThe template for a new component can be modified in Editor \\| File and Code Templates."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptJSXUnresolvedComponent",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptFieldCanBeMadeReadonly",
                "shortDescription": {
                  "text": "Field can be readonly"
                },
                "fullDescription": {
                  "text": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor).",
                  "markdown": "Reports a private field that can be made readonly (for example, if the field is assigned only in the constructor)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptFieldCanBeMadeReadonly",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6DestructuringVariablesMerge",
                "shortDescription": {
                  "text": "Destructuring properties with the same key"
                },
                "fullDescription": {
                  "text": "Reports multiple destructuring properties with identical keys. Suggests merging the properties.",
                  "markdown": "Reports multiple destructuring properties with identical keys. Suggests merging the properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6DestructuringVariablesMerge",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LoopStatementThatDoesntLoopJS",
                "shortDescription": {
                  "text": "Loop statement that doesn't loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for', 'while', or 'do' statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error.",
                  "markdown": "Reports a `for`, `while`, or `do` statement whose bodies are guaranteed to execute at most once. Normally, this indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LoopStatementThatDoesntLoopJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NegatedIfStatementJS",
                "shortDescription": {
                  "text": "Negated 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports if statements which have an else branch and a negated condition. Flipping the order of the if and else branches will usually increase the clarity of such statements.",
                  "markdown": "Reports **if** statements which have an **else** branch and a negated condition. Flipping the order of the **if** and **else** branches will usually increase the clarity of such statements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NegatedIfStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonASCIINames",
                "shortDescription": {
                  "text": "Identifiers with non-ASCII symbols"
                },
                "fullDescription": {
                  "text": "Reports a non-ASCII symbol in a name. If the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols. Otherwise reports all names that contain both ASCII and non-ASCII symbols.",
                  "markdown": "Reports a non-ASCII symbol in a name.  \n\nIf the 'Allow only ASCII names' option is selected, reports all names that contain non-ASCII symbols.  \nOtherwise reports all names that contain both ASCII and non-ASCII symbols."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSNonASCIINames",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 63,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptRedundantGenericType",
                "shortDescription": {
                  "text": "Redundant type arguments"
                },
                "fullDescription": {
                  "text": "Reports a type argument that is equal to the default one and can be removed. Example: 'type Foo<T=number> = T;\nlet z: Foo<number>;'",
                  "markdown": "Reports a type argument that is equal to the default one and can be removed.\n\n\nExample:\n\n\n    type Foo<T=number> = T;\n    let z: Foo<number>;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptRedundantGenericType",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUMDGlobal",
                "shortDescription": {
                  "text": "Referenced UMD global variable"
                },
                "fullDescription": {
                  "text": "Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly.",
                  "markdown": "Reports a usage of a Universal Module Definition (UMD) global variable if the current file is a module (ECMAScript or CommonJS). Referencing UMD variables without explicit imports can lead to a runtime error if the library isn't included implicitly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptUMDGlobal",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryReturnJS",
                "shortDescription": {
                  "text": "Unnecessary 'return' statement"
                },
                "fullDescription": {
                  "text": "Reports an unnecessary 'return' statement, that is, a 'return' statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed.",
                  "markdown": "Reports an unnecessary `return` statement, that is, a `return` statement that returns no value and occurs just before the function would have \"fallen through\" the bottom. These statements may be safely removed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryReturnStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConditionalExpressionWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "Conditional expression with identical branches"
                },
                "fullDescription": {
                  "text": "Reports a ternary conditional expression with identical 'then' and 'else' branches.",
                  "markdown": "Reports a ternary conditional expression with identical `then` and `else` branches."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConditionalExpressionWithIdenticalBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAnnotator",
                "shortDescription": {
                  "text": "ECMAScript specification is not followed"
                },
                "fullDescription": {
                  "text": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters. Generally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors.",
                  "markdown": "Reports basic syntax issues and inconsistencies with language specification, such as invalid usages of keywords, usages of incompatible numeric format, or multiple parameters to getters/setters.   \nGenerally, such errors must always be reported and shouldn't be disabled. But in some cases, such as issues due to the dynamic nature of JavaScript, the use of not yet supported language features, or bugs in IDE's checker, it may be handy to disable reporting these very basic errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JSAnnotator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnfilteredForInLoop",
                "shortDescription": {
                  "text": "Unfiltered for..in loop"
                },
                "fullDescription": {
                  "text": "Reports unfiltered 'for-in' loops. The use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when 'Object''s prototype may be incorrectly modified. For example, the following code will print 42 and myMethod: 'Object.prototype.myMethod = function myMethod() {};\nlet a = { foo: 42 };\nfor (let i in a) {\n  console.log(a[i]);\n}' Suggests replacing the whole loop with a 'Object.keys()' method or adding a 'hasOwnProperty()' check. After applying the quick-fix the code looks as follows: 'for (let i in a) {\n  if (a.hasOwnProperty(i)) {\n    console.log(a[i]);\n  }\n}'",
                  "markdown": "Reports unfiltered `for-in` loops.   \n\nThe use of this construct results in processing not only own properties of an object but properties from its prototype as well. It may be unexpected in some specific cases, for example, in utility methods that copy or modify all properties or when `Object`'s prototype may be incorrectly modified. For example, the following code will print **42** and **myMethod** :   \n\n\n    Object.prototype.myMethod = function myMethod() {};\n    let a = { foo: 42 };\n    for (let i in a) {\n      console.log(a[i]);\n    }\n\nSuggests replacing the whole loop with a `Object.keys()` method or adding a `hasOwnProperty()` check. After applying the quick-fix the code looks as follows:\n\n\n    for (let i in a) {\n      if (a.hasOwnProperty(i)) {\n        console.log(a[i]);\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnfilteredForInLoop",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIncompatibleTypesComparison",
                "shortDescription": {
                  "text": "Comparison of expressions having incompatible types"
                },
                "fullDescription": {
                  "text": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values.",
                  "markdown": "Reports a comparison with operands of incompatible types or an operand with a type without possible common values."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSIncompatibleTypesComparison",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSLastCommaInObjectLiteral",
                "shortDescription": {
                  "text": "Unneeded last comma in object literal"
                },
                "fullDescription": {
                  "text": "Reports usages of a trailing comma in object literals. The warning is reported only when the JavaScript language version is set to ECMAScript 5.1. Trailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used. You can configure formatting options for trailing commas in Code Style | JavaScript or TypeScript | Punctuation.",
                  "markdown": "Reports usages of a trailing comma in object literals.\n\nThe warning is reported only when the JavaScript language version is set to ECMAScript 5.1.\n\nTrailing commas in object literals are allowed by the specification, however, some browsers might throw an error when a trailing comma is used.\n\nYou can configure formatting options for trailing commas in **Code Style** \\| **JavaScript** or **TypeScript** \\| **Punctuation**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSLastCommaInObjectLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSFunctionExpressionToArrowFunction",
                "shortDescription": {
                  "text": "Function expression is used instead of arrow function"
                },
                "fullDescription": {
                  "text": "Reports a function expression. Suggests converting it to an arrow function. Example: 'arr.map(function(el) {return el + 1})' After applying the quick-fix the code looks as follows: 'arr.map(el => el + 1)'",
                  "markdown": "Reports a [function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/function) expression. Suggests converting it to an [arrow function](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions).\n\nExample:\n\n    arr.map(function(el) {return el + 1})\n\nAfter applying the quick-fix the code looks as follows:\n\n    arr.map(el => el + 1)\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSFunctionExpressionToArrowFunction",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6TopLevelAwaitExpression",
                "shortDescription": {
                  "text": "Top-level 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a usage of a top-level 'await' expression. While the new 'top-level async' proposal is on its way, using 'await' outside async functions is not allowed.",
                  "markdown": "Reports a usage of a top-level `await` expression. While the new 'top-level async' proposal is on its way, using `await` outside async functions is not allowed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ES6TopLevelAwaitExpression",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 66,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6MissingAwait",
                "shortDescription": {
                  "text": "Missing await for an async function call"
                },
                "fullDescription": {
                  "text": "Reports an 'async' function call without an expected 'await' prefix inside an 'async' function. Such call returns a 'Promise' and control flow is continued immediately. Example: 'async function bar() { /* ... */ }\nasync function foo() {\n    bar(); // bad\n}' After the quick-fix is applied, the 'await' prefix is added: 'async function bar() { /* ... */ }\nasync function foo() {\n    await bar(); // good\n}' When the 'Report for promises in return statements' checkbox is selected, also suggests adding 'await' in return statements. While this is generally not necessary, it gives two main benefits. You won't forget to add 'await' when surrounding your code with 'try-catch'. An explicit 'await' helps V8 runtime to provide async stack traces.",
                  "markdown": "Reports an `async` function call without an expected `await` prefix inside an `async` function. Such call returns a `Promise` and control flow is continued immediately.\n\nExample:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        bar(); // bad\n    }\n\n\nAfter the quick-fix is applied, the `await` prefix is added:\n\n\n    async function bar() { /* ... */ }\n    async function foo() {\n        await bar(); // good\n    }\n\nWhen the 'Report for promises in return statements' checkbox is selected, also suggests adding `await` in return statements.  \nWhile this is generally not necessary, it gives two main benefits.  \n\n* You won't forget to add `await` when surrounding your code with `try-catch`.\n* An explicit `await` helps V8 runtime to provide [async stack traces](https://bit.ly/v8-zero-cost-async-stack-traces)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6MissingAwait",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 66,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TailRecursionJS",
                "shortDescription": {
                  "text": "Tail recursion"
                },
                "fullDescription": {
                  "text": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments.",
                  "markdown": "Reports a tail recursion, that is, when a function calls itself as its last action before returning. A tail recursion can always be replaced by looping, which will be considerably faster. Some JavaScript engines perform this optimization, while others do not. Thus, tail recursive solutions may have considerably different performance characteristics in different environments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TailRecursionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6ConvertToForOf",
                "shortDescription": {
                  "text": "'for..in' is used instead of 'for..of'"
                },
                "fullDescription": {
                  "text": "Reports a usage of a 'for..in' loop on an array. Suggests replacing it with a 'for..of' loop. 'for..of' loops, which are introduced in ECMAScript 6, iterate over 'iterable' objects. For arrays, this structure is preferable to 'for..in', because it works only with array values but not with array object's properties.",
                  "markdown": "Reports a usage of a [for..in](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in) loop on an array. Suggests replacing it with a [for..of](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...of) loop.   \n`for..of` loops, which are introduced in ECMAScript 6, iterate over `iterable` objects. For arrays, this structure is preferable to `for..in`, because it works only with array values but not with array object's properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6ConvertToForOf",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/ES2015 migration aids",
                      "index": 30,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParameterNamingConventionJS",
                "shortDescription": {
                  "text": "Function parameter naming convention"
                },
                "fullDescription": {
                  "text": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length and regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions.",
                  "markdown": "Reports a function parameter whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length and regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ParameterNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 63,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUndefinedPropertyAssignment",
                "shortDescription": {
                  "text": "Undefined property assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a property that is not defined in the type of a variable. Example: '/**\n * @type {{ property1: string, property2: number }}\n */\nlet myVariable = create();\n\nmyVariable.newProperty = 3; // bad'",
                  "markdown": "Reports an assignment to a property that is not defined in the type of a variable.\n\nExample:\n\n\n    /**\n     * @type {{ property1: string, property2: number }}\n     */\n    let myVariable = create();\n\n    myVariable.newProperty = 3; // bad\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUndefinedPropertyAssignment",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StandardJS",
                "shortDescription": {
                  "text": "Standard code style"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the JavaScript Standard Style linter. The highlighting severity in the editor is based on the severity level the linter reports.",
                  "markdown": "Reports a discrepancy detected by the [JavaScript Standard Style](https://standardjs.com/) linter.   \n\nThe highlighting severity in the editor is based on the severity level the linter reports."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "StandardJS",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 67,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ParametersPerFunctionJS",
                "shortDescription": {
                  "text": "Function with too many parameters"
                },
                "fullDescription": {
                  "text": "Reports a function with too many parameters. Such functions often indicate problems with design. Use the field below to specify the maximum acceptable number of parameters for a function.",
                  "markdown": "Reports a function with too many parameters. Such functions often indicate problems with design.\n\n\nUse the field below to specify the maximum acceptable number of parameters for a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 43,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThisExpressionReferencesGlobalObjectJS",
                "shortDescription": {
                  "text": "'this' expression which references the global object"
                },
                "fullDescription": {
                  "text": "Reports a 'this' expression outside an object literal or a constructor body. Such 'this' expressions reference the top-level \"global\" JavaScript object, but are mostly useless.",
                  "markdown": "Reports a `this` expression outside an object literal or a constructor body. Such `this` expressions reference the top-level \"global\" JavaScript object, but are mostly useless."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ThisExpressionReferencesGlobalObjectJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedAssignmentJS",
                "shortDescription": {
                  "text": "Nested assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression nested inside another expression, for example, 'a = b = 1'. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing.",
                  "markdown": "Reports an assignment expression nested inside another expression, for example, `a = b = 1`. Such expressions may be confusing and violate the general design principle that a given construct should do precisely one thing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedAssignmentJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DefaultNotLastCaseInSwitchJS",
                "shortDescription": {
                  "text": "'default' not last case in 'switch'"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where the 'default' case comes before another case instead of being the very last case, which may cause confusion.",
                  "markdown": "Reports a `switch` statement where the `default` case comes before another case instead of being the very last case, which may cause confusion."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DefaultNotLastCaseInSwitchJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConfusingPlusesOrMinusesJS",
                "shortDescription": {
                  "text": "Confusing sequence of '+' or '-'"
                },
                "fullDescription": {
                  "text": "Reports a suspicious combination of '+' or '-' characters in JavaScript code (for example, 'a+++b'. Such sequences are confusing, and their semantics may change through changes in the whitespace.",
                  "markdown": "Reports a suspicious combination of `+` or `-` characters in JavaScript code (for example, `a+++b`. Such sequences are confusing, and their semantics may change through changes in the whitespace."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConfusingPlusesOrMinusesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDeprecatedSymbols",
                "shortDescription": {
                  "text": "Deprecated symbol used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a deprecated function variable.",
                  "markdown": "Reports a usage of a deprecated function variable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSDeprecatedSymbols",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LocalVariableNamingConventionJS",
                "shortDescription": {
                  "text": "Local variable naming convention"
                },
                "fullDescription": {
                  "text": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern. Use the fields provided below to specify minimum length, maximum length, and a regular expression expected for local variables names. Use the standard 'java.util.regex' format regular expressions.",
                  "markdown": "Reports a local variable whose name is too short, too long, or doesn't follow the specified regular expression pattern.\n\n\nUse the fields provided below to specify minimum length, maximum length, and a regular expression\nexpected for local variables names. Use the standard `java.util.regex` format regular expressions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LocalVariableNamingConventionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Naming conventions",
                      "index": 63,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyFinallyBlockJS",
                "shortDescription": {
                  "text": "Empty 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports an empty 'finally' block, which usually indicates an error.",
                  "markdown": "Reports an empty `finally` block, which usually indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCommentMatchesSignature",
                "shortDescription": {
                  "text": "Mismatched JSDoc and function signature"
                },
                "fullDescription": {
                  "text": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment. Example: '/**\n * @param height Height in pixels\n */\nfunction sq(height, width) {} // width is not documented' After the quick-fix is applied: '/**\n * @param height Height in pixels\n * @param width\n */\nfunction sq(height, width) {}'",
                  "markdown": "Reports mismatch between the names and the number of parameters within a JSDoc comment and the actual parameters of a function. Suggests updating parameters in JSDoc comment.\n\n**Example:**\n\n\n    /**\n     * @param height Height in pixels\n     */\n    function sq(height, width) {} // width is not documented\n\nAfter the quick-fix is applied:\n\n\n    /**\n     * @param height Height in pixels\n     * @param width\n     */\n    function sq(height, width) {}\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSCommentMatchesSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UpdateDependencyToLatestVersion",
                "shortDescription": {
                  "text": "Update package.json dependencies to latest versions"
                },
                "fullDescription": {
                  "text": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions.",
                  "markdown": "Suggests to upgrade your package.json dependencies to the latest versions, ignoring specified versions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "UpdateDependencyToLatestVersion",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 58,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptConfig",
                "shortDescription": {
                  "text": "Inconsistent tsconfig.json properties"
                },
                "fullDescription": {
                  "text": "Reports inconsistency of a 'paths', 'checkJs', or 'extends' property in a tsconfig.json file. The 'checkJs' property requires 'allowJs'. The 'extends' property should be a valid file reference.",
                  "markdown": "Reports inconsistency of a `paths`, `checkJs`, or `extends` property in a tsconfig.json file.   \nThe `checkJs` property requires `allowJs`.   \nThe `extends` property should be a valid file reference."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptConfig",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousNameCombination",
                "shortDescription": {
                  "text": "Suspicious variable/parameter name combination"
                },
                "fullDescription": {
                  "text": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it. Example: 'var x = 0;\n  var y = x;' or 'var x = 0, y = 0;\n  var rc = new Rectangle(y, x, 20, 20);' Here the inspection guesses that 'x' and 'y' are mixed up. Specify the names that should not be used together. An error is reported if a parameter name or an assignment target name contains words from one group while the name of the assigned or passed variable contains words from another group.",
                  "markdown": "Reports an assignment or a function call where the name of the target variable or the function parameter does not match the name of the value assigned to it.\n\nExample:\n\n\n      var x = 0;\n      var y = x;\n\nor\n\n\n      var x = 0, y = 0;\n      var rc = new Rectangle(y, x, 20, 20);\n\nHere the inspection guesses that `x` and `y` are mixed up.\n\nSpecify the names that should not be used together. An error is reported\nif a parameter name or an assignment target name contains words from one group while the name of the assigned or passed\nvariable contains words from another group."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSuspiciousNameCombination",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedExtXType",
                "shortDescription": {
                  "text": "Unresolved Ext JS xtype"
                },
                "fullDescription": {
                  "text": "Reports an Ext JS 'xtype' reference that doesn't have a corresponding class.",
                  "markdown": "Reports an Ext JS `xtype` reference that doesn't have a corresponding class."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedExtXType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopThatDoesntUseLoopVariableJS",
                "shortDescription": {
                  "text": "'for' loop where update or condition does not use loop variable"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop where the condition or update does not use the 'for' loop variable.",
                  "markdown": "Reports a `for` loop where the condition or update does not use the `for` loop variable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForLoopThatDoesntUseLoopVariableJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
                "shortDescription": {
                  "text": "Abstract class constructor can be made protected"
                },
                "fullDescription": {
                  "text": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public).",
                  "markdown": "Reports a public constructor of an abstract class and suggests making it protected (because it is useless to have it public)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptAbstractClassConstructorCanBeMadeProtected",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FunctionWithMultipleReturnPointsJS",
                "shortDescription": {
                  "text": "Function with multiple return points"
                },
                "fullDescription": {
                  "text": "Reports a function with multiple return points. Such functions are hard to understand and maintain.",
                  "markdown": "Reports a function with multiple return points. Such functions are hard to understand and maintain."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMultipleReturnPointsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 43,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSIgnoredPromiseFromCall",
                "shortDescription": {
                  "text": "Result of method call returning a promise is ignored"
                },
                "fullDescription": {
                  "text": "Reports a function call that returns a 'Promise' that is not used later. Such calls are usually unintended and indicate an error.",
                  "markdown": "Reports a function call that returns a `Promise` that is not used later. Such calls are usually unintended and indicate an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSIgnoredPromiseFromCall",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 66,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ThreeNegationsPerFunctionJS",
                "shortDescription": {
                  "text": "Function with more than three negations"
                },
                "fullDescription": {
                  "text": "Reports a function with three or more negation operations ('!' or '!='). Such functions may be unnecessarily confusing.",
                  "markdown": "Reports a function with three or more negation operations (`!` or `!=`). Such functions may be unnecessarily confusing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FunctionWithMoreThanThreeNegationsJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 43,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSRemoveUnnecessaryParentheses",
                "shortDescription": {
                  "text": "Unnecessary parentheses"
                },
                "fullDescription": {
                  "text": "Reports redundant parentheses. In expressions: 'var x = ((1) + 2) + 3' In arrow function argument lists: 'var incrementer = (x) => x + 1' In TypeScript and Flow type declarations: 'type Card = (Suit & Rank) | (Suit & Number)'",
                  "markdown": "Reports redundant parentheses.\n\nIn expressions:\n\n    var x = ((1) + 2) + 3\n\nIn arrow function argument lists:\n\n    var incrementer = (x) => x + 1\n\nIn TypeScript and Flow type declarations:\n\n    type Card = (Suit & Rank) | (Suit & Number)\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSRemoveUnnecessaryParentheses",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexBooleanExpressionJS",
                "shortDescription": {
                  "text": "Overly complex boolean expression"
                },
                "fullDescription": {
                  "text": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression.",
                  "markdown": "Reports a boolean expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexBooleanExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OverlyComplexArithmeticExpressionJS",
                "shortDescription": {
                  "text": "Overly complex arithmetic expression"
                },
                "fullDescription": {
                  "text": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone. Use the field below to specify the maximum number of terms allowed in an arithmetic expression.",
                  "markdown": "Reports an arithmetic expression with too many terms. Such expressions may be confusing and bug-prone.\n\n\nUse the field below to specify the maximum number of terms allowed in an arithmetic expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyComplexArithmeticExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantNestingInTemplateLiteral",
                "shortDescription": {
                  "text": "Redundant nesting in template literal"
                },
                "fullDescription": {
                  "text": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string. Example: 'let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`' After applying the quick-fix the code looks as follows: 'let a = `Hello, Brave New World!`'",
                  "markdown": "Reports nested instances of a string or a template literal. Suggests inlining the nested instances into the containing template string.\n\nExample:\n\n\n    let a = `Hello, ${`Brave ${\"New\"}`} ${\"World\"}!`\n\nAfter applying the quick-fix the code looks as follows:\n\n\n    let a = `Hello, Brave New World!`\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6RedundantNestingInTemplateLiteral",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "StringLiteralBreaksHTMLJS",
                "shortDescription": {
                  "text": "String literal which breaks HTML parsing"
                },
                "fullDescription": {
                  "text": "Reports a string literal that contains a '</' sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded.",
                  "markdown": "Reports a string literal that contains a `</` sequence. Such strings may result in incorrect parsing of any HTML in which the JavaScript code is embedded."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StringLiteralBreaksHTMLJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Validity issues",
                      "index": 35,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestingDepthJS",
                "shortDescription": {
                  "text": "Overly nested function"
                },
                "fullDescription": {
                  "text": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary. Use the field provided below to specify the maximum acceptable nesting depth allowed in a function.",
                  "markdown": "Reports a function whose body contains statements that are too deeply nested within other statements. Such functions may be confusing and indicate that refactoring may be necessary.\n\n\nUse the field provided below to specify the maximum acceptable nesting depth allowed in a function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OverlyNestedFunctionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Function metrics",
                      "index": 43,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptSuspiciousConstructorParameterAssignment",
                "shortDescription": {
                  "text": "Assigned constructor field parameter"
                },
                "fullDescription": {
                  "text": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned. In this case, the corresponding field won't be assigned, only the local parameter value is modified. 'class Foo {\n  constructor(private p: number) {\n    p = 1; //must be this.p = 1;\n  }\n}'",
                  "markdown": "Reports a common mistake in TypeScript code, when a class field is declared as a constructor parameter, and then this parameter is assigned.  \nIn this case, the corresponding field *won't* be assigned, only the local parameter value is modified.\n\n\n    class Foo {\n      constructor(private p: number) {\n        p = 1; //must be this.p = 1;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptSuspiciousConstructorParameterAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ChainedFunctionCallJS",
                "shortDescription": {
                  "text": "Chained function call"
                },
                "fullDescription": {
                  "text": "Reports a function call whose target is another function call, for example, 'foo().bar()'",
                  "markdown": "Reports a function call whose target is another function call, for example, `foo().bar()`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ChainedFunctionCallJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateConditionJS",
                "shortDescription": {
                  "text": "Duplicate condition in 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports duplicate conditions in different branches of an 'if' statement. Duplicate conditions usually represent programmer oversight. Example: 'if (a) {\n    ...\n  } else if (a) {\n    ...\n  }'",
                  "markdown": "Reports duplicate conditions in different branches of an `if` statement. Duplicate conditions usually represent programmer oversight.\n\nExample:\n\n\n      if (a) {\n        ...\n      } else if (a) {\n        ...\n      }\n\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicateConditionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedFunctionCallJS",
                "shortDescription": {
                  "text": "Nested function call"
                },
                "fullDescription": {
                  "text": "Reports a function call that is used as an argument in another function call, for example, 'foo(bar())'",
                  "markdown": "Reports a function call that is used as an argument in another function call, for example, `foo(bar())`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedFunctionCallJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialIfJS",
                "shortDescription": {
                  "text": "Redundant 'if' statement"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement that can be simplified to a single assignment or a 'return' statement. Example: 'if(foo())\n {\n  return true;\n }\n else\n {\n   return false;\n }' After applying the quick-fix the code looks as follows:  'return foo();'",
                  "markdown": "Reports an `if` statement that can be simplified to a single assignment or a `return` statement.\n\nExample:\n\n\n    if(foo())\n     {\n      return true;\n     }\n     else\n     {\n       return false;\n     }\n\nAfter applying the quick-fix the code looks as follows:\n\n     return foo();\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantIfStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSEqualityComparisonWithCoercion",
                "shortDescription": {
                  "text": "Equality operator may cause type coercion"
                },
                "fullDescription": {
                  "text": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing '==' and '!=' with type-safe equality operators '===' and '!=='. Depending on the option selected, one of the following cases will be reported: All usages of '==' and '!=' operators. All usages except comparison with null. Some code styles allow using 'x == null' as a replacement for 'x === null || x === undefined'. Only suspicious expressions, such as: '==' or '!=' comparisons with '0', '''', 'null', 'true', 'false', or 'undefined'.",
                  "markdown": "Reports a usage of an equality operator that may cause unexpected type coercions. Suggests replacing `==` and `!=` with type-safe equality operators `===` and `!==`.\n\nDepending on the option selected, one of the following cases will be reported:\n\n* All usages of `==` and `!=` operators.\n* All usages except comparison with null. Some code styles allow using `x == null` as a replacement for `x === null || x === undefined`.\n* Only suspicious expressions, such as: `==` or `!=` comparisons with `0`, `''`, `null`, `true`, `false`, or `undefined`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EqualityComparisonWithCoercionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommaExpressionJS",
                "shortDescription": {
                  "text": "Comma expression"
                },
                "fullDescription": {
                  "text": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of 'for' loops are ignored.",
                  "markdown": "Reports a comma expression. Such expressions are often a sign of overly clever code, and may lead to subtle bugs. Comma expressions in the initializer or in the update section of `for` loops are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CommaExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 20,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnLHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on left side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons.",
                  "markdown": "Reports a comparison operation with a constant value in the left-hand side. According to coding conventions, constants should be in the right-hand side of comparisons."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantOnLefSideOfComparisonJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSCheckFunctionSignatures",
                "shortDescription": {
                  "text": "Signature mismatch"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types. TypeScript code is ignored.",
                  "markdown": "Reports a JavaScript call expression where the arguments do not match the signature of the referenced function, including the types of arguments and their number. Also, reports if the overloading function doesn't match the overloaded one in terms of parameters and return types.\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSCheckFunctionSignatures",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentResultUsedJS",
                "shortDescription": {
                  "text": "Result of assignment used"
                },
                "fullDescription": {
                  "text": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, '=' instead of '=='. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways. Expressions in parentheses are ignored.",
                  "markdown": "Reports an assignment expression where the result of the assignment is used in the containing expression. Such assignments often indicate coding errors, for example, `=` instead of `==`. Moreover, they can result in confusion due to the order of operations, as evaluation of the assignment may affect the outer expression in unexpected ways.\n\nExpressions in parentheses are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentResultUsedJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6BindWithArrowFunction",
                "shortDescription": {
                  "text": "Suspicious usage of 'bind' with arrow function"
                },
                "fullDescription": {
                  "text": "Reports 'bind' used together with an arrow function. Because arrow functions use lexical 'this', a 'bind' call will have no effect on them. See here for details.",
                  "markdown": "Reports `bind` used together with an arrow function.  \nBecause arrow functions use lexical `this`, a `bind` call will have no effect on them.  \nSee [here](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Functions/Arrow_functions#Lexical_this) for details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6BindWithArrowFunction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ConstantOnRHSOfComparisonJS",
                "shortDescription": {
                  "text": "Constant on right side of comparison"
                },
                "fullDescription": {
                  "text": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons.",
                  "markdown": "Reports a comparison operation with a constant in the right-hand side. According to coding conventions, constants should only be in the left-hand side of comparisons."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ConstantOnRightSideOfComparisonJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSComparisonWithNaN",
                "shortDescription": {
                  "text": "Comparison with NaN"
                },
                "fullDescription": {
                  "text": "Reports a comparison with NaN. Comparisons like 'expr == NaN' or 'expr === NaN' are always evaluated to 'false'.",
                  "markdown": "Reports a comparison with NaN. Comparisons like `expr == NaN` or `expr === NaN` are always evaluated to `false`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSComparisonWithNaN",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnnecessarySemicolon",
                "shortDescription": {
                  "text": "Unnecessary semicolon"
                },
                "fullDescription": {
                  "text": "Reports an unneeded semicolon.",
                  "markdown": "Reports an unneeded semicolon."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnnecessarySemicolon",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnnecessaryLabelJS",
                "shortDescription": {
                  "text": "Unnecessary label"
                },
                "fullDescription": {
                  "text": "Reports an unused label.",
                  "markdown": "Reports an unused label."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnnecessaryLabelJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSBitwiseOperatorUsage",
                "shortDescription": {
                  "text": "Bitwise operator usage"
                },
                "fullDescription": {
                  "text": "Reports a suspicious usage of a bitwise AND (\"'&'\") or OR (\"'|'\") operator. Usually it is a typo and the result of applying boolean operations AND (\"'&&'\") and OR (\"'||'\") is expected.",
                  "markdown": "Reports a suspicious usage of a bitwise AND (\"`&`\") or OR (\"`|`\") operator. Usually it is a typo and the result of applying boolean operations AND (\"`&&`\") and OR (\"`||`\") is expected."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSBitwiseOperatorUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Bitwise operation issues",
                      "index": 29,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved TypeScript reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference in TypeScript code.",
                  "markdown": "Reports an unresolved reference in TypeScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "TypeScriptUnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference in JavaScript code.",
                  "markdown": "Reports an unresolved reference in JavaScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSUnresolvedReference",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSNonStrictModeUsed",
                "shortDescription": {
                  "text": "Non-strict mode used"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript file that is not in the 'strict' mode.",
                  "markdown": "Reports a JavaScript file that is not in the `strict` mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSNonStrictModeUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6RedundantAwait",
                "shortDescription": {
                  "text": "Redundant 'await' expression"
                },
                "fullDescription": {
                  "text": "Reports a redundant usage of 'await', such as 'await await', or awaiting a non-promise result. When the 'Report for promises' option is selected, suggests removing 'await' before promises when applicable (in 'return' statements, and with 'Promise.resolve/reject'). Removing 'await' in such contexts causes two problems. Surrounding your code with 'try-catch' and forgetting to add 'await' will change code semantics while you may fail to notice that. Having an explicit 'await' may prevent the V8 runtime from providing async stack traces.",
                  "markdown": "Reports a redundant usage of `await`, such as `await await`, or awaiting a non-promise result.\n\n\nWhen the 'Report for promises' option is selected, suggests removing `await` before promises when applicable\n(in `return` statements, and with `Promise.resolve/reject`).\n\nRemoving `await` in such contexts causes two problems.\n\n* Surrounding your code with `try-catch` and forgetting to add `await` will change code semantics while you may fail to notice that.\n* Having an explicit `await` may prevent the V8 runtime from providing [async stack traces](http://bit.ly/v8-zero-cost-async-stack-traces)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ES6RedundantAwait",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Async code and promises",
                      "index": 66,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NestedSwitchStatementJS",
                "shortDescription": {
                  "text": "Nested 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement that is nested in another 'switch' statement. Nested 'switch' statements may be very confusing, particularly if indenting is inconsistent.",
                  "markdown": "Reports a `switch` statement that is nested in another `switch` statement. Nested `switch` statements may be very confusing, particularly if indenting is inconsistent."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NestedSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnterminatedStatementJS",
                "shortDescription": {
                  "text": "Unterminated statement"
                },
                "fullDescription": {
                  "text": "Reports a statement without a semicolon or a newline at the end. Select the 'Terminate statements with semicolons' option in Editor | Code Style | JavaScript or TypeScript - Punctuation to report any statement that doesn't end with a semicolon, even if a newline is used. According to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages.",
                  "markdown": "Reports a statement without a semicolon or a newline at the end.\n\nSelect the 'Terminate statements with semicolons' option in *Editor \\| Code Style \\| JavaScript or TypeScript - Punctuation* to report any statement that doesn't end with a semicolon, even if a newline is used.\nAccording to some coding styles, semicolons are preferred to line-breaks for consistency with the other languages."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnterminatedStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code style issues",
                      "index": 18,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PlatformDetectionJS",
                "shortDescription": {
                  "text": "Inaccurate platform detection"
                },
                "fullDescription": {
                  "text": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform. Patterns detected include: 'document.all' 'document.layers' 'navigator.userAgent' 'navigator.oscpu' 'navigator.appName' 'navigator.appCodeName' 'navigator.platform'",
                  "markdown": "Reports a common JavaScript pattern for detecting the browser or operating system in which the script is run. In addition to pointing out non-portable constructs, these platform detection patterns are often incomplete and easily fooled. For most cases, detection of individual environment features is preferable to attempting to detect the entire platform.\n\nPatterns detected include:\n\n* `document.all`\n* `document.layers`\n* `navigator.userAgent`\n* `navigator.oscpu`\n* `navigator.appName`\n* `navigator.appCodeName`\n* `navigator.platform`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PlatformDetectionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 65,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IfStatementWithIdenticalBranchesJS",
                "shortDescription": {
                  "text": "'if' statement with identical branches"
                },
                "fullDescription": {
                  "text": "Reports an 'if' statement with identical 'then' and 'else' branches. Such statements are almost certainly an error.",
                  "markdown": "Reports an `if` statement with identical `then` and `else` branches. Such statements are almost certainly an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IfStatementWithIdenticalBranchesJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AssignmentToFunctionParameterJS",
                "shortDescription": {
                  "text": "Assignment to function parameter"
                },
                "fullDescription": {
                  "text": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error.",
                  "markdown": "Reports an assignment to a function parameter, including increment and decrement operations. Although occasionally intended, this construct can be extremely confusing, and is often a result of an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AssignmentToFunctionParameterJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSConsecutiveCommasInArrayLiteral",
                "shortDescription": {
                  "text": "Consecutive commas in array literal"
                },
                "fullDescription": {
                  "text": "Reports a consecutive comma in an array literal. The skipped element accepts the 'undefined' value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one.",
                  "markdown": "Reports a consecutive comma in an array literal. The skipped element accepts the `undefined` value, but it could be done unintentionally, for example, when commas are at the end of one line and at the beginning of the next one."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSConsecutiveCommasInArrayLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "FallThroughInSwitchStatementJS",
                "shortDescription": {
                  "text": "Fallthrough in 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing 'break' or 'return'.",
                  "markdown": "Reports a `switch` statement where control can proceed from a branch to the next one. Such \"fall-through\" often indicates an error, for example, a missing `break` or `return`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "FallThroughInSwitchStatementJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CallerJS",
                "shortDescription": {
                  "text": "Use of 'caller' property"
                },
                "fullDescription": {
                  "text": "Reports a usage of the 'caller' property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs.",
                  "markdown": "Reports a usage of the `caller` property in a JavaScript function. Using this property to access the stack frame of the calling method can be extremely confusing and result in subtle bugs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CallerJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptExplicitMemberType",
                "shortDescription": {
                  "text": "Explicit types"
                },
                "fullDescription": {
                  "text": "Reports a type annotation that doesn't match the current code style for explicit types. Type declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example: 'var pi: number = 3.14' In some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit.",
                  "markdown": "Reports a type annotation that doesn't match the current code style for explicit types.\n\n\nType declarations are not necessary when the type that is inferred from the context exactly matches the type annotation, for example:\n\n\n        var pi: number = 3.14\n\nIn some cases it is preferable to always have explicit types - this prevents accidental type changes and makes code more explicit."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "TypeScriptExplicitMemberType",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSDuplicateCaseLabel",
                "shortDescription": {
                  "text": "Duplicate 'case' label"
                },
                "fullDescription": {
                  "text": "Reports a duplicated 'case' label on a 'switch' statement, which normally indicates an error.",
                  "markdown": "Reports a duplicated `case` label on a `switch` statement, which normally indicates an error."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSDuplicateCaseLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnreachableSwitchBranches",
                "shortDescription": {
                  "text": "Unreachable 'case' branch of a 'switch' statement"
                },
                "fullDescription": {
                  "text": "Reports an unreachable 'case' branch of a 'switch' statement. Example: '/**\n * @param {('foo' | 'bar')} p\n */\nfunction foo(p) {\n    switch (p) {\n        case 'foo': break;\n        case 'bar': break;\n        case 'baz': break; // unreachable\n    }\n}'",
                  "markdown": "Reports an unreachable `case` branch of a `switch` statement.\n\nExample:\n\n\n    /**\n     * @param {('foo' | 'bar')} p\n     */\n    function foo(p) {\n        switch (p) {\n            case 'foo': break;\n            case 'bar': break;\n            case 'baz': break; // unreachable\n        }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnreachableSwitchBranches",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TypeScriptDuplicateUnionOrIntersectionType",
                "shortDescription": {
                  "text": "Duplicate union or intersection type component"
                },
                "fullDescription": {
                  "text": "Reports a duplicate type inside a union or intersection.",
                  "markdown": "Reports a duplicate type inside a union or intersection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TypeScriptDuplicateUnionOrIntersectionType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/TypeScript",
                      "index": 34,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TrivialConditionalJS",
                "shortDescription": {
                  "text": "Redundant conditional expression"
                },
                "fullDescription": {
                  "text": "Reports a conditional expression of the form 'condition ? true : false\ncondition ? false : true' These expressions may be safely converted to 'condition\n!condition'",
                  "markdown": "Reports a conditional expression of the form\n\n\n    condition ? true : false\n    condition ? false : true\n\n\nThese expressions may be safely converted to\n\n\n    condition\n    !condition\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantConditionalExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InnerHTMLJS",
                "shortDescription": {
                  "text": "Use of 'innerHTML' property"
                },
                "fullDescription": {
                  "text": "Reports a JavaScript access to DOM nodes as text using the 'innerHTML' property. Most usages of 'innerHTML' are performed better with explicit DOM calls, such as 'getElementByID()' and 'createElement()'. Additionally, 'innerHTML' will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs.",
                  "markdown": "Reports a JavaScript access to DOM nodes as text using the `innerHTML` property. Most usages of `innerHTML` are performed better with explicit DOM calls, such as `getElementByID()` and `createElement()`. Additionally, `innerHTML` will not work with XML DOMs, including DOMs for XHTML if viewed as XML. This can lead to difficulties in diagnosing bugs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InnerHTMLJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/DOM issues",
                      "index": 65,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSMissingSwitchBranches",
                "shortDescription": {
                  "text": "'switch' statement has missing branches"
                },
                "fullDescription": {
                  "text": "Reports a 'switch' statement on a variable of the type 'enum' or 'union' when the statement doesn't cover some value options from the type.",
                  "markdown": "Reports a `switch` statement on a variable of the type `enum` or `union` when the statement doesn't cover some value options from the type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSMissingSwitchBranches",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ES6UnusedImports",
                "shortDescription": {
                  "text": "Unused import"
                },
                "fullDescription": {
                  "text": "Reports a redundant 'import' statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import 'import 'packageName'' instead of the regular one.",
                  "markdown": "Reports a redundant `import` statement. This is usually the case if the imported symbols are not used in the source file. To avoid side-effects, consider using bare import `import 'packageName'` instead of the regular one."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ES6UnusedImports",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Imports and dependencies",
                      "index": 58,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSwitchVariableDeclarationIssue",
                "shortDescription": {
                  "text": "Variable is declared and being used in different 'case' clauses"
                },
                "fullDescription": {
                  "text": "Reports a variable that is declared in one 'case' clause of a 'switch' statement but is used in another 'case' clause of the same statement. For block-scoped variables, this results in throwing a 'ReferenceError'. For 'var' variables, it indicates a potential error. Disable the inspection for 'var' variables if this pattern is used intentionally.",
                  "markdown": "Reports a variable that is declared in one `case` clause of a `switch` statement but is used in another `case` clause of the same statement. For block-scoped variables, this results in throwing a `ReferenceError`. For `var` variables, it indicates a potential error.\n\nDisable the inspection for `var` variables if this pattern is used intentionally."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSwitchVariableDeclarationIssue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Switch statement issues",
                      "index": 64,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VoidExpressionJS",
                "shortDescription": {
                  "text": "'void' expression"
                },
                "fullDescription": {
                  "text": "Reports a 'void' expression.",
                  "markdown": "Reports a `void` expression."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VoidExpressionJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially undesirable code constructs",
                      "index": 20,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSJQueryEfficiency",
                "shortDescription": {
                  "text": "JQuery selector can be optimized"
                },
                "fullDescription": {
                  "text": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional).",
                  "markdown": "Reports a duplicated jQuery selector that can be cached or a usage of an attribute or a pseudo-selector (optional)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSJQueryEfficiency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSAssignmentUsedAsCondition",
                "shortDescription": {
                  "text": "Assignment used as condition"
                },
                "fullDescription": {
                  "text": "Reports an assignment that is used as the condition of an 'if', 'while', 'for', or 'do' statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, '=' instead of '==').",
                  "markdown": "Reports an assignment that is used as the condition of an `if`, `while`, `for`, or `do` statement. Although occasionally intended, this usage is confusing, and often indicates a typo (for example, `=` instead of `==`)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSAssignmentUsedAsCondition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Assignment issues",
                      "index": 48,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnreachableCodeJS",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code that can never be executed, which almost certainly indicates an error",
                  "markdown": "Reports code that can never be executed, which almost certainly indicates an error"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnreachableCodeJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ForLoopReplaceableByWhileJS",
                "shortDescription": {
                  "text": "'for' loop may be replaced by 'while' loop"
                },
                "fullDescription": {
                  "text": "Reports a 'for' loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler 'while' statement. Example: 'for(; exitCondition(); ) {\n    process();\n  }' After the quick-fix is applied the result looks like: 'while(exitCondition()) {\n    process();\n  }' Use the checkbox below if you wish this inspection to ignore for loops with trivial or non-existent conditions.",
                  "markdown": "Reports a `for` loop that contains neither initialization nor an update component. Suggests replacing the loop with a simpler `while` statement.\n\nExample:\n\n\n      for(; exitCondition(); ) {\n        process();\n      }\n\nAfter the quick-fix is applied the result looks like:\n\n\n      while(exitCondition()) {\n        process();\n      }\n\nUse the checkbox below if you wish this inspection to ignore **for** loops with trivial or non-existent conditions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ForLoopReplaceableByWhile",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Control flow issues",
                      "index": 1,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSSuspiciousEqPlus",
                "shortDescription": {
                  "text": "Suspicious '=+' assignment"
                },
                "fullDescription": {
                  "text": "Reports an assignment in the form 'a =+ b'. Suggests replacing with 'a += b'.",
                  "markdown": "Reports an assignment in the form `a =+ b`. Suggests replacing with `a += b`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSSuspiciousEqPlus",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyStatementBodyJS",
                "shortDescription": {
                  "text": "Statement with empty body"
                },
                "fullDescription": {
                  "text": "Reports an 'if', 'while', 'for', or 'with' statement with an empty body. Such statements often result from typos, and may cause confusion. Use the checkbox below to specify whether the statements with empty block statements as bodies should be reported.",
                  "markdown": "Reports an `if`, `while`, `for`, or `with` statement with an empty body. Such statements often result from typos, and may cause confusion.\n\n\nUse the checkbox below to specify whether the statements with empty block statements as bodies\nshould be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "StatementWithEmptyBodyJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Potentially confusing code constructs",
                      "index": 37,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSVoidFunctionReturnValueUsed",
                "shortDescription": {
                  "text": "Void function return value used"
                },
                "fullDescription": {
                  "text": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an 'undefined' value and such assignment may indicate an error. Example: 'let a = console.log('foo');' The following usages are ignored: Inside a return statement In some binary operations For overridden non-void functions",
                  "markdown": "Reports a return value of a function that doesn't return anything. Calling of such functions always produces an `undefined` value and such assignment may indicate an error.\n\nExample:\n\n\n    let a = console.log('foo');\n\nThe following usages are ignored:\n\n* Inside a return statement\n* In some binary operations\n* For overridden non-void functions"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSVoidFunctionReturnValueUsed",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Probable bugs",
                      "index": 23,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSUnusedLocalSymbols",
                "shortDescription": {
                  "text": "Unused local symbol"
                },
                "fullDescription": {
                  "text": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration.",
                  "markdown": "Reports an unused locally accessible parameter, local variable, function, class, or private member declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JSUnusedLocalSymbols",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unused symbols",
                      "index": 26,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReturnFromFinallyBlockJS",
                "shortDescription": {
                  "text": "'return' inside 'finally' block"
                },
                "fullDescription": {
                  "text": "Reports a 'return' statement inside a 'finally' block. Such 'return' statements may mask exceptions thrown, and complicate debugging.",
                  "markdown": "Reports a `return` statement inside a `finally` block. Such `return` statements may mask exceptions thrown, and complicate debugging."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReturnInsideFinallyBlockJS",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Try statement issues",
                      "index": 42,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JSValidateTypes",
                "shortDescription": {
                  "text": "Type mismatch"
                },
                "fullDescription": {
                  "text": "Reports incorrect type of: a parameter in a function call a return value an assigned expression TypeScript code is ignored.",
                  "markdown": "Reports incorrect type of:\n\n* a parameter in a function call\n* a return value\n* an assigned expression\n\nTypeScript code is ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JSValidateTypes",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "PythonCore",
            "version": "243.6317",
            "rules": [
              {
                "id": "PyPandasSeriesToListInspection",
                "shortDescription": {
                  "text": "Method Series.to_list() is recommended"
                },
                "fullDescription": {
                  "text": "Reports redundant 'list' in 'list(Series.values)' statement for pandas and polars libraries. Such 'Series' values extraction can be replaced with the 'to_list()' function call. Example: list(df['column'].values)\n When the quick-fix is applied, the code changes to: df['column'].to_list()",
                  "markdown": "Reports redundant `list` in `list(Series.values)` statement for pandas and polars libraries.\nSuch `Series` values extraction can be replaced with the `to_list()` function call.\n\n**Example:**\n\n```\nlist(df['column'].values)\n```\n\nWhen the quick-fix is applied, the code changes to:\n\n```\ndf['column'].to_list()\n```"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyPackages",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySetFunctionToLiteralInspection",
                "shortDescription": {
                  "text": "Function call can be replaced with set literal"
                },
                "fullDescription": {
                  "text": "Reports calls to the 'set' function that can be replaced with the 'set' literal. Example: 'def do_mult(a, b):\n    c = a * b\n    return set([c, a, b])' When the quick-fix is applied, the code changes to: 'def do_mult(a, b):\n    c = a * b\n    return {c, a, b}'",
                  "markdown": "Reports calls to the `set` function that can be replaced with\nthe `set` literal.\n\n**Example:**\n\n\n    def do_mult(a, b):\n        c = a * b\n        return set([c, a, b])\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    def do_mult(a, b):\n        c = a * b\n        return {c, a, b}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PySetFunctionToLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOverridesInspection",
                "shortDescription": {
                  "text": "Invalid usages of @override decorator"
                },
                "fullDescription": {
                  "text": "Reports when a method decorated with @override doesn't have a matching method in its ancestor classes Example: 'from typing import override\n\nclass Parent:\n    def foo(self) -> int:\n        return 1\n\n    def bar(self, x: str) -> str:\n        return x\n\nclass Child(Parent):\n    @override\n    def foo(self) -> int:\n        return 2\n\n    @override # Missing super method for override function\n    def baz(self) -> int:\n        return 1'",
                  "markdown": "Reports when a method decorated with @override doesn't have a matching method in its ancestor classes\n\n**Example:**\n\n\n    from typing import override\n\n    class Parent:\n        def foo(self) -> int:\n            return 1\n\n        def bar(self, x: str) -> str:\n            return x\n\n    class Child(Parent):\n        @override\n        def foo(self) -> int:\n            return 2\n\n        @override # Missing super method for override function\n        def baz(self) -> int:\n            return 1\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyOverrides",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInitNewSignatureInspection",
                "shortDescription": {
                  "text": "Incompatible signatures of __new__ and __init__"
                },
                "fullDescription": {
                  "text": "Reports incompatible signatures of the '__new__' and '__init__' methods. Example: 'class MyClass(object):\n    def __new__(cls, arg1):\n        return super().__new__(cls)\n\n    def __init__(self):\n        pass' If the '__new__' and '__init__' have different arguments, then the 'MyClass' cannot be instantiated. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports incompatible signatures of the `__new__` and `__init__` methods.\n\n**Example:**\n\n\n    class MyClass(object):\n        def __new__(cls, arg1):\n            return super().__new__(cls)\n\n        def __init__(self):\n            pass\n\nIf the `__new__` and `__init__` have different arguments, then the `MyClass`\ncannot be instantiated.\n\nAs a fix, the IDE offers to apply the Change Signature refactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyInitNewSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingConstructorInspection",
                "shortDescription": {
                  "text": "Missed call to '__init__' of the super class"
                },
                "fullDescription": {
                  "text": "Reports cases when a call to the 'super' constructor in a class is missed. Example: 'class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        pass' The 'Pear' class should have a 'super' call in the '__init__' method. When the quick-fix is applied, the code changes to: 'class Fruit:\n    def __init__(self):\n        pass\n\n\nclass Pear(Fruit):\n    def __init__(self):\n        super().__init__()'",
                  "markdown": "Reports cases when a call to the `super` constructor in a class is missed.\n\n**Example:**\n\n\n    class Fruit:\n        def __init__(self):\n            pass\n\n\n    class Pear(Fruit):\n        def __init__(self):\n            pass\n\nThe `Pear` class should have a `super` call in the `__init__`\nmethod.\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    class Fruit:\n        def __init__(self):\n            pass\n\n\n    class Pear(Fruit):\n        def __init__(self):\n            super().__init__()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyMissingConstructor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySimplifyBooleanCheckInspection",
                "shortDescription": {
                  "text": "Redundant boolean variable check"
                },
                "fullDescription": {
                  "text": "Reports equality comparison with a boolean literal. Example: 'def func(s):\n    if s.isdigit() == True:\n        return int(s)' With the quick-fix applied, the code fragment will be simplified to: 'def func(s):\n    if s.isdigit():\n        return int(s)'",
                  "markdown": "Reports equality comparison with a boolean literal.\n\n**Example:**\n\n\n    def func(s):\n        if s.isdigit() == True:\n            return int(s)\n\nWith the quick-fix applied, the code fragment will be simplified to:\n\n\n    def func(s):\n        if s.isdigit():\n            return int(s)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PySimplifyBooleanCheck",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCallingNonCallableInspection",
                "shortDescription": {
                  "text": "Attempt to call a non-callable object"
                },
                "fullDescription": {
                  "text": "Reports a problem when you are trying to call objects that are not callable, like, for example, properties: Example: 'class Record:\n    @property\n    def as_json(self):\n\njson = Record().as_json()'",
                  "markdown": "Reports a problem when you are trying\nto call objects that are not callable, like, for example, properties:\n\n**Example:**\n\n\n    class Record:\n        @property\n        def as_json(self):\n\n    json = Record().as_json()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyCallingNonCallable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports code fragments that cannot be normally reached. Example: 'if True:\n    print('Yes')\nelse:\n    print('No')' As a fix, you might want to check and modify the algorithm to ensure it implements the expected logic.",
                  "markdown": "Reports code fragments that cannot be normally reached.\n\n**Example:**\n\n\n    if True:\n        print('Yes')\n    else:\n        print('No')\n\nAs a fix, you might want to check and modify the algorithm to ensure it implements\nthe expected logic."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyUnreachableCode",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyChainedComparisonsInspection",
                "shortDescription": {
                  "text": "Too complex chained comparisons"
                },
                "fullDescription": {
                  "text": "Reports chained comparisons that can be simplified. Example: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if x >= xmin and x <= xmax:\n          pass' The IDE offers to simplify 'if x >= xmin and x <= xmax'. When the quick-fix is applied, the code changes to: 'def do_comparison(x):\n      xmin = 10\n      xmax = 100\n      if xmin <= x <= xmax:\n          pass'",
                  "markdown": "Reports chained comparisons that can be simplified.\n\n**Example:**\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if x >= xmin and x <= xmax:\n              pass\n\nThe IDE offers to simplify `if x >= xmin and x <= xmax`.\nWhen the quick-fix is applied, the code changes to:\n\n\n      def do_comparison(x):\n          xmin = 10\n          xmax = 100\n          if xmin <= x <= xmax:\n              pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyChainedComparisons",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyCompatibilityInspection",
                "shortDescription": {
                  "text": "Code is incompatible with specific Python versions"
                },
                "fullDescription": {
                  "text": "Reports incompatibility with the specified versions of Python. Enable this inspection if you need your code to be compatible with a range of Python versions, for example, if you are building a library. To define the range of the inspected Python versions, select the corresponding checkboxes in the Options section. For more information about the Python versions supported by the IDE, see the web help.",
                  "markdown": "Reports incompatibility with the specified versions of Python.\nEnable this inspection if you need your code to be compatible with a range of Python versions, for example,\nif you are building a library.\n\nTo define the range of the inspected Python versions, select the corresponding checkboxes in the **Options**\nsection.\n\nFor more information about the Python versions supported by the IDE, see the\n[web help](https://www.jetbrains.com/help/pycharm/python.html#support)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyCompatibility",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyGlobalUndefinedInspection",
                "shortDescription": {
                  "text": "Global variable is not defined at the module level"
                },
                "fullDescription": {
                  "text": "Reports problems when a variable defined through the 'global' statement is not defined in the module scope. Example: 'def foo():\n    global bar\n    print(bar)\n\nfoo()' As a fix, you can move the global variable declaration: 'global bar\n\n\ndef foo():\n    print(bar)'",
                  "markdown": "Reports problems when a variable defined through the `global`\nstatement is not defined in the module scope.\n\n**Example:**\n\n\n    def foo():\n        global bar\n        print(bar)\n\n    foo()\n\nAs a fix, you can move the global variable declaration:\n\n\n    global bar\n\n\n    def foo():\n        print(bar)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyGlobalUndefined",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnsatisfiedRequirementInspection",
                "shortDescription": {
                  "text": "Requirement is not satisfied"
                },
                "fullDescription": {
                  "text": "Reports packages mentioned in requirements files (for example, 'requirements.txt', or 'dependencies' section in 'pyproject.toml' files) but not installed, or imported but not mentioned in requirements files.",
                  "markdown": "Reports packages mentioned in requirements files (for example, `requirements.txt`, or `dependencies` section in `pyproject.toml` files) but not installed,\nor imported but not mentioned in requirements files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnsatisfiedRequirement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Requirements",
                      "index": 46,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtocolInspection",
                "shortDescription": {
                  "text": "Invalid protocol definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of protocols introduced in PEP-544. Example: 'from typing import Protocol\n\n\nclass MyProtocol(Protocol):\n    def method(self, p: int) -> str:\n        pass\n\n\nclass MyClass(MyProtocol):\n    def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n        pass\n\n\nclass MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n    pass'",
                  "markdown": "Reports invalid definitions and usages of protocols introduced in\n[PEP-544](https://www.python.org/dev/peps/pep-0544/).\n\n**Example:**\n\n\n    from typing import Protocol\n\n\n    class MyProtocol(Protocol):\n        def method(self, p: int) -> str:\n            pass\n\n\n    class MyClass(MyProtocol):\n        def method(self, p: str) -> int: # Type of 'method' is not compatible with 'MyProtocol'\n            pass\n\n\n    class MyAnotherProtocol(MyClass, Protocol): # All bases of a protocol must be protocols\n        pass\n\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyProtocol",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeHintsInspection",
                "shortDescription": {
                  "text": "Invalid type hints definitions and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of type hints. Example: 'from typing import TypeVar\n\nT0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\ndef b(p: int) -> int:  # Type specified both in a comment and annotation\n    # type: (int) -> int\n    pass\n\n\ndef c(p1, p2): # Type signature has too many arguments\n    # type: (int) -> int\n    pass' Available quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown.",
                  "markdown": "Reports invalid usages of type hints.\n\n**Example:**\n\n\n    from typing import TypeVar\n\n    T0 = TypeVar('T1') # Argument of 'TypeVar' must be 'T0'\n\n\n    def b(p: int) -> int:  # Type specified both in a comment and annotation\n        # type: (int) -> int\n        pass\n\n\n    def c(p1, p2): # Type signature has too many arguments\n        # type: (int) -> int\n        pass\n\nAvailable quick-fixes offer various actions. You can rename, remove, or move problematic elements. You can also manually modify type declarations to ensure no warning is shown."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTypeHints",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodMayBeStaticInspection",
                "shortDescription": {
                  "text": "Method is not declared static"
                },
                "fullDescription": {
                  "text": "Reports any methods that do not require a class instance creation and can be made static. Example: 'class MyClass(object):\n    def my_method(self, x):\n        print(x)' If a Make function from method quick-fix is applied, the code changes to: 'def my_method(x):\n    print(x)\n\n\nclass MyClass(object):\n    pass' If you select the Make method static quick-fix, the '@staticmethod' decorator is added: 'class MyClass(object):\n    @staticmethod\n    def my_method(x):\n        print(x)'",
                  "markdown": "Reports any methods that do not require a class instance creation and can be\nmade static.\n\n**Example:**\n\n\n    class MyClass(object):\n        def my_method(self, x):\n            print(x)\n\nIf a **Make function from method** quick-fix is applied, the code changes to:\n\n\n    def my_method(x):\n        print(x)\n\n\n    class MyClass(object):\n        pass\n\nIf you select the **Make method static** quick-fix, the `@staticmethod` decorator is added:\n\n\n    class MyClass(object):\n        @staticmethod\n        def my_method(x):\n            print(x)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyMethodMayBeStatic",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictCreationInspection",
                "shortDescription": {
                  "text": "Dictionary creation can be rewritten by dictionary literal"
                },
                "fullDescription": {
                  "text": "Reports situations when you can rewrite dictionary creation by using a dictionary literal. This approach brings performance improvements. Example: 'dic = {}\ndic['var'] = 1' When the quick-fix is applied, the code changes to: 'dic = {'var': 1}'",
                  "markdown": "Reports situations when you can rewrite dictionary creation\nby using a dictionary literal.\n\nThis approach brings performance improvements.\n\n**Example:**\n\n\n    dic = {}\n    dic['var'] = 1\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    dic = {'var': 1}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyDictCreation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStringFormatInspection",
                "shortDescription": {
                  "text": "Errors in string formatting operations"
                },
                "fullDescription": {
                  "text": "Reports errors in string formatting operations. Example 1: '\"Hello {1}\".format(\"people\")' Example 2: 'def bar():\n    return 1\n\n\n\"%s %s\" % bar()' As a fix, you need to rewrite string formatting fragments to adhere to the formatting syntax.",
                  "markdown": "Reports errors in string formatting operations.\n\n**Example 1:**\n\n\n    \"Hello {1}\".format(\"people\")\n\n**Example 2:**\n\n\n    def bar():\n        return 1\n\n\n    \"%s %s\" % bar()\n\nAs a fix, you need to rewrite string formatting fragments to\nadhere to the [formatting syntax](https://docs.python.org/3/library/string.html#format-string-syntax)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyStringFormat",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptionInheritInspection",
                "shortDescription": {
                  "text": "Exceptions do not inherit from standard 'Exception' class"
                },
                "fullDescription": {
                  "text": "Reports cases when a custom exception class is raised but does not inherit from the builtin Exception class. Example: 'class A:\n    pass\n\n\ndef me_exception():\n    raise A()' The proposed quick-fix changes the code to: 'class A(Exception):\n    pass\n\n\ndef me_exception():\n    raise A()'",
                  "markdown": "Reports cases when a custom exception class is\nraised but does not inherit from the\n[builtin Exception class](https://docs.python.org/3/library/exceptions.html).\n\n**Example:**\n\n\n    class A:\n        pass\n\n\n    def me_exception():\n        raise A()\n\nThe proposed quick-fix changes the code to:\n\n\n    class A(Exception):\n        pass\n\n\n    def me_exception():\n        raise A()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyExceptionInherit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAssignmentToLoopOrWithParameterInspection",
                "shortDescription": {
                  "text": "Assignments to 'for' loop or 'with' statement parameter"
                },
                "fullDescription": {
                  "text": "Reports the cases when you rewrite a loop variable with an inner loop. Example: 'for i in range(5):\n      for i in range(20, 25):\n          print(\"Inner\", i)\n      print(\"Outer\", i)' It also warns you if a variable declared in the 'with' statement is redeclared inside the statement body: 'with open(\"file\") as f:\n      f.read()\n      with open(\"file\") as f:'",
                  "markdown": "Reports the cases when you rewrite a loop variable with an inner loop.\n\n**Example:**\n\n\n        for i in range(5):\n          for i in range(20, 25):\n              print(\"Inner\", i)\n          print(\"Outer\", i)\n      \nIt also warns you if a variable declared in the `with` statement is redeclared inside the statement body:\n\n\n        with open(\"file\") as f:\n          f.read()\n          with open(\"file\") as f:\n      \n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyAssignmentToLoopOrWithParameter",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySuperArgumentsInspection",
                "shortDescription": {
                  "text": "Wrong arguments to call super"
                },
                "fullDescription": {
                  "text": "Reports cases when any call to 'super(A, B)' does not meet the following requirements: 'B' is an instance of 'A' 'B' a subclass of 'A' Example: 'class Figure:\n    def color(self):\n        pass\n\n\nclass Rectangle(Figure):\n    def color(self):\n        pass\n\n\nclass Square(Figure):\n    def color(self):\n        return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle' As a fix, you can make the 'Square' an instance of the 'Rectangle' class.",
                  "markdown": "Reports cases when any call to `super(A, B)` does not meet the\nfollowing requirements:\n\n* `B` is an instance of `A`\n* `B` a subclass of `A`\n\n**Example:**\n\n\n    class Figure:\n        def color(self):\n            pass\n\n\n    class Rectangle(Figure):\n        def color(self):\n            pass\n\n\n    class Square(Figure):\n        def color(self):\n            return super(Rectangle, self).color() # Square is not an instance or subclass of Rectangle\n\nAs a fix, you can make the `Square` an instance of the `Rectangle` class."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PySuperArguments",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNonAsciiCharInspection",
                "shortDescription": {
                  "text": "File contains non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a file contains non-ASCII characters and does not have an encoding declaration at the top. Example: 'class A(object):\n# №5\n    def __init__(self):\n        pass' In this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding declaration. Apply the proposed quick-fix to add a missing encoding declaration: '# coding=utf-8\nclass A(object)\n# №5\n    def __init__(self):\n        pass'",
                  "markdown": "Reports cases in Python 2 when a file contains non-ASCII characters and does not\nhave an encoding declaration at the top.\n\n**Example:**\n\n\n    class A(object):\n    # №5\n        def __init__(self):\n            pass\n\nIn this example, the IDE reports a non-ASCII symbol in a comment and a lack of encoding\ndeclaration. Apply the proposed quick-fix to add a missing encoding declaration:\n\n\n    # coding=utf-8\n    class A(object)\n    # №5\n        def __init__(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyNonAsciiChar",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOldStyleClassesInspection",
                "shortDescription": {
                  "text": "Old-style class contains new-style class features"
                },
                "fullDescription": {
                  "text": "Reports occurrences of new-style class features in old-style classes. The inspection highlights '__slots__', '__getattribute__', and 'super()' inside old-style classes.",
                  "markdown": "Reports occurrences of\n[new-style class features](https://www.python.org/doc/newstyle/)\nin old-style classes. The inspection highlights\n`__slots__`, `__getattribute__`, and `super()`\ninside old-style classes."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyOldStyleClasses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAbstractClassInspection",
                "shortDescription": {
                  "text": "Class must implement all abstract methods"
                },
                "fullDescription": {
                  "text": "Reports cases when not all abstract properties or methods are defined in a subclass. Example: 'from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_triangle(self):\n        pass' When the quick-fix is applied, the IDE implements an abstract method for the 'Triangle' class: 'from abc import abstractmethod, ABC\n\n\nclass Figure(ABC):\n\n    @abstractmethod\n    def do_figure(self):\n        pass\n\n\nclass Triangle(Figure):\n    def do_figure(self):\n        pass\n\n    def do_triangle(self):\n        pass'",
                  "markdown": "Reports cases when not all abstract properties or methods are defined in\na subclass.\n\n**Example:**\n\n\n    from abc import abstractmethod, ABC\n\n\n    class Figure(ABC):\n\n        @abstractmethod\n        def do_figure(self):\n            pass\n\n\n    class Triangle(Figure):\n        def do_triangle(self):\n            pass\n\nWhen the quick-fix is applied, the IDE implements an abstract method for the `Triangle` class:\n\n\n    from abc import abstractmethod, ABC\n\n\n    class Figure(ABC):\n\n        @abstractmethod\n        def do_figure(self):\n            pass\n\n\n    class Triangle(Figure):\n        def do_figure(self):\n            pass\n\n        def do_triangle(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyAbstractClass",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyBroadExceptionInspection",
                "shortDescription": {
                  "text": "Unclear exception clauses"
                },
                "fullDescription": {
                  "text": "Reports exception clauses that do not provide specific information about the problem. Example: Clauses that do not specify an exception class Clauses that are specified as 'Exception'",
                  "markdown": "Reports exception clauses that do not provide specific information\nabout the problem.\n\n**Example:**\n\n* Clauses that do not specify an exception class\n* Clauses that are specified as `Exception`"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyBroadException",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypeCheckerInspection",
                "shortDescription": {
                  "text": "Incorrect type"
                },
                "fullDescription": {
                  "text": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases. Types of function parameters can be specified in docstrings or in Python 3 function annotations. Example: 'def foo() -> int:\n    return \"abc\" # Expected int, got str\n\n\na: str\na = foo() # Expected str, got int' With the quick-fix, you can modify the problematic types: 'def foo() -> str:\n    return \"abc\"\n\n\na: str\na = foo()'",
                  "markdown": "Reports type errors in function call expressions, targets, and return values. In a dynamically typed language, this is possible in a limited number of cases.\n\nTypes of function parameters can be specified in\ndocstrings or in Python 3 function annotations.\n\n**Example:**\n\n\n    def foo() -> int:\n        return \"abc\" # Expected int, got str\n\n\n    a: str\n    a = foo() # Expected str, got int\n\nWith the quick-fix, you can modify the problematic types:\n\n\n    def foo() -> str:\n        return \"abc\"\n\n\n    a: str\n    a = foo()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTypeChecker",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyByteLiteralInspection",
                "shortDescription": {
                  "text": "A byte literal contains a non-ASCII character"
                },
                "fullDescription": {
                  "text": "Reports characters in byte literals that are outside ASCII range. Example: 's = b'№5''",
                  "markdown": "Reports characters in byte literals that are outside ASCII range.\n\n**Example:**\n\n\n      s = b'№5'\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyByteLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAugmentAssignmentInspection",
                "shortDescription": {
                  "text": "Assignment can be replaced with augmented assignment"
                },
                "fullDescription": {
                  "text": "Reports assignments that can be replaced with augmented assignments. Example: 'a = 23\nb = 3\na = a + b' After the quick-fix is applied, the code changes to: 'a = 23\nb = 3\na += b'",
                  "markdown": "Reports assignments that can be replaced with augmented assignments.\n\n**Example:**\n\n\n    a = 23\n    b = 3\n    a = a + b\n\nAfter the quick-fix is applied, the code changes to:\n\n\n    a = 23\n    b = 3\n    a += b\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyAugmentAssignment",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated function, class, or module"
                },
                "fullDescription": {
                  "text": "Reports usages of Python functions, or methods that are marked as deprecated and raise the 'DeprecationWarning' or 'PendingDeprecationWarning' warning. Also, this inspection highlights usages of 'abc.abstractstaticmethod', 'abc.abstractproperty', and 'abc.abstractclassmethod' decorators. Example: 'class Foo:\n    @property\n    def bar(self):\n        import warnings\n        warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n        return 5\n\n\nfoo = Foo()\nprint(foo.bar)'",
                  "markdown": "Reports usages of Python functions, or methods that are marked as\ndeprecated and raise the `DeprecationWarning` or `PendingDeprecationWarning` warning.\n\nAlso, this inspection highlights usages of `abc.abstractstaticmethod`, `abc.abstractproperty`, and `abc.abstractclassmethod`\ndecorators.\n\n**Example:**\n\n\n    class Foo:\n        @property\n        def bar(self):\n            import warnings\n            warnings.warn(\"this is deprecated\", DeprecationWarning, 2)\n            return 5\n\n\n    foo = Foo()\n    print(foo.bar)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDeprecation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnnecessaryBackslashInspection",
                "shortDescription": {
                  "text": "Unnecessary backslash"
                },
                "fullDescription": {
                  "text": "Reports backslashes in places where line continuation is implicit inside '()', '[]', and '{}'. Example: 'a = ('first', \\\n     'second', 'third')' When the quick-fix is applied, the redundant backslash is deleted.",
                  "markdown": "Reports backslashes in places where line continuation is implicit inside `()`,\n`[]`, and `{}`.\n\n**Example:**\n\n\n    a = ('first', \\\n         'second', 'third')\n\nWhen the quick-fix is applied, the redundant backslash is deleted."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyUnnecessaryBackslash",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingNamesInspection",
                "shortDescription": {
                  "text": "Shadowing names from outer scopes"
                },
                "fullDescription": {
                  "text": "Reports shadowing names defined in outer scopes. Example: 'def outer(p):\n    def inner(p):\n        pass' As a quick-fix, the IDE offers to remove a parameter or rename it.",
                  "markdown": "Reports shadowing names defined in outer scopes.\n\n**Example:**\n\n\n    def outer(p):\n        def inner(p):\n            pass\n\nAs a quick-fix, the IDE offers to remove a parameter or rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyShadowingNames",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFinalInspection",
                "shortDescription": {
                  "text": "Invalid usages of final classes, methods, and variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of final classes, methods and variables. Example: 'from typing import final\n\n\n@final\nclass A:\n    def a_method(self):\n        pass\n\n\nclass B(A):\n    def a_method(self):\n        pass'",
                  "markdown": "Reports invalid usages of final classes,\nmethods and variables.\n\n**Example:**\n\n\n    from typing import final\n\n\n    @final\n    class A:\n        def a_method(self):\n            pass\n\n\n    class B(A):\n        def a_method(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyFinal",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PySingleQuotedDocstringInspection",
                "shortDescription": {
                  "text": "Single quoted docstring"
                },
                "fullDescription": {
                  "text": "Reports docstrings that do not adhere to the triple double-quoted string format. Example: 'def calc(self, balance=0):\n    'param: balance'\n    self.balance = balance' When the quick-fix is applied, the code changes to: 'def calc(self, balance=0):\n    \"\"\"param: balance\"\"\"\n    self.balance = balance'",
                  "markdown": "Reports docstrings that do not adhere to the triple double-quoted string format.\n\n**Example:**\n\n\n    def calc(self, balance=0):\n        'param: balance'\n        self.balance = balance\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    def calc(self, balance=0):\n        \"\"\"param: balance\"\"\"\n        self.balance = balance\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PySingleQuotedDocstring",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnusedLocalInspection",
                "shortDescription": {
                  "text": "Unused local symbols"
                },
                "fullDescription": {
                  "text": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function.",
                  "markdown": "Reports local variables, parameters, and functions that are locally defined, but not used name in a function."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyUnusedLocal",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyReturnFromInitInspection",
                "shortDescription": {
                  "text": "__init__ method that returns a value"
                },
                "fullDescription": {
                  "text": "Reports occurrences of 'return' statements with a return value inside '__init__' methods of classes. Example: 'class Sum:\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self.sum = a + b\n        return self.sum' A constructor should not return any value. The '__init__' method should only initialize the values of instance members for news objects. As a quick-fix, the IDE offers to remove the 'return' statement.",
                  "markdown": "Reports occurrences of `return` statements with a return value inside\n`__init__` methods of classes.\n\n**Example:**\n\n\n    class Sum:\n        def __init__(self, a, b):\n            self.a = a\n            self.b = b\n            self.sum = a + b\n            return self.sum\n\nA constructor should not return any value. The `__init__` method should\nonly initialize the values of instance members for news objects.\n\nAs a quick-fix, the IDE offers to remove the `return` statement."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyReturnFromInit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingOrEmptyDocstringInspection",
                "shortDescription": {
                  "text": "Missing or empty docstring"
                },
                "fullDescription": {
                  "text": "Reports missing and empty docstrings. Example of a missing docstring 'def demo(a):\n    c = a ** 2' Example of an empty docstring 'def demo(a):\n    \"\"\"\n    \"\"\"\n    c = a ** 2' When the quick-fix is applied, the code fragments change to: 'def demo(a):\n    \"\"\"\n\n    :param a:\n    \"\"\"\n    c = a ** 2' You need to provide some details about the parameter in the generated template.",
                  "markdown": "Reports missing and empty docstrings.\n\n**Example of a missing docstring**\n\n\n    def demo(a):\n        c = a ** 2\n\n**Example of an empty docstring**\n\n\n    def demo(a):\n        \"\"\"\n        \"\"\"\n        c = a ** 2\n\nWhen the quick-fix is applied, the code fragments change to:\n\n\n    def demo(a):\n        \"\"\"\n\n        :param a:\n        \"\"\"\n        c = a ** 2\n\nYou need to provide some details about the parameter in the generated template."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyMissingOrEmptyDocstring",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8NamingInspection",
                "shortDescription": {
                  "text": "PEP 8 naming convention violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP8 naming conventions. Example: 'class mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")' In this code fragment, IDE offers to rename 'mammalia' to 'Mammalia'. When the quick-fix is applied, the code change to: 'class Mammalia(object):\n    extremities = 4\n\n    def feeds(self):\n        print(\"milk\")'",
                  "markdown": "Reports violations of the\n[PEP8](https://www.python.org/dev/peps/pep-0008/) naming conventions.\n\n**Example:**\n\n\n    class mammalia(object):\n        extremities = 4\n\n        def feeds(self):\n            print(\"milk\")\n\nIn this code fragment, IDE offers to rename `mammalia` to `Mammalia`.\nWhen the quick-fix is applied, the code change to:\n\n\n    class Mammalia(object):\n        extremities = 4\n\n        def feeds(self):\n            print(\"milk\")\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyPep8Naming",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDictDuplicateKeysInspection",
                "shortDescription": {
                  "text": "Dictionary contains duplicate keys"
                },
                "fullDescription": {
                  "text": "Reports using the same value as the dictionary key twice. Example: 'dic = {\"a\": [1, 2], \"a\": [3, 4]}'",
                  "markdown": "Reports using the same value as the dictionary key twice.\n\n**Example:**\n\n\n    dic = {\"a\": [1, 2], \"a\": [3, 4]}\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDictDuplicateKeys",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNoneFunctionAssignmentInspection",
                "shortDescription": {
                  "text": "Assigning function calls that don't return anything"
                },
                "fullDescription": {
                  "text": "Reports cases when an assignment is done on a function that does not return anything. This inspection is similar to pylint inspection E1111. Example: 'def just_print():\n    print(\"Hello!\")\n\n\naction = just_print()' As a quick-fix, the IDE offers to remove the assignment.",
                  "markdown": "Reports cases when an assignment is done on a function that does not return anything.\nThis inspection is similar to [pylint inspection E1111](https://docs.pylint.org/en/1.6.0/features.html#id6).\n\n**Example:**\n\n\n    def just_print():\n        print(\"Hello!\")\n\n\n    action = just_print()\n\nAs a quick-fix, the IDE offers to remove the assignment."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyNoneFunctionAssignment",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStatementEffectInspection",
                "shortDescription": {
                  "text": "Statement has no effect"
                },
                "fullDescription": {
                  "text": "Reports statements that have no effect. Example: 'class Car:\n    def __init__(self, speed=0):\n        self.speed = speed\n        self.time # has no effect\n\n2 + 3 # has no effect' In this example, you can either add a field 'time' to the 'Car' class or introduce variables for the problematic statements.",
                  "markdown": "Reports statements that have no effect.\n\n**Example:**\n\n\n    class Car:\n        def __init__(self, speed=0):\n            self.speed = speed\n            self.time # has no effect\n\n    2 + 3 # has no effect\n\nIn this example, you can either add a field `time` to the `Car` class or\nintroduce variables for the problematic statements."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyStatementEffect",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMandatoryEncodingInspection",
                "shortDescription": {
                  "text": "No encoding specified for file"
                },
                "fullDescription": {
                  "text": "Reports a missing encoding comment in Python 2. Example: 'class Book(object):\n    def __init__(self):\n        pass' When the quick-fix is applied, the missing comment is added: '# coding=utf-8\nclass Book(object):\n    def __init__(self):\n        pass'",
                  "markdown": "Reports a missing encoding comment in Python 2.\n\n**Example:**\n\n\n    class Book(object):\n        def __init__(self):\n            pass\n\nWhen the quick-fix is applied, the missing comment is added:\n\n\n    # coding=utf-8\n    class Book(object):\n        def __init__(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyMandatoryEncoding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInconsistentIndentationInspection",
                "shortDescription": {
                  "text": "Inconsistent indentation"
                },
                "fullDescription": {
                  "text": "Reports inconsistent indentation in Python source files when, for example, you use a mixture of tabs and spaces in your code.",
                  "markdown": "Reports inconsistent indentation in Python source files when, for example,\nyou use a mixture of tabs and spaces in your code."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyInconsistentIndentation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAttributeOutsideInitInspection",
                "shortDescription": {
                  "text": "An instance attribute is defined outside `__init__`"
                },
                "fullDescription": {
                  "text": "Reports a problem when instance attribute definition is outside '__init__' method. Example: 'class Book:\n    def __init__(self):\n        self.author = 'Mark Twain'\n\n    def release(self):\n        self.year = '1889'' When the quick-fix is applied, the code sample changes to: 'class Book:\n    def __init__(self):\n        self.year = '1889'\n        self.author = 'Mark Twain'\n\n    def release(self):\n        pass'",
                  "markdown": "Reports a problem when instance attribute definition is outside `__init__` method.\n\n**Example:**\n\n\n        class Book:\n        def __init__(self):\n            self.author = 'Mark Twain'\n\n        def release(self):\n            self.year = '1889'\n\n\nWhen the quick-fix is applied, the code sample changes to:\n\n\n        class Book:\n        def __init__(self):\n            self.year = '1889'\n            self.author = 'Mark Twain'\n\n        def release(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyAttributeOutsideInit",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTypedDictInspection",
                "shortDescription": {
                  "text": "Invalid TypedDict definition and usages"
                },
                "fullDescription": {
                  "text": "Reports invalid definition and usage of TypedDict. Example: 'from typing import TypedDict\n\n\nclass Movie(TypedDict):\n    name: str\n    year: int\n    rate: int = 10  # Right-hand side values are not supported\n\n    def method(self): # Invalid statement in TypedDict\n        pass\n\n\nm = Movie(name=\"name\", year=1000, rate=9)\nprint(m[\"director\"])  # There is no the 'director' key in 'Movie'\ndel m[\"name\"]  # The 'name' key cannot be deleted\nm[\"year\"] = \"1001\"  # Expected 'int', got 'str''",
                  "markdown": "Reports invalid definition and usage of\n[TypedDict](https://www.python.org/dev/peps/pep-0589/).\n\n**Example:**\n\n\n    from typing import TypedDict\n\n\n    class Movie(TypedDict):\n        name: str\n        year: int\n        rate: int = 10  # Right-hand side values are not supported\n\n        def method(self): # Invalid statement in TypedDict\n            pass\n\n\n    m = Movie(name=\"name\", year=1000, rate=9)\n    print(m[\"director\"])  # There is no the 'director' key in 'Movie'\n    del m[\"name\"]  # The 'name' key cannot be deleted\n    m[\"year\"] = \"1001\"  # Expected 'int', got 'str'\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTypedDict",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPep8Inspection",
                "shortDescription": {
                  "text": "PEP 8 coding style violation"
                },
                "fullDescription": {
                  "text": "Reports violations of the PEP 8 coding style guide by running the bundled pycodestyle.py tool.",
                  "markdown": "Reports violations of the [PEP 8 coding style guide](https://www.python.org/dev/peps/pep-0008/) by running the bundled [pycodestyle.py](https://github.com/PyCQA/pycodestyle) tool."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyPep8",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMissingTypeHintsInspection",
                "shortDescription": {
                  "text": "Missing type hinting for function definition"
                },
                "fullDescription": {
                  "text": "Reports missing type hints for function declaration in one of the two formats: parameter annotations or a type comment. Select the Only when types are known checkbox if you want the inspection check the types collected from runtime or inferred.",
                  "markdown": "Reports missing type hints for function declaration in\none of the two formats: parameter annotations or a type comment.\n\nSelect the **Only when types are known** checkbox if you want the inspection check\nthe types collected from runtime or inferred."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyMissingTypeHints",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleItemAssignmentInspection",
                "shortDescription": {
                  "text": "Tuple item assignment is prohibited"
                },
                "fullDescription": {
                  "text": "Reports assignments to a tuple item. Example: 't = ('red', 'blue', 'green', 'white')\nt[3] = 'black'' A quick-fix offers to replace the tuple with a list.",
                  "markdown": "Reports assignments to a tuple item.\n\n**Example:**\n\n\n    t = ('red', 'blue', 'green', 'white')\n    t[3] = 'black'\n\nA quick-fix offers to replace the tuple with a list."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTupleItemAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDunderSlotsInspection",
                "shortDescription": {
                  "text": "Invalid usages of classes with  '__slots__' definitions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of a class with '__slots__' definitions. Example: 'class Foo:\n    __slots__ = ['foo', 'bar']\n\n\nfoo = Foo()\nfoo.baz = 'spam''",
                  "markdown": "Reports invalid usages of a class with `__slots__` definitions.\n\n**Example:**\n\n\n    class Foo:\n        __slots__ = ['foo', 'bar']\n\n\n    foo = Foo()\n    foo.baz = 'spam'\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDunderSlots",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDefaultArgumentInspection",
                "shortDescription": {
                  "text": "The default argument is mutable"
                },
                "fullDescription": {
                  "text": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for an argument. Default argument values are evaluated only once at function definition time, which means that modifying the default value of the argument will affect all subsequent calls of that function. Example: 'def func(s, cache={}):\n    cache[s] = None' When the quick-fix is applied, the code changes to: 'def func(s, cache=None):\n    if cache is None:\n        cache = {}\n    cache[s] = None'",
                  "markdown": "Reports a problem when a mutable value as a list or dictionary is detected in a default value for\nan argument.   \n\nDefault argument values are evaluated only once at function definition time,\nwhich means that modifying the\ndefault value of the argument will affect all subsequent calls of that function.\n\n**Example:**\n\n\n    def func(s, cache={}):\n        cache[s] = None\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    def func(s, cache=None):\n        if cache is None:\n            cache = {}\n        cache[s] = None\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDefaultArgument",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTestUnpassedFixtureInspection",
                "shortDescription": {
                  "text": "Fixture is not requested by test functions"
                },
                "fullDescription": {
                  "text": "Reports if a fixture is used without being passed to test function parameters or to '@pytest.mark.usefixtures' decorator",
                  "markdown": "Reports if a fixture is used without being passed to test function parameters or to `@pytest.mark.usefixtures` decorator"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTestUnpassedFixture",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyShadowingBuiltinsInspection",
                "shortDescription": {
                  "text": "Shadowing built-in names"
                },
                "fullDescription": {
                  "text": "Reports shadowing built-in names, such as 'len' or 'list'. Example: 'def len(a, b, c):\n    d = a + b + c\n    return d' In this code fragment, the 'len' built-in name is used. The IDE offers to apply the Rename refactoring as a fix.",
                  "markdown": "Reports shadowing built-in names, such as `len` or `list`.\n\n**Example:**\n\n\n    def len(a, b, c):\n        d = a + b + c\n        return d\n\nIn this code fragment, the `len` built-in name is used. The IDE offers to\napply the Rename refactoring as a fix."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyShadowingBuiltins",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PoetryPackageVersionsInspection",
                "shortDescription": {
                  "text": "Poetry package versions"
                },
                "fullDescription": {
                  "text": "Reports outdated versions of packages in '[tool.poetry.dependencies]' and '[tool.poetry.dev-dependencies]' sections of 'pyproject.toml'.",
                  "markdown": "Reports outdated versions of packages in `[tool.poetry.dependencies]` and `[tool.poetry.dev-dependencies]`\nsections of `pyproject.toml`."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PoetryPackageVersions",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodOverridingInspection",
                "shortDescription": {
                  "text": "Method signature does not match signature of overridden method"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies in overriding method signatures. Example: 'class Book:\n    def add_title(self):\n        pass\n\n\nclass Novel(Book):\n    def add_title(self, text):\n        pass' Parameters of the 'add_title' method in the 'Novel' class do not match the method signature specified in the 'Book' class. As a fix, the IDE offers to apply the Change Signature refactoring.",
                  "markdown": "Reports inconsistencies in overriding method signatures.\n\n**Example:**\n\n\n    class Book:\n        def add_title(self):\n            pass\n\n\n    class Novel(Book):\n        def add_title(self, text):\n            pass\n\nParameters of the `add_title` method in the `Novel` class do not match the method\nsignature specified in the `Book` class. As a fix, the IDE offers to apply the Change Signature\nrefactoring."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyMethodOverriding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTestParametrizedInspection",
                "shortDescription": {
                  "text": "Incorrect arguments in @pytest.mark.parametrize"
                },
                "fullDescription": {
                  "text": "Reports functions that are decorated with @pytest.mark.parametrize but do not have arguments to accept parameters of the decorator.",
                  "markdown": "Reports functions that are decorated with [@pytest.mark.parametrize](https://docs.pytest.org/en/stable/parametrize.html) but do not have arguments to accept\nparameters of the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTestParametrized",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDecoratorInspection",
                "shortDescription": {
                  "text": "Class-specific decorator is used outside the class"
                },
                "fullDescription": {
                  "text": "Reports usages of '@classmethod' or '@staticmethod' decorators in methods outside a class. Example: 'class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\n@classmethod\ndef change_state(self):\n    pass' The 'change_state' method should not use the '@classmethod' decorator or it should be moved to the 'State' class declaration. If you apply the 'Remove decorator' action, the code changes to: 'class State(object):\n\n    @classmethod\n    def my_state(cls, name):\n        cls.name = name\n\n\ndef change_state(self):\n    pass'",
                  "markdown": "Reports usages of `@classmethod` or `@staticmethod` decorators\nin methods outside a class.\n\n**Example:**\n\n\n    class State(object):\n\n        @classmethod\n        def my_state(cls, name):\n            cls.name = name\n\n\n    @classmethod\n    def change_state(self):\n        pass\n\nThe `change_state` method should not use the `@classmethod` decorator or it should be\nmoved to the `State` class declaration.\n\nIf you apply the `Remove decorator` action, the code changes to:\n\n\n    class State(object):\n\n        @classmethod\n        def my_state(cls, name):\n            cls.name = name\n\n\n    def change_state(self):\n        pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDecorator",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyAsyncCallInspection",
                "shortDescription": {
                  "text": "Missing `await` syntax in coroutine calls"
                },
                "fullDescription": {
                  "text": "Reports coroutines that were called without using the 'await' syntax. Example: 'async def bar():\n    pass\n\n\nasync def foo():\n    bar()' After the quick-fix is applied, the code changes to: 'async def bar():\n    pass\n\n\nasync def foo():\n    await bar()'",
                  "markdown": "Reports coroutines that were called\nwithout using the `await` syntax.\n\n**Example:**\n\n\n    async def bar():\n        pass\n\n\n    async def foo():\n        bar()\n\nAfter the quick-fix is applied, the code changes to:\n\n\n    async def bar():\n        pass\n\n\n    async def foo():\n        await bar()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyAsyncCall",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RestRoleInspection",
                "shortDescription": {
                  "text": "Role is not defined"
                },
                "fullDescription": {
                  "text": "Reports undefined roles in reStructuredText files. Example: '.. role:: custom\n.. role:: newcustom(emphasis)\n\nAn example of using :custom:`interpreted text`\nAn example of using :newcustom:`interpreted text`\nAn example of using :emphasis:`interpreted text`\n\n\nSome text using undefined role :undef:`interpreted text`'",
                  "markdown": "Reports undefined roles in reStructuredText files.\n\n**Example:**\n\n\n    .. role:: custom\n    .. role:: newcustom(emphasis)\n\n    An example of using :custom:`interpreted text`\n    An example of using :newcustom:`interpreted text`\n    An example of using :emphasis:`interpreted text`\n\n\n    Some text using undefined role :undef:`interpreted text`\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RestRoleInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "ReST",
                      "index": 75,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CommandLineInspection",
                "shortDescription": {
                  "text": "Incorrect CLI syntax"
                },
                "fullDescription": {
                  "text": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies that option names and arguments are correct. Do not disable the inspection if you are going to use command-line interfaces like manage.py in Django.",
                  "markdown": "Reports the problems if the arguments of the command you type in the console are not in the proper order. The inspection also verifies\nthat option names and arguments are correct.\n\nDo not disable the inspection if you are going to use command-line interfaces like [manage.py in Django](https://www.jetbrains.com/help/pycharm/running-manage-py.html)."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CommandLineInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyComparisonWithNoneInspection",
                "shortDescription": {
                  "text": "Using equality operators to compare with None"
                },
                "fullDescription": {
                  "text": "Reports comparisons with 'None'. That type of comparisons should always be done with 'is' or 'is not', never the equality operators. Example: 'a = 2\n\n\nif a == None:\n    print(\"Success\")' Once the quick-fix is applied, the code changes to: 'a = 2\n\n\nif a is None:\n    print(\"Success\")'",
                  "markdown": "Reports comparisons with `None`. That type of comparisons\nshould always be done with `is` or `is not`, never\nthe equality operators.\n\n**Example:**\n\n\n    a = 2\n\n\n    if a == None:\n        print(\"Success\")\n\nOnce the quick-fix is applied, the code changes to:\n\n\n    a = 2\n\n\n    if a is None:\n        print(\"Success\")\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyComparisonWithNone",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodParametersInspection",
                "shortDescription": {
                  "text": "Improper first parameter"
                },
                "fullDescription": {
                  "text": "Reports methods that lack the first parameter that is usually named 'self'. Example: 'class Movie:\n\n   def show():\n       pass' When the quick-fix is applied, the code changes to: 'class Movie:\n\n   def show(self):\n       pass' The inspection also reports naming issues in class methods. Example: 'class Movie:\n    @classmethod\n    def show(abc):\n        pass' Since the first parameter of a class method should be 'cls', the IDE provides a quick-fix to rename it.",
                  "markdown": "Reports methods that lack the first parameter that is usually\nnamed `self`.\n\n**Example:**\n\n\n    class Movie:\n\n       def show():\n           pass\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    class Movie:\n\n       def show(self):\n           pass\n\nThe inspection also reports naming issues in class methods.\n\n**Example:**\n\n\n    class Movie:\n        @classmethod\n        def show(abc):\n            pass\n\nSince the first parameter of a class method should be `cls`, the IDE provides a quick-fix\nto rename it."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyMethodParameters",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDocstringTypesInspection",
                "shortDescription": {
                  "text": "Type in docstring does not match inferred type"
                },
                "fullDescription": {
                  "text": "Reports types in docstring that do not match dynamically inferred types.",
                  "markdown": "Reports types in docstring that do not match dynamically inferred types."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyDocstringTypes",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyMethodFirstArgAssignmentInspection",
                "shortDescription": {
                  "text": "First argument of the method is reassigned"
                },
                "fullDescription": {
                  "text": "Reports cases when the first parameter, such as 'self' or 'cls', is reassigned in a method. Because in most cases, there are no objectives in such reassignment, the IDE indicates an error. Example: 'class Account:\n    def calc(self, balance):\n        if balance == 0:\n            self = balance\n        return self' As a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct, you can invoke intention actions for this code and opt to ignore the warning.",
                  "markdown": "Reports cases when the first parameter,\nsuch as `self` or `cls`, is reassigned in a method.\nBecause in most cases, there are no objectives in such reassignment, the\nIDE indicates an error.\n\n**Example:**\n\n\n    class Account:\n        def calc(self, balance):\n            if balance == 0:\n                self = balance\n            return self\n\nAs a fix, you might want to check and modify the algorithm to ensure that reassignment is needed. If everything is correct,\nyou can invoke intention actions for this code and opt to ignore the warning."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyMethodFirstArgAssignment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNewStyleGenericSyntaxInspection",
                "shortDescription": {
                  "text": "Invalid usage of new-style type parameters and type aliases"
                },
                "fullDescription": {
                  "text": "Reports invalid usage of PEP 695 type parameter syntax Finds the following problems in function and class definitions and new-style type alias statements: Extending typing.Generic in new-style generic classes Extending parameterized typing.Protocol in new-style generic classes Using generic upper bounds and constraints with type parameters for ParamSpec and TypeVarTuple Mixing traditional and new-style type variables Using traditional type variables in new-style type aliases Examples: 'from typing import Generic\n\n  class Example[T](Generic[T]): ... # Classes with type parameter list should not extend 'Generic'' 'class Example[T: (list[S], str)]: ... # Generic types are not allowed inside constraints and bounds of type parameters' 'from typing import TypeVar\n\n  K = TypeVar(\"K\")\n\n  class ClassC[V]:\n      def method2[M](self, a: M, b: K) -> M | K: ... # Mixing traditional and new-style TypeVars is not allowed'",
                  "markdown": "Reports invalid usage of [PEP 695](https://www.python.org/dev/peps/pep-0695/) type parameter syntax\n\n\nFinds the following problems in function and class definitions and new-style type alias statements:\n\n* Extending typing.Generic in new-style generic classes\n* Extending parameterized typing.Protocol in new-style generic classes\n* Using generic upper bounds and constraints with type parameters for ParamSpec and TypeVarTuple\n* Mixing traditional and new-style type variables\n* Using traditional type variables in new-style type aliases\n\n\nExamples:\n\n\n      from typing import Generic\n\n      class Example[T](Generic[T]): ... # Classes with type parameter list should not extend 'Generic'\n\n\n      class Example[T: (list[S], str)]: ... # Generic types are not allowed inside constraints and bounds of type parameters\n\n\n      from typing import TypeVar\n\n      K = TypeVar(\"K\")\n\n      class ClassC[V]:\n          def method2[M](self, a: M, b: K) -> M | K: ... # Mixing traditional and new-style TypeVars is not allowed\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyNewStyleGenericSyntax",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTupleAssignmentBalanceInspection",
                "shortDescription": {
                  "text": "Tuple assignment balance is incorrect"
                },
                "fullDescription": {
                  "text": "Reports cases when the number of expressions on the right-hand side and targets on the left-hand side are not the same. Example: 't = ('red', 'blue', 'green', 'white')\n(c1, c2, c3) = t' As a quick-fix, you can modify the highlighted code fragment to restore the tuple balance.",
                  "markdown": "Reports cases when the number of expressions on the right-hand side\nand targets on the left-hand side are not the same.\n\n**Example:**\n\n\n    t = ('red', 'blue', 'green', 'white')\n    (c1, c2, c3) = t\n\nAs a quick-fix, you can modify the highlighted code fragment to restore the tuple\nbalance."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTupleAssignmentBalance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassHasNoInitInspection",
                "shortDescription": {
                  "text": "Class has no `__init__` method"
                },
                "fullDescription": {
                  "text": "Reports cases in Python 2 when a class has no '__init__' method, neither its parent classes. Example: 'class Book():\n    pass' The quick-fix adds the '__init__' method: 'class Book():\n    def __init__(self):\n        pass'",
                  "markdown": "Reports cases in Python 2 when a class has no `__init__` method, neither its parent\nclasses.\n\n**Example:**\n\n\n    class Book():\n        pass\n\nThe quick-fix adds the `__init__` method:\n\n\n    class Book():\n        def __init__(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyClassHasNoInit",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentEqualDefaultInspection",
                "shortDescription": {
                  "text": "The function argument is equal to the default parameter value"
                },
                "fullDescription": {
                  "text": "Reports a problem when an argument passed to the function is equal to the default parameter value. This inspection is disabled by default to avoid performance degradation. Example: 'def my_function(a: int = 2):\n    print(a)\n\n\nmy_function(2)'",
                  "markdown": "Reports a problem when an argument\npassed to the function is equal to the default parameter value.\n\nThis inspection is disabled by default to avoid performance degradation.\n\n**Example:**\n\n\n    def my_function(a: int = 2):\n        print(a)\n\n\n    my_function(2)\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyArgumentEqualDefault",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassVarInspection",
                "shortDescription": {
                  "text": "Invalid usage of ClassVar variables"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of ClassVar annotations. Example: 'from typing import ClassVar\n\n\nclass Cat:\n    color: ClassVar[str] = \"white\"\n    weight: int\n\n    def __init__(self, weight: int):\n        self.weight = weight\n\n\nCat.color = \"black\"  # OK\nmy_cat = Cat(5)\nmy_cat.color = \"gray\"  # Error, setting class variable on instance'",
                  "markdown": "Reports invalid usages of [ClassVar](https://docs.python.org/3/library/typing.html#typing.ClassVar) annotations.\n\n**Example:**\n\n\n    from typing import ClassVar\n\n\n    class Cat:\n        color: ClassVar[str] = \"white\"\n        weight: int\n\n        def __init__(self, weight: int):\n            self.weight = weight\n\n\n    Cat.color = \"black\"  # OK\n    my_cat = Cat(5)\n    my_cat.color = \"gray\"  # Error, setting class variable on instance\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyClassVar",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyFromFutureImportInspection",
                "shortDescription": {
                  "text": "Improper position of from __future__ import"
                },
                "fullDescription": {
                  "text": "Reports 'from __future__ import' statements that are used not at the beginning of a file. Example: 'a = 1\nfrom __future__ import print_function\nprint()' When the quick-fix is applied, the code changes to: 'from __future__ import print_function\n\na = 1\nprint()'",
                  "markdown": "Reports `from __future__ import`\nstatements that are used not at\nthe beginning of a file.\n\n**Example:**\n\n\n    a = 1\n    from __future__ import print_function\n    print()\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    from __future__ import print_function\n\n    a = 1\n    print()\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyFromFutureImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnresolvedReferencesInspection",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports references in your code that cannot be resolved. In a dynamically typed language, this is possible in a limited number of cases. If a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be: 'def print_string(s):\n  print(s.abc())' In this code fragment 's' is always a string and 'abc' should be highlighted as unresolved. However, 's' type is inferred as 'Any' and no warning is reported. The IDE provides quick-fix actions to add missing references on-the-fly.",
                  "markdown": "Reports references in your code that cannot be resolved.\n\nIn a dynamically typed language, this is possible in a limited number of cases.\n\nIf a reference type is unknown, then its attributes are not highlighted as unresolved even if you know that they should be:\n\n\n    def print_string(s):\n      print(s.abc())\n\nIn this code fragment `s` is always a string and `abc` should be highlighted as unresolved. However, `s`\ntype is inferred as `Any` and no warning is reported.\n\nThe IDE provides quick-fix actions to add missing references on-the-fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyUnresolvedReferences",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPackageRequirementsInspection",
                "shortDescription": {
                  "text": "Unsatisfied package requirements"
                },
                "fullDescription": {
                  "text": "Reports packages mentioned in requirements files (for example, 'requirements.txt' or 'Pipfile') but not installed, or imported but not mentioned in requirements files. The IDE shows a quick-fix banner so that you can install the missing packages in one click.",
                  "markdown": "Reports packages mentioned in requirements files (for example, `requirements.txt` or `Pipfile`) but not installed,\nor imported but not mentioned in requirements files.\n\n\nThe IDE shows a quick-fix banner so that you can install the missing packages in one click."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyPackageRequirements",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyTrailingSemicolonInspection",
                "shortDescription": {
                  "text": "Prohibited trailing semicolon in a statement"
                },
                "fullDescription": {
                  "text": "Reports trailing semicolons in statements. Example: 'def my_func(a):\n    c = a ** 2;\n    return c' IDE provides a quick-fix that removes a trailing semicolon. When you apply it, the code changes to: 'def my_func(a):\n    c = a ** 2\n    return c'",
                  "markdown": "Reports trailing semicolons in statements.\n\n**Example:**\n\n\n    def my_func(a):\n        c = a ** 2;\n        return c\n\nIDE provides a quick-fix that removes a trailing semicolon. When you\napply it, the code changes to:\n\n\n    def my_func(a):\n        c = a ** 2\n        return c\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyTrailingSemicolon",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedundantParenthesesInspection",
                "shortDescription": {
                  "text": "Redundant parentheses"
                },
                "fullDescription": {
                  "text": "Reports about redundant parentheses in expressions. The IDE provides the quick-fix action to remove the redundant parentheses.",
                  "markdown": "Reports about redundant parentheses in expressions.\n\nThe IDE provides the quick-fix action to remove the redundant parentheses."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyRedundantParentheses",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyArgumentListInspection",
                "shortDescription": {
                  "text": "Incorrect call arguments"
                },
                "fullDescription": {
                  "text": "Reports discrepancies between declared parameters and actual arguments, as well as incorrect arguments, for example, duplicate named arguments, and incorrect argument order. Example: 'class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__() # unfilled parameter\nbar(5, \"#\") # unexpected argument' The correct code fragment looks at follows: 'class Foo:\n    def __call__(self, p1: int, *, p2: str = \"%\"):\n        return p2 * p1\n\n\nbar = Foo()\nbar.__call__(5)\nbar(5, p2=\"#\")'",
                  "markdown": "Reports discrepancies between declared parameters and actual arguments, as well as\nincorrect arguments, for example, duplicate named arguments, and incorrect argument order.\n\n**Example:**\n\n\n    class Foo:\n        def __call__(self, p1: int, *, p2: str = \"%\"):\n            return p2 * p1\n\n\n    bar = Foo()\n    bar.__call__() # unfilled parameter\n    bar(5, \"#\") # unexpected argument\n\nThe correct code fragment looks at follows:\n\n\n    class Foo:\n        def __call__(self, p1: int, *, p2: str = \"%\"):\n            return p2 * p1\n\n\n    bar = Foo()\n    bar.__call__(5)\n    bar(5, p2=\"#\")\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyArgumentList",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyInterpreterInspection",
                "shortDescription": {
                  "text": "An invalid interpreter"
                },
                "fullDescription": {
                  "text": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly configured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features. The IDE provides quick access to the interpreter settings.",
                  "markdown": "Reports problems if there is no Python interpreter configured for the project or if the interpreter is invalid. Without a properly\nconfigured interpreter, you cannot execute your Python scripts and benefit from some Python code insight features.\n\nThe IDE provides quick access to the interpreter settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyInterpreter",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyAccessInspection",
                "shortDescription": {
                  "text": "Inappropriate access to properties"
                },
                "fullDescription": {
                  "text": "Reports cases when properties are accessed inappropriately: Read-only properties are set Write-only properties are read Non-deletable properties are deleted Example: 'class MyClass:\n    @property\n    def read_only(self): return None\n\n    def __write_only_setter(self, value): pass\n\n    write_only = property(None, __write_only_setter)\n\n\na = MyClass()\na.read_only = 10 # property cannot be set\ndel a.read_only # property cannot be deleted\nprint(a.write_only) # property cannot be read'",
                  "markdown": "Reports cases when properties are accessed inappropriately:\n\n* Read-only properties are set\n* Write-only properties are read\n* Non-deletable properties are deleted\n\n**Example:**\n\n\n    class MyClass:\n        @property\n        def read_only(self): return None\n\n        def __write_only_setter(self, value): pass\n\n        write_only = property(None, __write_only_setter)\n\n\n    a = MyClass()\n    a.read_only = 10 # property cannot be set\n    del a.read_only # property cannot be deleted\n    print(a.write_only) # property cannot be read\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyPropertyAccess",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesAdvertiser",
                "shortDescription": {
                  "text": "Stub packages advertiser"
                },
                "fullDescription": {
                  "text": "Reports availability of stub packages. Stub package is a package that contains type information for the corresponding runtime package. Using stub packages ensures better coding assistance for the corresponding python package.",
                  "markdown": "Reports availability of stub packages.\n\n\n[Stub package](https://www.python.org/dev/peps/pep-0561/) is a package that contains type information for the corresponding\nruntime package.\n\nUsing stub packages ensures better coding assistance for the corresponding python package."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyStubPackagesAdvertiser",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRelativeImportInspection",
                "shortDescription": {
                  "text": "Suspicious relative imports"
                },
                "fullDescription": {
                  "text": "Reports usages of relative imports inside plain directories, for example, directories neither containing '__init__.py' nor explicitly marked as namespace packages.",
                  "markdown": "Reports usages of relative imports inside plain directories, for example, directories neither containing `__init__.py` nor\nexplicitly marked as namespace packages."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyPackages",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyRedeclarationInspection",
                "shortDescription": {
                  "text": "Redeclared names without usages"
                },
                "fullDescription": {
                  "text": "Reports unconditional redeclarations of names without being used in between. Example: 'def x(): pass\n\n\nx = 2' It applies to function and class declarations, and top-level assignments. When the warning is shown, you can try a recommended action, for example, you might be prompted to rename the variable.",
                  "markdown": "Reports unconditional redeclarations of names without being used in between.\n\n**Example:**\n\n\n    def x(): pass\n\n\n    x = 2\n\nIt applies to function and class declarations, and top-level assignments.\n\nWhen the warning is shown, you can try a recommended action, for example, you might be prompted to\nrename the variable."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyRedeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyStubPackagesCompatibilityInspection",
                "shortDescription": {
                  "text": "Incompatible stub packages"
                },
                "fullDescription": {
                  "text": "Reports stub packages that do not support the version of the corresponding runtime package. A stub package contains type information for some runtime package.",
                  "markdown": "Reports stub packages that do not support the version of the corresponding runtime package.\n\nA [stub package](https://www.python.org/dev/peps/pep-0561/) contains type information for some runtime package."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyStubPackagesCompatibility",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyProtectedMemberInspection",
                "shortDescription": {
                  "text": "Accessing a protected member of a class or a module"
                },
                "fullDescription": {
                  "text": "Reports cases when a protected member is accessed outside the class, a descendant of the class where it is defined, or a module. Example: 'class Foo:\n    def _protected_method(self):\n        pass\n\n\nclass Bar(Foo):\n    def public_method(self):\n        self._protected_method()\n\n\nfoo = Foo()\nfoo._protected_method() # Access to a protected method'",
                  "markdown": "Reports cases when a protected member is accessed outside the class,\na descendant of the class where it is defined, or a module.\n\n**Example:**\n\n\n    class Foo:\n        def _protected_method(self):\n            pass\n\n\n    class Bar(Foo):\n        def public_method(self):\n            self._protected_method()\n\n\n    foo = Foo()\n    foo._protected_method() # Access to a protected method\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyProtectedMember",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyUnboundLocalVariableInspection",
                "shortDescription": {
                  "text": "Unbound local variables"
                },
                "fullDescription": {
                  "text": "Reports local variables referenced before assignment. Example: 'x = 0\nif x > 10:\n    b = 3\nprint(b)' The IDE reports a problem for 'print(b)'. A possible fix is: 'x = 0\nif x > 10:\n    b = 3\n    print(b)'",
                  "markdown": "Reports local variables referenced before assignment.\n\n**Example:**\n\n\n    x = 0\n    if x > 10:\n        b = 3\n    print(b)\n\nThe IDE reports a problem for `print(b)`. A possible fix is:\n\n\n    x = 0\n    if x > 10:\n        b = 3\n        print(b)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyUnboundLocalVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNamedTupleInspection",
                "shortDescription": {
                  "text": "Invalid definition of 'typing.NamedTuple'"
                },
                "fullDescription": {
                  "text": "Reports invalid definition of a typing.NamedTuple. Example: 'import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    last: str = \"\"\n    middle: str' As a fix, place the field with the default value after the fields without default values: 'import typing\n\n\nclass FullName(typing.NamedTuple):\n    first: str\n    middle: str\n    last: str = \"\"'",
                  "markdown": "Reports invalid definition of a\n[typing.NamedTuple](https://docs.python.org/3/library/typing.html#typing.NamedTuple).\n\n**Example:**\n\n\n    import typing\n\n\n    class FullName(typing.NamedTuple):\n        first: str\n        last: str = \"\"\n        middle: str\n\nAs a fix, place the field with the default value after the fields without default values:\n\n\n    import typing\n\n\n    class FullName(typing.NamedTuple):\n        first: str\n        middle: str\n        last: str = \"\"\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyNamedTuple",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyNestedDecoratorsInspection",
                "shortDescription": {
                  "text": "Problematic nesting of decorators"
                },
                "fullDescription": {
                  "text": "Reports problems with nesting decorators. The inspection highlights the cases when 'classmethod' or 'staticmethod' is applied before another decorator. Example: 'def innocent(f):\n    return f\n\n\nclass A:\n    @innocent  # Decorator will not receive a callable it may expect\n    @classmethod\n    def f2(cls):\n        pass\n\n    @innocent  # Decorator will not receive a callable it may expect\n    @staticmethod\n    def f1():\n        pass' As a quick-fix, the IDE offers to remove the decorator.",
                  "markdown": "Reports problems with nesting decorators. The inspection highlights the cases when `classmethod` or `staticmethod`\nis applied before another decorator.\n\n**Example:**\n\n\n    def innocent(f):\n        return f\n\n\n    class A:\n        @innocent  # Decorator will not receive a callable it may expect\n        @classmethod\n        def f2(cls):\n            pass\n\n        @innocent  # Decorator will not receive a callable it may expect\n        @staticmethod\n        def f1():\n            pass\n\nAs a quick-fix, the IDE offers to remove the decorator."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyNestedDecorators",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyOverloadsInspection",
                "shortDescription": {
                  "text": "Overloads in regular Python files"
                },
                "fullDescription": {
                  "text": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are not compatible with the implementation. Example: 'from typing import overload\n\n\n@overload\ndef foo(p1, p2): # Overload signature is not compatible with the implementation\n    pass\n\n\n@overload\ndef foo(p1): # Overload signature is not compatible with the implementation\n    pass\n\n\ndef foo(p1, p2, p3):\n    print(p1, p2, p3)'",
                  "markdown": "Reports cases when overloads in regular Python files are placed after the implementation or when their signatures are\nnot compatible with the implementation.\n\n**Example:**\n\n\n    from typing import overload\n\n\n    @overload\n    def foo(p1, p2): # Overload signature is not compatible with the implementation\n        pass\n\n\n    @overload\n    def foo(p1): # Overload signature is not compatible with the implementation\n        pass\n\n\n    def foo(p1, p2, p3):\n        print(p1, p2, p3)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyOverloads",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyExceptClausesOrderInspection",
                "shortDescription": {
                  "text": "Wrong order of 'except' clauses"
                },
                "fullDescription": {
                  "text": "Reports cases when 'except' clauses are not in the proper order, from the more specific to the more generic, or one exception class is caught twice. If you do not fix the order, some exceptions may not be caught by the most specific handler. Example: 'try:\n    call()\nexcept ValueError:\n    pass\nexcept UnicodeError:\n    pass' The IDE recommends moving the clause up. When the quick-fix is applied, the code changes to: 'try:\n    call()\nexcept UnicodeError:\n    pass\nexcept ValueError:\n    pass'",
                  "markdown": "Reports cases when `except` clauses are not in the proper order,\nfrom the more specific to the more generic, or one exception class is caught twice.\n\n\nIf you do not fix the order, some exceptions may not be caught by the most specific handler.\n\n**Example:**\n\n\n    try:\n        call()\n    except ValueError:\n        pass\n    except UnicodeError:\n        pass\n\nThe IDE recommends moving the clause up. When the quick-fix is applied, the code changes to:\n\n\n    try:\n        call()\n    except UnicodeError:\n        pass\n    except ValueError:\n        pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyExceptClausesOrder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyDataclassInspection",
                "shortDescription": {
                  "text": "Invalid definition and usage of Data Classes"
                },
                "fullDescription": {
                  "text": "Reports invalid definitions and usages of classes created with 'dataclasses' or 'attr' modules. Example: 'import dataclasses\n\n\n@dataclasses.dataclass\nclass FullName:\n    first: str\n    middle: str = \"\"\n    last: str'",
                  "markdown": "Reports invalid definitions and usages of classes created with\n`dataclasses` or `attr` modules.\n\n**Example:**\n\n\n    import dataclasses\n\n\n    @dataclasses.dataclass\n    class FullName:\n        first: str\n        middle: str = \"\"\n        last: str\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyDataclass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyClassicStyleClassInspection",
                "shortDescription": {
                  "text": "Classic style class usage"
                },
                "fullDescription": {
                  "text": "Reports classic style classes usage. This inspection applies only to Python 2. Example: 'class A:\n    pass' With quick-fixes provided by the IDE, this code fragment changes to: 'class A(object):\n    def __init__(self):\n        pass'",
                  "markdown": "Reports [classic style classes](https://docs.python.org/2/reference/datamodel.html#new-style-and-classic-classes) usage. This inspection applies only to Python 2.\n\n**Example:**\n\n\n    class A:\n        pass\n\nWith quick-fixes provided by the IDE, this code fragment changes to:\n\n\n    class A(object):\n        def __init__(self):\n            pass\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyClassicStyleClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyPropertyDefinitionInspection",
                "shortDescription": {
                  "text": "Incorrect property definition"
                },
                "fullDescription": {
                  "text": "Reports problems with the arguments of 'property()' and functions annotated with '@property'. 'class C:\n    @property\n    def abc(self):  # Getter should return or yield something\n        pass\n\n    @abc.setter\n    def foo(self, value):  # Names of function and decorator don't match\n        pass\n\n    @abc.setter\n    def abc(self, v1, v2):  # Setter signature should be (self, value)\n        pass\n\n    @abc.deleter\n    def abc(self, v1):  # Delete signature should be (self)\n        pass' A quick-fix offers to update parameters.",
                  "markdown": "Reports problems with the arguments of `property()` and functions\nannotated with `@property`.\n\n\n    class C:\n        @property\n        def abc(self):  # Getter should return or yield something\n            pass\n\n        @abc.setter\n        def foo(self, value):  # Names of function and decorator don't match\n            pass\n\n        @abc.setter\n        def abc(self, v1, v2):  # Setter signature should be (self, value)\n            pass\n\n        @abc.deleter\n        def abc(self, v1):  # Delete signature should be (self)\n            pass\n\nA quick-fix offers to update parameters."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PyPropertyDefinition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyIncorrectDocstringInspection",
                "shortDescription": {
                  "text": "Incorrect docstring"
                },
                "fullDescription": {
                  "text": "Reports mismatched parameters in a docstring. For example, 'b' is highlighted, because there is no such a parameter in the 'add' function. 'def add(a, c):\n    \"\"\"\n    @param a:\n    @param b:\n    @return:\n    \"\"\"\n    pass' The inspection does not warn you of missing parameters if none of them is mentioned in a docstring: 'def mult(a, c):\n    \"\"\"\n    @return:\n    \"\"\"\n    pass'",
                  "markdown": "Reports mismatched parameters in a docstring. For example, `b` is highlighted, because there is no\nsuch a parameter in the `add` function.\n\n\n        def add(a, c):\n        \"\"\"\n        @param a:\n        @param b:\n        @return:\n        \"\"\"\n        pass\n\nThe inspection does not warn you of missing parameters if none of them is mentioned in a docstring:\n\n\n    def mult(a, c):\n        \"\"\"\n        @return:\n        \"\"\"\n        pass\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyIncorrectDocstring",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PyListCreationInspection",
                "shortDescription": {
                  "text": "Non-optimal list declaration"
                },
                "fullDescription": {
                  "text": "Reports cases when a list declaration can be rewritten with a list literal. This ensures better performance of your application. Example: 'l = [1]\nl.append(2)' When the quick-fix is applied, the code changes to: 'l = [1, 2]'",
                  "markdown": "Reports cases when a list declaration\ncan be rewritten with a list literal.\n\nThis ensures better performance of your application.\n\n**Example:**\n\n\n    l = [1]\n    l.append(2)\n\nWhen the quick-fix is applied, the code changes to:\n\n\n    l = [1, 2]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "PyListCreation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Python",
                      "index": 2,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.restClient",
            "version": "243.6317",
            "rules": [
              {
                "id": "HttpRequestCustomHttpMethodInspection",
                "shortDescription": {
                  "text": "Unknown HTTP method"
                },
                "fullDescription": {
                  "text": "Reports possible custom HTTP methods. The quick fix suggests adding the custom HTTP method to project settings.",
                  "markdown": "Reports possible custom HTTP methods. The quick fix suggests adding the custom HTTP method to project settings."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestCustomHttpMethodInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestRequestSeparatorJsonBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in JSON body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected JSON body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request.",
                  "markdown": "Reports possible requests in injected JSON body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorJsonBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestWhitespaceInsideRequestTargetPath",
                "shortDescription": {
                  "text": "Whitespace in URL in request"
                },
                "fullDescription": {
                  "text": "Highlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action.",
                  "markdown": "Highlights spaces inside URL path segments. HTTP Client will ignore them. For better composing use Split Lines action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestWhitespaceInsideRequestTargetPath",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientUnresolvedAuthId",
                "shortDescription": {
                  "text": "Unresolved Auth identifier"
                },
                "fullDescription": {
                  "text": "Highlights references to non-existent Auth configurations. Suggests creating a new one in the current environment.",
                  "markdown": "Highlights references to non-existent Auth configurations. Suggests creating a new one in the current environment."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "HttpClientUnresolvedAuthId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestEnvironmentAuthConfigurationValidationInspection",
                "shortDescription": {
                  "text": "Auth configuration validation"
                },
                "fullDescription": {
                  "text": "Reports Auth configuration the following problems in HTTP Client environment files: Missing properties in Auth configuration Auth/Security configuration placed in private environment file",
                  "markdown": "Reports Auth configuration the following problems in HTTP Client environment files:\n\n* Missing properties in Auth configuration\n* Auth/Security configuration placed in private environment file"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestEnvironmentAuthConfigurationValidationInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestContentLengthIsIgnored",
                "shortDescription": {
                  "text": "Redundant 'Content-Length'"
                },
                "fullDescription": {
                  "text": "Reports an explicitly set 'Content-Length' header. The header is redundant because HTTP Client uses the actual request body length.",
                  "markdown": "Reports an explicitly set `Content-Length` header. The header is redundant because HTTP Client uses the actual request body length."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestContentLengthIsIgnored",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestRequestSeparatorXmlBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in HTML/XML body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected XML/HTML body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request.",
                  "markdown": "Reports possible requests in injected XML/HTML body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorXmlBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectHttpHeaderInspection",
                "shortDescription": {
                  "text": "Incorrect HTTP header"
                },
                "fullDescription": {
                  "text": "Reports unknown HTTP headers that do not match any publicly known headers. The quick fix suggests adding the header to the list of custom headers when the Use custom HTTP headers option is enabled. HTTP headers from the list of custom headers will not trigger the inspection.",
                  "markdown": "Reports unknown HTTP headers that do not match any [publicly\nknown headers](https://www.iana.org/assignments/message-headers/message-headers.xml). The quick fix suggests adding the header to the list of custom headers when the **Use custom HTTP headers** option\nis enabled. HTTP headers from the list of custom headers will not trigger the inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IncorrectHttpHeaderInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientInappropriateProtocolUsageInspection",
                "shortDescription": {
                  "text": "Inappropriate HTTP Protocol usage"
                },
                "fullDescription": {
                  "text": "Reports inappropriate usage of HTTP protocol keyword, e.g. 'HTTP/2', with non-HTTP method requests. Such a usage will be ignored.",
                  "markdown": "Reports inappropriate usage of HTTP protocol keyword, e.g. `HTTP/2`, with non-HTTP method requests. Such a usage will be ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpClientInappropriateProtocolUsageInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestPlaceholder",
                "shortDescription": {
                  "text": "'$placeholder' in HTTP Request"
                },
                "fullDescription": {
                  "text": "Reports a '$placeholder' inside a request. A '$placeholder' to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping '/aaaa/*/bbb' will be generated as 'GET localhost/aaaa/{{$placeholder}}/bbb'.",
                  "markdown": "Reports a `$placeholder` inside a request.\n\nA `$placeholder` to be replaced by the user is created automatically when a tool cannot recognize a part of a request. For example, a request mapping `/aaaa/*/bbb` will be generated as `GET localhost/aaaa/{{$placeholder}}/bbb`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpRequestPlaceholder",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpClientUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved environment variable"
                },
                "fullDescription": {
                  "text": "Reports variables undeclared in the current environment HTTP Client. Executing requests with undeclared variables probably fail. Consider adding a variable to the environment or selecting an environment with this variable. Inspection doesn't report variables in request bodies, because it can be a valid syntax of the body. Some variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via 'client.global.set' or 'request.variables.set' functions call.",
                  "markdown": "Reports variables undeclared in the current environment HTTP Client.\n\n\nExecuting requests with undeclared variables probably fail.\nConsider adding a variable to the environment or selecting an environment with this variable.\n\nInspection doesn't report variables in request bodies, because it can be a valid syntax of the body.\n\n\nSome variables may be not reported as unresolved, because they are declared in response or pre-request handler scripts via\n`client.global.set` or `request.variables.set` functions call."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HttpClientUnresolvedVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpRequestRequestSeparatorYamlBodyInspection",
                "shortDescription": {
                  "text": "Missing request separator in YAML body"
                },
                "fullDescription": {
                  "text": "Reports possible requests in injected YAML body where request separator '###' is missing. The quick fix suggests adding the separator '###' before the request.",
                  "markdown": "Reports possible requests in injected YAML body where request separator `###` is missing. The quick fix suggests adding the separator `###` before the request."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpRequestRequestSeparatorYamlBodyInspection",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTTP Client",
                      "index": 3,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HttpUrlsUsage",
                "shortDescription": {
                  "text": "Link with unencrypted protocol"
                },
                "fullDescription": {
                  "text": "Reports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks are dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS, instead. See HTTPS: Difference from HTTP (wikipedia.org).",
                  "markdown": "Reports the links that use unencrypted protocols (such as HTTP), which can expose your data to man-in-the-middle attacks. These attacks\nare dangerous in general and may be especially harmful for artifact repositories. Use protocols with encryption, such as HTTPS,\ninstead.\n\nSee [HTTPS: Difference from HTTP (wikipedia.org)](https://en.wikipedia.org/wiki/HTTPS#Difference_from_HTTP)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HttpUrlsUsage",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Security",
                      "index": 80,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "AngularJS",
            "version": "243.6317",
            "rules": [
              {
                "id": "AngularNgOptimizedImage",
                "shortDescription": {
                  "text": "Issues with ngSrc usage in img tags"
                },
                "fullDescription": {
                  "text": "Reports issues related to usage of 'ngSrc' (NgOptimizedDirective) on 'img' tags. Following issues are reported: 'img' tags, which use 'src' instead of 'ngSrc' lack of 'width' and 'height', or 'fill' attributes when 'ngSrc' is used 'width' or 'height', and 'fill' attributes being present on the same element when 'ngSrc' is used",
                  "markdown": "Reports issues related to usage of `ngSrc` ([NgOptimizedDirective](https://angular.io/guide/image-directive)) on `img` tags.\n\n\nFollowing issues are reported:\n\n* `img` tags, which use `src` instead of `ngSrc`\n* lack of `width` and `height`, or `fill` attributes when `ngSrc` is used\n* `width` or `height`, and `fill` attributes being present on the same element when `ngSrc` is used"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "AngularNgOptimizedImage",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularIncorrectBlockUsage",
                "shortDescription": {
                  "text": "Incorrect usage of Angular block"
                },
                "fullDescription": {
                  "text": "Reports problems with Angular blocks.",
                  "markdown": "Reports problems with Angular blocks."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularIncorrectBlockUsage",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidTemplateReferenceVariable",
                "shortDescription": {
                  "text": "Unbound or ambiguous template reference variable"
                },
                "fullDescription": {
                  "text": "Reports a template reference variable that is not assigned to a directive when using 'exportAs' or is assigned to multiple directives.",
                  "markdown": "Reports a template reference variable that is not assigned to a directive when using `exportAs` or is assigned to multiple directives."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidTemplateReferenceVariable",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMultipleStructuralDirectives",
                "shortDescription": {
                  "text": "Multiple structural directives on one element"
                },
                "fullDescription": {
                  "text": "Reports multiple structural directives ('*ngIf', '*ngFor', etc.) on one element.",
                  "markdown": "Reports multiple structural directives (`*ngIf`, `*ngFor`, etc.) on one element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMultipleStructuralDirectives",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUnresolvedPipe",
                "shortDescription": {
                  "text": "Unresolved pipe"
                },
                "fullDescription": {
                  "text": "Reports an unresolved pipe.",
                  "markdown": "Reports an unresolved pipe."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUnresolvedPipe",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularCliAddDependency",
                "shortDescription": {
                  "text": "Angular CLI add dependency"
                },
                "fullDescription": {
                  "text": "Suggests using the 'ng add' command to install the dependency. 'ng add' will use the package manager to download it and invoke a schematic which can update your project with configuration changes, add additional dependencies (e.g. polyfills), or scaffold package-specific initialization code.",
                  "markdown": "Suggests using the `ng add` command to install the dependency.\n\n`ng add` will use the package manager to download it and invoke a schematic\nwhich can update your project with configuration changes, add additional dependencies (e.g. polyfills),\nor scaffold package-specific initialization code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AngularCliAddDependency",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularDeferBlockOnTrigger",
                "shortDescription": {
                  "text": "Problems with @defer `on` triggers"
                },
                "fullDescription": {
                  "text": "Reports issues with triggers in `on` parameters in `@defer` block.",
                  "markdown": "Reports issues with triggers in \\`on\\` parameters in \\`@defer\\` block."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularDeferBlockOnTrigger",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInaccessibleSymbol",
                "shortDescription": {
                  "text": "Inaccessible component member or directive input"
                },
                "fullDescription": {
                  "text": "Reports access to invisible (private or protected) component member or directive input from an Angular template.",
                  "markdown": "Reports access to invisible (private or protected) component member or directive input from an Angular template."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInaccessibleSymbol",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMissingEventHandler",
                "shortDescription": {
                  "text": "Missing event handler"
                },
                "fullDescription": {
                  "text": "Reports a missing event handler statement for an event binding.",
                  "markdown": "Reports a missing event handler statement for an event binding."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMissingEventHandler",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUndefinedTag",
                "shortDescription": {
                  "text": "Undefined tag"
                },
                "fullDescription": {
                  "text": "Reports a tag defined by a component or directive out of the current scope.",
                  "markdown": "Reports a tag defined by a component or directive out of the current scope."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUndefinedTag",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUndefinedBinding",
                "shortDescription": {
                  "text": "Undefined binding"
                },
                "fullDescription": {
                  "text": "Reports an undefined property, event, or structural directive bindings on elements.",
                  "markdown": "Reports an undefined property, event, or structural directive bindings on elements."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUndefinedBinding",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidImportedOrDeclaredSymbol",
                "shortDescription": {
                  "text": "Invalid imported or declared symbol"
                },
                "fullDescription": {
                  "text": "Reports any symbol that is declared, imported or exported by an Angular module or standalone component that is not a module, component, directive, or pipe or can’t be used in the context of the property.",
                  "markdown": "Reports any symbol that is declared, imported or exported by an Angular module or standalone component that is not a module, component, directive, or pipe or can't be used in the context of the property."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidImportedOrDeclaredSymbol",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularAmbiguousComponentTag",
                "shortDescription": {
                  "text": "Ambiguous component tag"
                },
                "fullDescription": {
                  "text": "Reports a component that is matched on an embedded template element '<ng-template>' or multiple components matched on any other element.",
                  "markdown": "Reports a component that is matched on an embedded template element `<ng-template>` or multiple components matched on any other element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularAmbiguousComponentTag",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularUndefinedModuleExport",
                "shortDescription": {
                  "text": "Undefined export from Angular module"
                },
                "fullDescription": {
                  "text": "Reports an export of an undeclared or unimported component, directive, or pipes from an Angular module.",
                  "markdown": "Reports an export of an undeclared or unimported component, directive, or pipes from an Angular module."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularUndefinedModuleExport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidI18nAttribute",
                "shortDescription": {
                  "text": "Invalid i18n attribute"
                },
                "fullDescription": {
                  "text": "Reports a problem with a 'i18n-*' attribute.",
                  "markdown": "Reports a problem with a `i18n-*` attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AngularInvalidI18nAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularForBlockNonIterableVar",
                "shortDescription": {
                  "text": "Non-iterable type in @for block"
                },
                "fullDescription": {
                  "text": "Reports that the type of variable to iterate over does not have '[Symbol.iterator]()' method, which returns an iterator.",
                  "markdown": "Reports that the type of variable to iterate over does not have `[Symbol.iterator]()` method, which returns an iterator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularForBlockNonIterableVar",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularIncorrectTemplateDefinition",
                "shortDescription": {
                  "text": "Incorrect component template definition"
                },
                "fullDescription": {
                  "text": "Reports a component that doesn’t have an associated template or uses both 'template' and 'templateUrl' properties.",
                  "markdown": "Reports a component that doesn't have an associated template or uses both `template` and `templateUrl` properties."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularIncorrectTemplateDefinition",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularNonStandaloneComponentImports",
                "shortDescription": {
                  "text": "Invalid usage of imports in non-standalone components"
                },
                "fullDescription": {
                  "text": "Reports usages of imports property in non-standalone component decorators. Imports can be used only in standalone components.",
                  "markdown": "Reports usages of imports property in non-standalone component decorators. Imports can be used only in standalone components."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularNonStandaloneComponentImports",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMissingOrInvalidDeclarationInModule",
                "shortDescription": {
                  "text": "Missing or invalid component, directive or pipe declaration in a module"
                },
                "fullDescription": {
                  "text": "Reports a non-standalone Angular component, directive, or pipe that is not declared in any module or is declared in multiple modules.",
                  "markdown": "Reports a non-standalone Angular component, directive, or pipe that is not declared in any module or is declared in multiple modules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMissingOrInvalidDeclarationInModule",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidAnimationTriggerAssignment",
                "shortDescription": {
                  "text": "Invalid animation trigger assignment"
                },
                "fullDescription": {
                  "text": "Reports an invalid assignment of an animation trigger. To attach an animation to an element, use '[@triggerName]=\"expression\"' or an attribute without a value '@triggerName'.",
                  "markdown": "Reports an invalid assignment of an animation trigger. To attach an animation to an element, use `[@triggerName]=\"expression\"` or an attribute without a value `@triggerName`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidAnimationTriggerAssignment",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidEntryComponent",
                "shortDescription": {
                  "text": "Invalid entry component"
                },
                "fullDescription": {
                  "text": "Reports an invalid Angular component specified in the module’s 'bootstrap' or 'entryComponents' property.",
                  "markdown": "Reports an invalid Angular component specified in the module's `bootstrap` or `entryComponents` property."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidEntryComponent",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularRecursiveModuleImportExport",
                "shortDescription": {
                  "text": "Recursive import or export of an Angular module or a standalone component"
                },
                "fullDescription": {
                  "text": "Reports a cyclic dependency between Angular modules or standalone components.",
                  "markdown": "Reports a cyclic dependency between Angular modules or standalone components."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularRecursiveModuleImportExport",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInvalidSelector",
                "shortDescription": {
                  "text": "Missing or invalid selector"
                },
                "fullDescription": {
                  "text": "Reports an invalid 'selector' property of a component or directive.",
                  "markdown": "Reports an invalid `selector` property of a component or directive."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularInvalidSelector",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularBindingTypeMismatch",
                "shortDescription": {
                  "text": "Invalid binding type"
                },
                "fullDescription": {
                  "text": "Reports a mismatch between actual and expected directive binding type.",
                  "markdown": "Reports a mismatch between actual and expected directive binding type."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularBindingTypeMismatch",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularNonEmptyNgContent",
                "shortDescription": {
                  "text": "Content inside <ng-content> tag"
                },
                "fullDescription": {
                  "text": "Reports a text or tag occurrence inside a '<ng-content>' tag used for content projection.",
                  "markdown": "Reports a text or tag occurrence inside a `<ng-content>` tag used for content projection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularNonEmptyNgContent",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularMissingRequiredDirectiveInputBinding",
                "shortDescription": {
                  "text": "Missing required directive input"
                },
                "fullDescription": {
                  "text": "Reports a missing binding for a required directive input.",
                  "markdown": "Reports a missing binding for a required directive input."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "AngularMissingRequiredDirectiveInputBinding",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "AngularInsecureBindingToEvent",
                "shortDescription": {
                  "text": "Insecure binding to event"
                },
                "fullDescription": {
                  "text": "Reports a binding to an event property or attribute, for example, '[onclick]' or '[attr.onclick]' instead of '(click)'.",
                  "markdown": "Reports a binding to an event property or attribute, for example, `[onclick]` or `[attr.onclick]` instead of `(click)`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "AngularInsecureBindingToEvent",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Angular",
                      "index": 4,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.plugins.postcss",
            "version": "243.6317",
            "rules": [
              {
                "id": "PostCssCustomSelector",
                "shortDescription": {
                  "text": "Invalid custom selector"
                },
                "fullDescription": {
                  "text": "Reports a syntax error in PostCSS Custom Selector. Example: '@custom-selector :--heading h1, h2, h3;'",
                  "markdown": "Reports a syntax error in [PostCSS Custom Selector](https://github.com/postcss/postcss-custom-selectors).\n\nExample:\n\n\n    @custom-selector :--heading h1, h2, h3;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssCustomSelector",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssUnresolvedModuleValueReference",
                "shortDescription": {
                  "text": "Unresolved CSS module value"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a CSS Module Value ('@value' declaration). Example: '@value foo from unknown;'",
                  "markdown": "Reports an unresolved reference to a [CSS Module Value](https://github.com/css-modules/postcss-modules-values) (`@value` declaration).\n\nExample:\n\n\n    @value foo from unknown;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssUnresolvedModuleValueReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssNesting",
                "shortDescription": {
                  "text": "Invalid nested rule"
                },
                "fullDescription": {
                  "text": "Reports a nested style rule whose syntax doesn't comply with the PostCSS Nested or the PostCSS Nesting specification. Example: '.phone {\n  &_title {}\n}'",
                  "markdown": "Reports a nested style rule whose syntax doesn't comply with the [PostCSS Nested](https://github.com/postcss/postcss-nested) or the [PostCSS Nesting](https://github.com/csstools/postcss-nesting) specification.\n\nExample:\n\n\n    .phone {\n      &_title {}\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PostCssNesting",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssCustomMedia",
                "shortDescription": {
                  "text": "Invalid custom media"
                },
                "fullDescription": {
                  "text": "Reports a syntax error in a PostCSS Custom Media query. Example: '@custom-media --small-viewport (max-width: 30em);'",
                  "markdown": "Reports a syntax error in a [PostCSS Custom Media](https://github.com/postcss/postcss-custom-media) query.\n\nExample:\n\n\n    @custom-media --small-viewport (max-width: 30em);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssCustomMedia",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PostCssMediaRange",
                "shortDescription": {
                  "text": "Invalid media query range"
                },
                "fullDescription": {
                  "text": "Checks range context syntax, which may alternatively be used for media features with a 'range' type. Example: '@media screen and (500px <= width <= 1200px) {}'",
                  "markdown": "Checks [range context](https://github.com/postcss/postcss-media-minmax) syntax, which may alternatively be used for media features with a 'range' type.\n\nExample:\n\n\n    @media screen and (500px <= width <= 1200px) {}\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PostCssMediaRange",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostCSS",
                      "index": 5,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.sass",
            "version": "243.6317",
            "rules": [
              {
                "id": "SassScssUnresolvedMixin",
                "shortDescription": {
                  "text": "Unresolved mixin"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS mixin reference. Example: '* {\n  @include unknown-mixin;\n}'",
                  "markdown": "Reports an unresolved [Sass/SCSS mixin](https://sass-lang.com/documentation/at-rules/mixin) reference.\n\n**Example:**\n\n\n    * {\n      @include unknown-mixin;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SassScssUnresolvedMixin",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 6,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssResolvedByNameOnly",
                "shortDescription": {
                  "text": "Missing import"
                },
                "fullDescription": {
                  "text": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly imported in the current file. Example: '* {\n  margin: $var-in-other-file;\n}'",
                  "markdown": "Reports a reference to a variable, mixin, or function that is declared in another file but this file isn't explicitly [imported](https://sass-lang.com/documentation/at-rules/import) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: $var-in-other-file;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SassScssResolvedByNameOnly",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 6,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedPlaceholderSelector",
                "shortDescription": {
                  "text": "Unresolved placeholder selector"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS placeholder selector reference. Example: '* {\n  @extend %unknown-placeholder-selector;\n}'",
                  "markdown": "Reports an unresolved [Sass/SCSS placeholder selector](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      @extend %unknown-placeholder-selector;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SassScssUnresolvedPlaceholderSelector",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 6,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SassScssUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved variable"
                },
                "fullDescription": {
                  "text": "Reports an unresolved Sass/SCSS variable reference. Example: '* {\n  margin: $unknown-var;\n}'",
                  "markdown": "Reports an unresolved [Sass/SCSS variable](https://sass-lang.com/documentation/variables) reference.\n\n**Example:**\n\n\n    * {\n      margin: $unknown-var;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SassScssUnresolvedVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Sass_SCSS",
                      "index": 6,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "XPathView",
            "version": "243.6317",
            "rules": [
              {
                "id": "IndexZeroUsage",
                "shortDescription": {
                  "text": "XPath predicate with index 0"
                },
                "fullDescription": {
                  "text": "Reports usages of '0' in a predicate index or in a comparison with the function 'position()'. Such usage is almost always a bug because in XPath, the index starts at '1', not at '0'. Example: '//someelement[position() = 0]' or '//something[0]'",
                  "markdown": "Reports usages of `0` in a predicate index or in a comparison with the function `position()`. Such usage is almost always a bug because in XPath, the index starts at `1`, *not* at `0`.\n\n**Example:**\n\n\n      //someelement[position() = 0] or //something[0]\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IndexZeroUsage",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 7,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckNodeTest",
                "shortDescription": {
                  "text": "Unknown element or attribute name"
                },
                "fullDescription": {
                  "text": "Reports names of elements or attributes that are used in an XPath-expression but are missing in the associated XML files and are not defined in the referenced schemas. Such names are often the result of typos and would otherwise probably only be discovered at runtime. Example: '<xsl:template match=\"h:txtarea\" />' If the 'h' is bound to the XHTML namespace, the inspection will report this part of the 'match' expression as an unknown element name because the correct name of the element is \"textarea\".",
                  "markdown": "Reports names of elements or attributes that are used in an XPath-expression but are missing in the associated XML files and are not defined in the referenced schemas. Such names are often the result of typos and would otherwise probably only be discovered at runtime.\n\n**Example:**\n\n\n      <xsl:template match=\"h:txtarea\" />\n\n\nIf the `h` is bound to the XHTML namespace, the inspection will report this part of the `match` expression as an\nunknown element name because the correct name of the element is \"textarea\"."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckNodeTest",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 7,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XsltUnusedDeclaration",
                "shortDescription": {
                  "text": "Unused variable or parameter"
                },
                "fullDescription": {
                  "text": "Reports local variables and parameters that are never used.",
                  "markdown": "Reports local variables and parameters that are never used."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XsltUnusedDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 55,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XsltDeclarations",
                "shortDescription": {
                  "text": "Incorrect declaration"
                },
                "fullDescription": {
                  "text": "Reports duplicate declarations and illegal identifiers in XSLT variables, parameters, and named templates:",
                  "markdown": "Reports duplicate declarations and illegal identifiers in XSLT variables, parameters, and named templates:"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XsltDeclarations",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 55,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XsltVariableShadowing",
                "shortDescription": {
                  "text": "Shadowed variable"
                },
                "fullDescription": {
                  "text": "Reports shadowed XSLT variables.",
                  "markdown": "Reports shadowed XSLT variables."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XsltVariableShadowing",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 55,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HardwiredNamespacePrefix",
                "shortDescription": {
                  "text": "Hardcoded namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports comparisons of the 'name()' function with a string that contains a colon (':'). Such usages usually indicate a hardcoded namespace prefix in the comparison. As a result, the code will break when run against XML that uses another prefix for the same namespace. Example: '<xsl:if test=\"name() = 'xlink:href'\">...<xsl:if>'",
                  "markdown": "Reports comparisons of the `name()` function with a string that contains a colon (`:`). Such usages usually indicate a hardcoded namespace prefix in the comparison. As a result, the code will break when run against XML that uses another prefix for the same namespace.\n\n**Example:**\n\n\n      <xsl:if test=\"name() = 'xlink:href'\">...<xsl:if>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HardwiredNamespacePrefix",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 7,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantTypeConversion",
                "shortDescription": {
                  "text": "Redundant type conversion"
                },
                "fullDescription": {
                  "text": "Reports unnecessary type conversions. Type conversions are unnecessary when the argument type of a 'string()', 'number()', or 'boolean()' function is already the same as the function's return type or if the expected expression type is 'any'. Suggests removing the unnecessary conversion.",
                  "markdown": "Reports unnecessary type conversions. Type conversions are unnecessary when the argument type of a `string()`, `number()`, or `boolean()` function is already the same as the function's return type or if the expected expression type is `any`. Suggests removing the unnecessary conversion."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantTypeConversion",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 7,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XsltTemplateInvocation",
                "shortDescription": {
                  "text": "Incorrect template invocation"
                },
                "fullDescription": {
                  "text": "Reports missing arguments, passing arguments that are not declared, and passing arguments for parameters more than once in named XSLT template invocations. Parameters declared with a default value are optional and will not be reported as missing.",
                  "markdown": "Reports missing arguments, passing arguments that are not declared, and passing arguments for parameters more than once in named XSLT template invocations.\n\n\nParameters declared with a default value are optional and will not be reported as missing."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XsltTemplateInvocation",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XSLT",
                      "index": 55,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ImplicitTypeConversion",
                "shortDescription": {
                  "text": "Implicit type conversion"
                },
                "fullDescription": {
                  "text": "Reports implicit conversions between the predefined XPath-types 'STRING', 'NUMBER', 'BOOLEAN', and 'NODESET'. Helps to write XSLT scripts that are more expressive about types and prevents subtle bugs: Example: '<xsl:if test=\"foo\" />' is not the same as '<xsl:if test=\"string(foo)\" />' The first test checks whether the element \"foo\" exists ('count(foo) > 0)'; the latter one however is only true if the element actually contains any text ('string-length(foo) > 0'). Suggests making the type conversion more explicit. Use the following options to configure the inspection: Enable or disable implicit conversions between certain types Always report explicit conversions that do not result in the actually expected type, for example, '<xsl:if test=\"number(foo)\" />' Ignore conversion from 'NODESET' to 'BOOLEAN' by using the 'string()' function as a shortcut for writing 'string-length() > 0'.",
                  "markdown": "Reports implicit conversions between the predefined XPath-types `STRING`, `NUMBER`, `BOOLEAN`, and `NODESET`. Helps to write XSLT scripts that are more expressive about types and prevents subtle bugs:\n\n**Example:**\n\n\n      <xsl:if test=\"foo\" />\n\nis not the same as\n\n\n      <xsl:if test=\"string(foo)\" />\n\n\nThe first test checks whether the element \"foo\" exists (`count(foo) > 0)`; the latter one however is only\ntrue if the element actually contains any text (`string-length(foo) > 0`). Suggests making\nthe type conversion more explicit.\n\n\nUse the following options to configure the inspection:\n\n* Enable or disable implicit conversions between certain types\n* Always report explicit conversions that do not result in the actually expected type, for example, `<xsl:if test=\"number(foo)\" />`\n* Ignore conversion from `NODESET` to `BOOLEAN` by using the `string()` function as a shortcut for writing `string-length() > 0`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ImplicitTypeConversion",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XPath",
                      "index": 7,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.sh",
            "version": "243.6317",
            "rules": [
              {
                "id": "ShellCheck",
                "shortDescription": {
                  "text": "ShellCheck"
                },
                "fullDescription": {
                  "text": "Reports shell script bugs detected by the integrated ShellCheck static analysis tool.",
                  "markdown": "Reports shell script bugs detected by the integrated [ShellCheck](https://github.com/koalaman/shellcheck) static analysis tool."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ShellCheck",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Shell script",
                      "index": 8,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "name.kropp.intellij.makefile",
            "version": "243.6317",
            "rules": [
              {
                "id": "MakefileUnresolvedPrerequisite",
                "shortDescription": {
                  "text": "Unresolved prerequisite"
                },
                "fullDescription": {
                  "text": "Reports unresolved target prerequisites",
                  "markdown": "Reports unresolved target prerequisites"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MakefileUnresolvedPrerequisite",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Makefile",
                      "index": 10,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Karma",
            "version": "243.6317",
            "rules": [
              {
                "id": "KarmaConfigFile",
                "shortDescription": {
                  "text": "Invalid Karma configuration file"
                },
                "fullDescription": {
                  "text": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, 'karma.conf.js'.",
                  "markdown": "Reports a potential error in a file path ('basePath', 'files') for a Karma configuration file, for example, `karma.conf.js`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "KarmaConfigFile",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Unit testing",
                      "index": 9,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.clion",
            "version": "243.6317",
            "rules": [
              {
                "id": "CMakeMismatchedCommandArguments",
                "shortDescription": {
                  "text": "Mismatched command arguments"
                },
                "fullDescription": {
                  "text": "Reports mismatched arguments in opening- and closing commands. Example: 'if (A)\nendif (B)'",
                  "markdown": "Reports mismatched arguments in opening- and closing commands.\n\n**Example:**\n\n\n    if (A)\n    endif (B)\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CMakeMismatchedCommandArguments",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CMake/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CMakeDeprecatedCommands",
                "shortDescription": {
                  "text": "Deprecated command used"
                },
                "fullDescription": {
                  "text": "Reports a usage of a deprecated command.",
                  "markdown": "Reports a usage of a deprecated command."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CMakeDeprecatedCommands",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CMake/General",
                      "index": 12,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OCGlobalDFAInspection",
                "shortDescription": {
                  "text": "Interprocedural analysis"
                },
                "fullDescription": {
                  "text": "Interprocedural summary-based static code analysis",
                  "markdown": "Interprocedural summary-based static code analysis"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "OCGlobalDFAInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "C_C++/Data Flow Analysis",
                      "index": 15,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij",
            "version": "243.6317",
            "rules": [
              {
                "id": "JsonSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated JSON property"
                },
                "fullDescription": {
                  "text": "Reports a deprecated property in a JSON file. Note that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'.",
                  "markdown": "Reports a deprecated property in a JSON file.  \nNote that deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard extension 'deprecationMessage'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "JsonSchemaDeprecation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 13,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaRefReference",
                "shortDescription": {
                  "text": "Unresolved '$ref' and '$schema' references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved '$ref' or '$schema' path in a JSON schema.",
                  "markdown": "Reports an unresolved `$ref` or `$schema` path in a JSON schema.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonSchemaRefReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 13,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownBooleanAttribute",
                "shortDescription": {
                  "text": "Incorrect boolean attribute"
                },
                "fullDescription": {
                  "text": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an HTML non-boolean attribute without a value. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownBooleanAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicatedCode",
                "shortDescription": {
                  "text": "Duplicated code fragment"
                },
                "fullDescription": {
                  "text": "Reports duplicated blocks of code from the selected scope: the same file or the entire project. The inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window. The inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs. You can also configure the constructs that you want to anonymize in Settings | Editor | Duplicates.",
                  "markdown": "Reports duplicated blocks of code from the selected scope: the same file or the entire project.\n\nThe inspection features quick-fixes that help you to set the size of detected duplicates, navigate to repetitive code fragments, and compare them in a tool window.\n\nThe inspection options allow you to select the scope of the reported duplicated fragments and set the initial size for the duplicated language constructs.\n\nYou can also configure the constructs that you want to anonymize in [Settings \\| Editor \\| Duplicates](settings://duplicates.index)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "DuplicatedCode",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 31,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "InconsistentLineSeparators",
                "shortDescription": {
                  "text": "Inconsistent line separators"
                },
                "fullDescription": {
                  "text": "Reports files with line separators different from the ones that are specified in the project's settings. For example, the inspection will be triggered if you set the line separator to '\\n' in Settings | Editor | Code Style | Line separator, while the file you are editing uses '\\r\\n' as a line separator. The inspection also warns you about mixed line separators within a file.",
                  "markdown": "Reports files with line separators different from the ones that are specified in the project's settings.\n\nFor example, the inspection will be triggered if you set the line separator to `\\n` in\n[Settings \\| Editor \\| Code Style \\| Line separator](settings://preferences.sourceCode?Line%20separator),\nwhile the file you are editing uses `\\r\\n` as a line separator.\n\nThe inspection also warns you about mixed line separators within a file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "InconsistentLineSeparators",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 31,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RedundantSuppression",
                "shortDescription": {
                  "text": "Redundant suppression"
                },
                "fullDescription": {
                  "text": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context: '@SuppressWarning' annotation, or '// noinspection' line comment, or '/** noinspection */' JavaDoc comment Example: 'public class C {\n // symbol is already private,\n // but annotation is still around\n  @SuppressWarnings({\"WeakerAccess\"})\n  private boolean CONST = true;\n  void f() {\n    CONST = false;\n  }\n}'",
                  "markdown": "Reports usages of the following elements that can be safely removed because the inspection they affect is no longer applicable in this context:\n\n* `@SuppressWarning` annotation, or\n* `// noinspection` line comment, or\n* `/** noinspection */` JavaDoc comment\n\nExample:\n\n\n    public class C {\n     // symbol is already private,\n     // but annotation is still around\n      @SuppressWarnings({\"WeakerAccess\"})\n      private boolean CONST = true;\n      void f() {\n        CONST = false;\n      }\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RedundantSuppression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 31,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ProblematicWhitespace",
                "shortDescription": {
                  "text": "Problematic whitespace"
                },
                "fullDescription": {
                  "text": "Reports the following problems: Tabs used for indentation when the code style is configured to use only spaces. Spaces used for indentation when the code style is configured to use only tabs. Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs.",
                  "markdown": "Reports the following problems:\n\n* Tabs used for indentation when the code style is configured to use only spaces.\n* Spaces used for indentation when the code style is configured to use only tabs.\n* Spaces used for indentation and tabs used for alignment when the code style is configured to use smart tabs."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ProblematicWhitespace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 31,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file in a link.",
                  "markdown": "Reports an unresolved file in a link."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownTarget",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SSBasedInspection",
                "shortDescription": {
                  "text": "Structural search inspection"
                },
                "fullDescription": {
                  "text": "Allows configuring Structural Search/Structural Replace templates that you can apply to the file you are editing. All matches will be highlighted and marked with the template name that you have configured. If you configure the Structural Replace pattern as well, the corresponding replace option will be available as a quick-fix.",
                  "markdown": "Allows configuring **Structural Search/Structural Replace** templates that you can apply to the file you are editing.\n\nAll matches will be highlighted and marked with the template name that you have configured.\nIf you configure the **Structural Replace** pattern as well, the corresponding replace option will be available as a quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SSBasedInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Structural search",
                      "index": 44,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LongLine",
                "shortDescription": {
                  "text": "Line is longer than allowed by code style"
                },
                "fullDescription": {
                  "text": "Reports lines that are longer than the Hard wrap at parameter specified in Settings | Editor | Code Style | General.",
                  "markdown": "Reports lines that are longer than the **Hard wrap at** parameter specified in [Settings \\| Editor \\| Code Style \\| General](settings://preferences.sourceCode?Hard%20wrap%20at)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LongLine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 31,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlWrongRootElement",
                "shortDescription": {
                  "text": "Wrong root element"
                },
                "fullDescription": {
                  "text": "Reports a root tag name different from the name specified in the '<doctype>' tag.",
                  "markdown": "Reports a root tag name different from the name specified in the `<doctype>` tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlWrongRootElement",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckValidXmlInScriptTagBody",
                "shortDescription": {
                  "text": "Malformed content of 'script' tag"
                },
                "fullDescription": {
                  "text": "Reports contents of 'script' tags that are invalid XML. Example: '<script type=\"text/javascript\">\n    console.log('<');\n  </script>' After the quick-fix is applied: '<script type=\"text/javascript\">\n    console.log('&lt;');\n  </script>'",
                  "markdown": "Reports contents of `script` tags that are invalid XML.  \n\n**Example:**\n\n\n      <script type=\"text/javascript\">\n        console.log('<');\n      </script>\n\nAfter the quick-fix is applied:\n\n\n      <script type=\"text/javascript\">\n        console.log('&lt;');\n      </script>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckValidXmlInScriptTagBody",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSuspiciousBackref",
                "shortDescription": {
                  "text": "Suspicious back reference"
                },
                "fullDescription": {
                  "text": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation. Example of a group defined after its back reference: '\\1(abc)' Example of a group and a back reference in different branches: 'a(b)c|(xy)\\1z' New in 2022.1",
                  "markdown": "Reports back references that will not be resolvable at runtime. This means that the back reference can never match anything. A back reference will not be resolvable when the group is defined after the back reference, or if the group is defined in a different branch of an alternation.\n\n**Example of a group defined after its back reference:**\n\n\n      \\1(abc)\n\n**Example of a group and a back reference in different branches:**\n\n\n      a(b)c|(xy)\\1z\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpSuspiciousBackref",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSingleCharAlternation",
                "shortDescription": {
                  "text": "Single character alternation"
                },
                "fullDescription": {
                  "text": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance. Example: 'a|b|c|d' After the quick-fix is applied: '[abcd]' New in 2017.1",
                  "markdown": "Reports single char alternation in a RegExp. It is simpler to use a character class instead. This may also provide better matching performance.\n\n**Example:**\n\n\n      a|b|c|d\n\nAfter the quick-fix is applied:\n\n\n      [abcd]\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpSingleCharAlternation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAttribute",
                "shortDescription": {
                  "text": "Unknown attribute"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports an unknown HTML attribute. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckTagEmptyBody",
                "shortDescription": {
                  "text": "Empty element content"
                },
                "fullDescription": {
                  "text": "Reports XML elements without contents. Example: '<user>\n    <name></name>\n  </user>' After the quick-fix is applied: '<user>\n    <name/>\n  </user>'",
                  "markdown": "Reports XML elements without contents.\n\n**Example:**\n\n\n      <user>\n        <name></name>\n      </user>\n\nAfter the quick-fix is applied:\n\n\n      <user>\n        <name/>\n      </user>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckTagEmptyBody",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantEscape",
                "shortDescription": {
                  "text": "Redundant character escape"
                },
                "fullDescription": {
                  "text": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets '[]' of a character class. Although unescaped opening curly braces '{' outside of character classes are allowed in some dialects (JavaScript, Python, and so on), it can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters. For this reason the inspection does not report escaped opening curly braces. Example: '\\-\\;[\\.]' After the quick-fix is applied: '-;[.]' The Ignore escaped closing brackets '}' and ']' option specifies whether to report '\\}' and '\\]' outside of a character class when they are allowed to be unescaped by the RegExp dialect. New in 2017.3",
                  "markdown": "Reports redundant character escape sequences that can be replaced with unescaped characters preserving the meaning. Many escape sequences that are necessary outside of a character class are redundant inside square brackets `[]` of a character class.\n\n\nAlthough unescaped opening curly braces `{` outside of character classes are allowed in some dialects (JavaScript, Python, and so on),\nit can cause confusion and make the pattern less portable, because there are dialects that require escaping curly braces as characters.\nFor this reason the inspection does not report escaped opening curly braces.\n\n**Example:**\n\n\n      \\-\\;[\\.]\n\nAfter the quick-fix is applied:\n\n\n      -;[.]\n\n\nThe **Ignore escaped closing brackets '}' and '\\]'** option specifies whether to report `\\}` and `\\]` outside of a character class\nwhen they are allowed to be unescaped by the RegExp dialect.\n\nNew in 2017.3"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantEscape",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a named pattern ('define') in RELAX-NG files that use XML syntax. Suggests creating the referenced 'define' element.",
                  "markdown": "Reports an unresolved reference to a named pattern (`define`) in RELAX-NG files that use XML syntax. Suggests creating the referenced `define` element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "UnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 59,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlMissingClosingTag",
                "shortDescription": {
                  "text": "Missing closing tag"
                },
                "fullDescription": {
                  "text": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional. Example: '<html>\n    <body>\n      <p>Behold!\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <p>Behold!</p>\n    </body>\n  </html>'",
                  "markdown": "Reports an HTML element without a closing tag. Some coding styles require that HTML elements have closing tags even where this is optional.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <p>Behold!\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <p>Behold!</p>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlMissingClosingTag",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CustomRegExpInspection",
                "shortDescription": {
                  "text": "Custom RegExp inspection"
                },
                "fullDescription": {
                  "text": "Custom Regex Inspection",
                  "markdown": "Custom Regex Inspection"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CustomRegExpInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IncorrectFormatting",
                "shortDescription": {
                  "text": "Incorrect formatting"
                },
                "fullDescription": {
                  "text": "Reports formatting issues that appear if your code doesn't follow your project's code style settings. This inspection is not compatible with languages that require third-party formatters for code formatting, for example, Go or C with CLangFormat enabled.",
                  "markdown": "Reports formatting issues that appear if your code doesn't\nfollow your project's code style settings.\n\n\nThis inspection is not compatible with languages that require\nthird-party formatters for code formatting, for example, Go or\nC with CLangFormat enabled."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "IncorrectFormatting",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 31,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlExtraClosingTag",
                "shortDescription": {
                  "text": "Redundant closing tag"
                },
                "fullDescription": {
                  "text": "Reports redundant closing tags on empty elements, for example, 'img' or 'br'. Example: '<html>\n    <body>\n      <br></br>\n    </body>\n  </html>' After the quick-fix is applied: '<html>\n    <body>\n      <br>\n    </body>\n  </html>'",
                  "markdown": "Reports redundant closing tags on empty elements, for example, `img` or `br`.\n\n**Example:**\n\n\n      <html>\n        <body>\n          <br></br>\n        </body>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <body>\n          <br>\n        </body>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlExtraClosingTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownAnchorTarget",
                "shortDescription": {
                  "text": "Unresolved fragment in a link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved last part of an URL after the '#' sign.",
                  "markdown": "Reports an unresolved last part of an URL after the `#` sign."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownAnchorTarget",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnexpectedAnchor",
                "shortDescription": {
                  "text": "Begin or end anchor in unexpected position"
                },
                "fullDescription": {
                  "text": "Reports '^' or '\\A' anchors not at the beginning of the pattern and '$', '\\Z' or '\\z' anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the '^' and '$' anchors, most likely the literal character was meant and the escape forgotten. Example: '(Price $10)' New in 2018.1",
                  "markdown": "Reports `^` or `\\A` anchors not at the beginning of the pattern and `$`, `\\Z` or `\\z` anchors not at the end of the pattern. In the wrong position these RegExp anchors prevent the pattern from matching anything. In case of the `^` and `$` anchors, most likely the literal character was meant and the escape forgotten.\n\n**Example:**\n\n\n      (Price $10)\n\n\nNew in 2018.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpUnexpectedAnchor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SpellCheckingInspection",
                "shortDescription": {
                  "text": "Typo"
                },
                "fullDescription": {
                  "text": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click.",
                  "markdown": "Reports typos and misspellings in your code, comments, and literals and fixes them with one click."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "SpellCheckingInspection",
                    "ideaSeverity": "TYPO",
                    "qodanaSeverity": "Low"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 69,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckXmlFileWithXercesValidator",
                "shortDescription": {
                  "text": "Failed external validation"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator.",
                  "markdown": "Reports a discrepancy in an XML file with the specified DTD or schema detected by the Xerces validator."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckXmlFileWithXercesValidator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlUnknownTag",
                "shortDescription": {
                  "text": "Unknown tag"
                },
                "fullDescription": {
                  "text": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported.",
                  "markdown": "Reports an unknown HTML tag. Suggests configuring tags that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlUnknownTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEscapedMetaCharacter",
                "shortDescription": {
                  "text": "Escaped meta character"
                },
                "fullDescription": {
                  "text": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character '[', ']' and '^', because those would need additional escaping inside a character class. Example: '\\d+\\.\\d+' After the quick-fix is applied: '\\d+[.]\\d+' New in 2017.1",
                  "markdown": "Reports escaped meta characters. Some RegExp coding styles specify that meta characters should be placed inside a character class, to make the regular expression easier to understand. This inspection does not warn about the meta character `[`, `]` and `^`, because those would need additional escaping inside a character class.\n\n**Example:**\n\n\n      \\d+\\.\\d+\n\nAfter the quick-fix is applied:\n\n\n      \\d+[.]\\d+\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpEscapedMetaCharacter",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlHighlighting",
                "shortDescription": {
                  "text": "XML highlighting"
                },
                "fullDescription": {
                  "text": "Reports XML validation problems in the results of a batch code inspection.",
                  "markdown": "Reports XML validation problems in the results of a batch code inspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlHighlighting",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDuplicatedId",
                "shortDescription": {
                  "text": "Duplicate 'id' attribute"
                },
                "fullDescription": {
                  "text": "Reports a duplicate 'id' attribute in XML.",
                  "markdown": "Reports a duplicate `id` attribute in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlDuplicatedId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateCharacterInClass",
                "shortDescription": {
                  "text": "Duplicate character in character class"
                },
                "fullDescription": {
                  "text": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex. Example: '[aabc]' After the quick-fix is applied: '[abc]'",
                  "markdown": "Reports duplicate characters inside a RegExp character class. Duplicate characters are unnecessary and can be removed without changing the semantics of the regex.\n\n**Example:**\n\n\n      [aabc]\n\nAfter the quick-fix is applied:\n\n\n      [abc]\n"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpDuplicateCharacterInClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlInvalidId",
                "shortDescription": {
                  "text": "Unresolved 'id' reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved 'id' reference in XML.",
                  "markdown": "Reports an unresolved `id` reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlInvalidId",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnboundNsPrefix",
                "shortDescription": {
                  "text": "Unbound namespace prefix"
                },
                "fullDescription": {
                  "text": "Reports an unbound namespace prefix in XML.",
                  "markdown": "Reports an unbound namespace prefix in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlUnboundNsPrefix",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RequiredAttributes",
                "shortDescription": {
                  "text": "Missing required attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported.",
                  "markdown": "Reports a missing mandatory attribute in an XML/HTML tag. Suggests configuring attributes that should not be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RequiredAttributes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ReassignedToPlainText",
                "shortDescription": {
                  "text": "Reassigned to plain text"
                },
                "fullDescription": {
                  "text": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically. You can dismiss this warning by removing the file type association in Settings | Editor | File Types | Text.",
                  "markdown": "Reports files that were explicitly re-assigned to Plain Text File Type. This association is unnecessary because the platform auto-detects text files by content automatically.\n\nYou can dismiss this warning by removing the file type association\nin **Settings \\| Editor \\| File Types \\| Text**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ReassignedToPlainText",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 31,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnusedNamespaceDeclaration",
                "shortDescription": {
                  "text": "Unused schema declaration"
                },
                "fullDescription": {
                  "text": "Reports an unused namespace declaration or location hint in XML.",
                  "markdown": "Reports an unused namespace declaration or location hint in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlUnusedNamespaceDeclaration",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantClassElement",
                "shortDescription": {
                  "text": "Redundant '\\d', '[:digit:]', or '\\D' class elements"
                },
                "fullDescription": {
                  "text": "Reports redundant '\\d' or '[:digit:]' that are used in one class with '\\w' or '[:word:]' ('\\D' with '\\W') and can be removed. Example: '[\\w\\d]' After the quick-fix is applied: '[\\w]' New in 2022.2",
                  "markdown": "Reports redundant `\\d` or `[:digit:]` that are used in one class with `\\w` or `[:word:]` (`\\D` with `\\W`) and can be removed.\n\n**Example:**\n\n\n      [\\w\\d]\n\nAfter the quick-fix is applied:\n\n\n      [\\w]\n\nNew in 2022.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantClassElement",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpSimplifiable",
                "shortDescription": {
                  "text": "Regular expression can be simplified"
                },
                "fullDescription": {
                  "text": "Reports regular expressions that can be simplified. Example: '[a] xx* [ah-hz]' After the quick-fix is applied: 'a x+ [ahz]' New in 2022.1",
                  "markdown": "Reports regular expressions that can be simplified.\n\n**Example:**\n\n\n      [a] xx* [ah-hz]\n\nAfter the quick-fix is applied:\n\n\n      a x+ [ahz]\n\nNew in 2022.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpSimplifiable",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpEmptyAlternationBranch",
                "shortDescription": {
                  "text": "Empty branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation. Example: '(alpha||bravo)' After the quick-fix is applied: '(alpha|bravo)' New in 2017.2",
                  "markdown": "Reports empty branches in a RegExp alternation. An empty branch will only match the empty string, and in most cases that is not what is desired. This inspection will not report a single empty branch at the start or the end of an alternation.\n\n**Example:**\n\n\n      (alpha||bravo)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo)\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpEmptyAlternationBranch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Annotator",
                "shortDescription": {
                  "text": "Annotator"
                },
                "fullDescription": {
                  "text": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection: Option \"Report syntax errors\": report parser-related issues. Option \"Report issues from language-specific annotators\": report issues found by annotators configured for the relevant language. See Custom Language Support: Annotators for details. Option \"Report other highlighting problems\": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See Custom Language Support: Highlighting for details.",
                  "markdown": "Reports issues essential to this file (e.g., syntax errors) in the result of a batch code inspection run. These issues are usually always highlighted in the editor and can't be configured, unlike inspections. These options control the scope of checks performed by this inspection:\n\n* Option \"**Report syntax errors**\": report parser-related issues.\n* Option \"**Report issues from language-specific annotators** \": report issues found by annotators configured for the relevant language. See [Custom Language Support: Annotators](https://plugins.jetbrains.com/docs/intellij/annotator.html) for details.\n* Option \"**Report other highlighting problems** \": report issues specific to the language of the current file (e.g., type mismatches or unreported exceptions). See [Custom Language Support: Highlighting](https://plugins.jetbrains.com/docs/intellij/syntax-highlighting-and-error-highlighting.html#semantic-highlighting) for details."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Annotator",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 31,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlPathReference",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference in XML.",
                  "markdown": "Reports an unresolved file reference in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlPathReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpUnnecessaryNonCapturingGroup",
                "shortDescription": {
                  "text": "Unnecessary non-capturing group"
                },
                "fullDescription": {
                  "text": "Reports unnecessary non-capturing groups, which have no influence on the match result. Example: 'Everybody be cool, (?:this) is a robbery!' After the quick-fix is applied: 'Everybody be cool, this is a robbery!' New in 2021.1",
                  "markdown": "Reports unnecessary non-capturing groups, which have no influence on the match result.\n\n**Example:**\n\n\n      Everybody be cool, (?:this) is a robbery!\n\nAfter the quick-fix is applied:\n\n\n      Everybody be cool, this is a robbery!\n\nNew in 2021.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpUnnecessaryNonCapturingGroup",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "TodoComment",
                "shortDescription": {
                  "text": "TODO comment"
                },
                "fullDescription": {
                  "text": "Reports TODO comments in your code. You can configure the format for TODO comments in Settings | Editor | TODO. Enable the Only warn on TODO comments without any details option to only warn on empty TODO comments, that don't provide any description on the task that should be done. Disable to report all TODO comments.",
                  "markdown": "Reports **TODO** comments in your code.\n\nYou can configure the format for **TODO** comments in [Settings \\| Editor \\| TODO](settings://preferences.toDoOptions).\n\nEnable the **Only warn on TODO comments without any details** option to only warn on empty TODO comments, that\ndon't provide any description on the task that should be done. Disable to report all TODO comments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TodoComment",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 31,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "Json5StandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON5 standard"
                },
                "fullDescription": {
                  "text": "Reports inconsistency with the language specification in a JSON5 file.",
                  "markdown": "Reports inconsistency with [the language specification](http://json5.org) in a JSON5 file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Json5StandardCompliance",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 13,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonDuplicatePropertyKeys",
                "shortDescription": {
                  "text": "Duplicate keys in object literals"
                },
                "fullDescription": {
                  "text": "Reports a duplicate key in an object literal.",
                  "markdown": "Reports a duplicate key in an object literal."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonDuplicatePropertyKeys",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 13,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDeprecatedElement",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated XML element or attribute. Symbols can be marked by XML comment or documentation tag with text 'deprecated'.",
                  "markdown": "Reports a deprecated XML element or attribute.\n\nSymbols can be marked by XML comment or documentation tag with text 'deprecated'."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlDeprecatedElement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRedundantNestedCharacterClass",
                "shortDescription": {
                  "text": "Redundant nested character class"
                },
                "fullDescription": {
                  "text": "Reports unnecessary nested character classes. Example: '[a-c[x-z]]' After the quick-fix is applied: '[a-cx-z]' New in 2020.2",
                  "markdown": "Reports unnecessary nested character classes.\n\n**Example:**\n\n\n      [a-c[x-z]]\n\nAfter the quick-fix is applied:\n\n\n      [a-cx-z]\n\nNew in 2020.2"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRedundantNestedCharacterClass",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlWrongAttributeValue",
                "shortDescription": {
                  "text": "Wrong attribute value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect HTML attribute value.",
                  "markdown": "Reports an incorrect HTML attribute value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlWrongAttributeValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlDefaultAttributeValue",
                "shortDescription": {
                  "text": "Redundant attribute with default value"
                },
                "fullDescription": {
                  "text": "Reports a redundant assignment of the default value to an XML attribute.",
                  "markdown": "Reports a redundant assignment of the default value to an XML attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "XmlDefaultAttributeValue",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpOctalEscape",
                "shortDescription": {
                  "text": "Octal escape"
                },
                "fullDescription": {
                  "text": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion. Example: '\\07' After the quick-fix is applied: '\\x07' New in 2017.1",
                  "markdown": "Reports octal escapes, which are easily confused with back references. Use hexadecimal escapes to avoid confusion.\n\n**Example:**\n\n\n      \\07\n\nAfter the quick-fix is applied:\n\n\n      \\x07\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "RegExpOctalEscape",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UnusedDefine",
                "shortDescription": {
                  "text": "Unused define"
                },
                "fullDescription": {
                  "text": "Reports an unused named pattern ('define') in a RELAX-NG file (XML or Compact Syntax). 'define' elements that are used through an include in another file are ignored.",
                  "markdown": "Reports an unused named pattern (`define`) in a RELAX-NG file (XML or Compact Syntax). `define` elements that are used through an include in another file are ignored."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UnusedDefine",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RELAX NG",
                      "index": 59,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonSchemaCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistence between a JSON file and the JSON schema that is assigned to it.",
                  "markdown": "Reports inconsistence between a JSON file and the [JSON schema](https://json-schema.org) that is assigned to it.  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonSchemaCompliance",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 13,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "EmptyDirectory",
                "shortDescription": {
                  "text": "Empty directory"
                },
                "fullDescription": {
                  "text": "Reports empty directories. Available only from Code | Inspect Code or Code | Analyze Code | Run Inspection by Name and isn't reported in the editor. Use the Only report empty directories located under a source folder option to have only directories under source roots reported.",
                  "markdown": "Reports empty directories.\n\nAvailable only from **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name** and isn't reported in the editor.\n\nUse the **Only report empty directories located under a source folder** option to have only directories under source\nroots reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "EmptyDirectory",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 31,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpAnonymousGroup",
                "shortDescription": {
                  "text": "Anonymous capturing group or numeric back reference"
                },
                "fullDescription": {
                  "text": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. '(?:xxx)' instead of '(xxx)'. Example: '(\\d\\d\\d\\d)\\1' A better regex pattern could look like this: '(?<quad>\\d\\d\\d\\d)\\k<quad>' New in 2017.2",
                  "markdown": "Reports anonymous capturing groups and numeric back references in a RegExp. These are only reported when the RegExp dialect supports named group and named group references. Named groups and named back references improve code readability and are recommended to use instead. When a capture is not needed, matching can be more performant and use less memory by using a non-capturing group, i.e. `(?:xxx)` instead of `(xxx)`.\n\n**Example:**\n\n\n      (\\d\\d\\d\\d)\\1\n\nA better regex pattern could look like this:\n\n\n      (?<quad>\\d\\d\\d\\d)\\k<quad>\n\nNew in 2017.2"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpAnonymousGroup",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckDtdRefs",
                "shortDescription": {
                  "text": "Unresolved DTD reference"
                },
                "fullDescription": {
                  "text": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files.",
                  "markdown": "Reports inconsistency in a DTD-specific reference, for example, in a reference to an XML entity or to a DTD element declaration. Works in DTD an XML files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CheckDtdRefs",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "NonAsciiCharacters",
                "shortDescription": {
                  "text": "Non-ASCII characters"
                },
                "fullDescription": {
                  "text": "Reports code elements that use non-ASCII symbols in an unusual context. Example: Non-ASCII characters used in identifiers, strings, or comments. Identifiers written in different languages, such as 'myСollection' with the letter 'C' written in Cyrillic. Comments or strings containing Unicode symbols, such as long dashes and arrows.",
                  "markdown": "Reports code elements that use non-ASCII symbols in an unusual context.\n\nExample:\n\n* Non-ASCII characters used in identifiers, strings, or comments.\n* Identifiers written in different languages, such as `my`**С**`ollection` with the letter **C** written in Cyrillic.\n* Comments or strings containing Unicode symbols, such as long dashes and arrows."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "NonAsciiCharacters",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 82,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "XmlUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved references"
                },
                "fullDescription": {
                  "text": "Reports an unresolved references in XML.",
                  "markdown": "Reports an unresolved references in XML."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "XmlUnresolvedReference",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "XML",
                      "index": 47,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LossyEncoding",
                "shortDescription": {
                  "text": "Lossy encoding"
                },
                "fullDescription": {
                  "text": "Reports characters that cannot be displayed because of the current document encoding. Examples: If you type international characters in a document with the US-ASCII charset, some characters will be lost on save. If you load a UTF-8-encoded file using the ISO-8859-1 one-byte charset, some characters will be displayed incorrectly. You can fix this by changing the file encoding either by specifying the encoding directly in the file, e.g. by editing 'encoding=' attribute in the XML prolog of XML file, or by changing the corresponding options in Settings | Editor | File Encodings.",
                  "markdown": "Reports characters that cannot be displayed because of the current document encoding.\n\nExamples:\n\n* If you type international characters in a document with the **US-ASCII** charset, some characters will be lost on save.\n* If you load a **UTF-8** -encoded file using the **ISO-8859-1** one-byte charset, some characters will be displayed incorrectly.\n\nYou can fix this by changing the file encoding\neither by specifying the encoding directly in the file, e.g. by editing `encoding=` attribute in the XML prolog of XML file,\nor by changing the corresponding options in **Settings \\| Editor \\| File Encodings**."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LossyEncoding",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Internationalization",
                      "index": 82,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpDuplicateAlternationBranch",
                "shortDescription": {
                  "text": "Duplicate branch in alternation"
                },
                "fullDescription": {
                  "text": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression. Example: '(alpha|bravo|charlie|alpha)' After the quick-fix is applied: '(alpha|bravo|charlie)' New in 2017.1",
                  "markdown": "Reports duplicate branches in a RegExp alternation. Duplicate branches slow down matching and obscure the intent of the expression.\n\n**Example:**\n\n\n      (alpha|bravo|charlie|alpha)\n\nAfter the quick-fix is applied:\n\n\n      (alpha|bravo|charlie)\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpDuplicateAlternationBranch",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "RegExpRepeatedSpace",
                "shortDescription": {
                  "text": "Consecutive spaces"
                },
                "fullDescription": {
                  "text": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier. Example: '(     )' After the quick-fix is applied: '( {5})' New in 2017.1",
                  "markdown": "Reports multiple consecutive spaces in a RegExp. Because spaces are not visible by default, it can be hard to see how many spaces are required. The RegExp can be made more clear by replacing the consecutive spaces with a single space and a counted quantifier.\n\n**Example:**\n\n\n      (     )\n\nAfter the quick-fix is applied:\n\n\n      ( {5})\n\n\nNew in 2017.1"
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "RegExpRepeatedSpace",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "RegExp",
                      "index": 51,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IgnoreFileDuplicateEntry",
                "shortDescription": {
                  "text": "Ignore file duplicates"
                },
                "fullDescription": {
                  "text": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed. Example: '# Output directories\n    /out/\n    /target/\n    /out/'",
                  "markdown": "Reports duplicate entries (patterns) in the ignore file (e.g. .gitignore, .hgignore). Duplicate entries in these files are redundant and can be removed.\n\nExample:\n\n\n        # Output directories\n        /out/\n        /target/\n        /out/\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "IgnoreFileDuplicateEntry",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Version control",
                      "index": 84,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonStandardCompliance",
                "shortDescription": {
                  "text": "Compliance with JSON standard"
                },
                "fullDescription": {
                  "text": "Reports the following discrepancies of a JSON file with the language specification: A line or block comment (configurable). Multiple top-level values (expect for JSON Lines files, configurable for others). A trailing comma in an object or array (configurable). A single quoted string. A property key is a not a double quoted strings. A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable).",
                  "markdown": "Reports the following discrepancies of a JSON file with [the language specification](https://tools.ietf.org/html/rfc7159):\n\n* A line or block comment (configurable).\n* Multiple top-level values (expect for JSON Lines files, configurable for others).\n* A trailing comma in an object or array (configurable).\n* A single quoted string.\n* A property key is a not a double quoted strings.\n* A NaN or Infinity/-Infinity numeric value as a floating point literal (configurable)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "JsonStandardCompliance",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSON and JSON5",
                      "index": 13,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckEmptyScriptTag",
                "shortDescription": {
                  "text": "Empty tag"
                },
                "fullDescription": {
                  "text": "Reports empty tags that do not work in some browsers. Example: '<html>\n    <script/>\n  </html>' After the quick-fix is applied: '<html>\n    <script></script>\n  </html>'",
                  "markdown": "Reports empty tags that do not work in some browsers.\n\n**Example:**\n\n\n      <html>\n        <script/>\n      </html>\n\nAfter the quick-fix is applied:\n\n\n      <html>\n        <script></script>\n      </html>\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckEmptyScriptTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.database",
            "version": "243.6317",
            "rules": [
              {
                "id": "MongoJSSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that can cause side effects while the data source is in read-only mode. For more information about enabling read-only mode, see Enable read-only mode for a connection in the IDE documentation. The Disable read-only mode quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()'",
                  "markdown": "Reports statements that can cause side effects while the data source is in read-only mode.\n\nFor more information about enabling read-only mode, see\n[Enable\nread-only mode for a connection in the IDE documentation](https://www.jetbrains.com/help/datagrip/configuring-database-connections.html#enable-read-only-mode-for-a-connection).\n\nThe **Disable read-only mode** quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSSideEffects",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 16,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlLoadDataPathInspection",
                "shortDescription": {
                  "text": "LOAD statement path"
                },
                "fullDescription": {
                  "text": "Reports paths that start with the tilde character in LOAD statements. Example (MySQL): 'CREATE TABLE table_name (id int);\nLOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\nINTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\nIGNORE 1 LINES;' Instead of the tilde character, use a full path to the file.",
                  "markdown": "Reports paths that start with the tilde character in LOAD statements.\n\nExample (MySQL):\n\n    CREATE TABLE table_name (id int);\n    LOAD DATA LOCAL INFILE '~/Documents/some_file.txt'\n    INTO TABLE table_name FIELDS TERMINATED BY ',' LINES TERMINATED BY '\\n'\n    IGNORE 1 LINES;\n\nInstead of the tilde character, use a full path to the file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MysqlLoadDataPath",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 19,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that may cause side effects while the data source is in read-only mode. The quick-fix turns off the read-only mode for the respective data source. Example: 'db.my_collection.insertOne()'",
                  "markdown": "Reports statements that may cause side effects while the data source is in read-only mode.\n\nThe quick-fix turns off the read-only mode for the respective data source.\n\nExample:\n\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSSideEffects",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 16,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlSpaceAfterFunctionNameInspection",
                "shortDescription": {
                  "text": "Whitespace between the function name and the open parenthesis"
                },
                "fullDescription": {
                  "text": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default. Example (MySQL): 'SELECT MAX (qty) FROM orders;'",
                  "markdown": "Reports any whitespace in a function call between the function name and the open parenthesis, which is not supported by default.\n\nExample (MySQL):\n\n    SELECT MAX (qty) FROM orders;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MysqlSpaceAfterFunctionName",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 19,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingReturnInspection",
                "shortDescription": {
                  "text": "Missing return statement"
                },
                "fullDescription": {
                  "text": "Reports functions that have no RETURN statements. Example (Oracle): 'CREATE FUNCTION foo RETURN int AS\nBEGIN\nEND;' The 'foo' function must return the integer value but the function body returns nothing. To fix the error, add a RETURN statement (for example, 'return 1;'). 'CREATE FUNCTION foo RETURN int AS\nBEGIN\n RETURN 1;\nEND;'",
                  "markdown": "Reports functions that have no RETURN statements.\n\nExample (Oracle):\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n    END;\n\nThe `foo` function must return the integer value but the function body returns nothing. To fix the error,\nadd a RETURN statement (for example, `return 1;`).\n\n    CREATE FUNCTION foo RETURN int AS\n    BEGIN\n     RETURN 1;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlMissingReturn",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedSubqueryItemInspection",
                "shortDescription": {
                  "text": "Unused subquery item"
                },
                "fullDescription": {
                  "text": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression. Example (PostgreSQL): 'CREATE TABLE for_subquery(id INT);\nSELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n      FROM for_subquery) x;' We reference 'a' and 'q' aliases from a subquery. But the 'b' alias and the 'id' column are not referenced in the outer SELECT statement. Therefore, 'b' and 'id' are grayed out.",
                  "markdown": "Reports columns, aliases, and other subquery items that are not referenced in the outer query expression.\n\nExample (PostgreSQL):\n\n    CREATE TABLE for_subquery(id INT);\n    SELECT a, q FROM (SELECT 1 AS a, 10 AS b, 2 + 3 AS q, id\n          FROM for_subquery) x;\n\nWe reference `a` and `q` aliases from a subquery. But the `b` alias and the `id` column are\nnot referenced in the outer SELECT statement. Therefore, `b` and `id` are grayed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnused",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsIfInspection",
                "shortDescription": {
                  "text": "Using CASE instead of conditional function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and IF are interchangeable. Example (MySQL): 'SELECT CASE\nWHEN C1 IS NULL THEN 1\nELSE 0\nEND\nFROM dual;' To keep your code short, you can replace the CASE structure with IF. You can do that by applying the Replace with 'IF' call intention action. The example code will look as follows: 'SELECT IF(C1 IS NULL, 1, 0)\nFROM dual;' To revert IF to CASE, click IF and apply the Replace with CASE expression intention action.",
                  "markdown": "Reports situations when CASE and IF are interchangeable.\n\nExample (MySQL):\n\n    SELECT CASE\n    WHEN C1 IS NULL THEN 1\n    ELSE 0\n    END\n    FROM dual;\n\nTo keep your code short, you can replace the CASE structure with IF. You can do that by applying the **Replace with 'IF' call**\nintention action. The example code will look as follows:\n\n    SELECT IF(C1 IS NULL, 1, 0)\n    FROM dual;\n\nTo revert IF to CASE, click IF and apply the **Replace with CASE expression** intention action."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCaseVsIf",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShouldBeInGroupByInspection",
                "shortDescription": {
                  "text": "Column should be in group by clause"
                },
                "fullDescription": {
                  "text": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call. Example (Microsoft SQL Server): 'CREATE TABLE t1 (a INT, b INT);\nSELECT a, b FROM t1 GROUP BY a;' If you run the SELECT query, you will receive an error because Microsoft SQL Server expects the 'b' column in GROUP BY or used inside an aggregate function. The following two examples will fix the error. 'SELECT a, b FROM t1 GROUP BY a, b;\nSELECT a, max(b) max_b FROM t1 GROUP BY a;'",
                  "markdown": "Reports columns that are not in the GROUP BY clause or inside an aggregate function call.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t1 (a INT, b INT);\n    SELECT a, b FROM t1 GROUP BY a;\n\nIf you run the SELECT query, you will receive an error because Microsoft SQL Server expects the `b` column in GROUP BY or used\ninside an aggregate function. The following two examples will fix the error.\n\n    SELECT a, b FROM t1 GROUP BY a, b;\n    SELECT a, max(b) max_b FROM t1 GROUP BY a;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlShouldBeInGroupBy",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAutoIncrementDuplicateInspection",
                "shortDescription": {
                  "text": "Auto-increment duplicate"
                },
                "fullDescription": {
                  "text": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key. Example (MySQL): 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT,\n    c2 INT AUTO_INCREMENT,\n);' The AUTO_INCREMENT constraint for 'c2' will be highlighted as 'c1' already has this constraint. To fix the warning, you can make 'id' a primary key and delete AUTO_INCREMENT for 'c2'. 'CREATE TABLE my_table\n(\n    id INT AUTO_INCREMENT PRIMARY KEY,\n    c2 INT,\n);'",
                  "markdown": "Reports tables that contain two columns with an automatic increment. In MySQL, Microsoft SQL Server, and Db2 dialects, a table can have only one field with a auto-increment option, and this field must be a key.\n\nExample (MySQL):\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT,\n        c2 INT AUTO_INCREMENT,\n    );\n\nThe AUTO_INCREMENT constraint for `c2` will be highlighted as `c1` already has this constraint. To fix the warning,\nyou can make `id` a primary key and delete AUTO_INCREMENT for `c2`.\n\n    CREATE TABLE my_table\n    (\n        id INT AUTO_INCREMENT PRIMARY KEY,\n        c2 INT,\n    );\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAutoIncrementDuplicate",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStringLengthExceededInspection",
                "shortDescription": {
                  "text": "Implicit string truncation"
                },
                "fullDescription": {
                  "text": "Reports variables that exceed the defined length in characters. Example (Microsoft SQL Server): 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;' The 'myVarExceeded' variable is defined as 'VARCHAR(5)' but both assigned values (''abcde12345'' and ''123456789'') exceed this limitation. You can truncate assigned values or increase the defined length. To increase the length, use the Increase type length quick-fix. After the quick-fix is applied: 'CREATE PROCEDURE test() AS\nBEGIN\nDECLARE myVarOk VARCHAR(5) = 'abcde';\nDECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\nSET myVarOk = 'xyz';\nSET myVarExceeded = '123456789';\nEND;'",
                  "markdown": "Reports variables that exceed the defined length in characters.\n\nExample (Microsoft SQL Server):\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(5) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n\nThe `myVarExceeded` variable is defined as `VARCHAR(5)` but both assigned values (`'abcde12345'` and\n`'123456789'`) exceed this limitation. You can truncate assigned values or increase the defined length.\nTo increase the length, use the **Increase type length** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE PROCEDURE test() AS\n    BEGIN\n    DECLARE myVarOk VARCHAR(5) = 'abcde';\n    DECLARE myVarExceeded VARCHAR(10) = 'abcde12345';\n\n    SET myVarOk = 'xyz';\n    SET myVarExceeded = '123456789';\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlStringLengthExceeded",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDtInspection",
                "shortDescription": {
                  "text": "Ill-formed date/time literals"
                },
                "fullDescription": {
                  "text": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2. Example (MySQL): 'SELECT TIME '10 -12:13:14' FROM dual;\nSELECT TIME ' 12 : 13 : 14 ' FROM dual;\nSELECT TIME '12 13 14' FROM dual;\nSELECT TIME '12-13-14' FROM dual;\nSELECT TIME '12.13.14' FROM dual;\nSELECT TIME '12:13:' FROM dual;\nSELECT TIME '12:13' FROM dual;\nSELECT TIME '12:' FROM dual;' In this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted. For more information about date and time literals in MySQL, see Date and Time Literals at dev.mysql.com. The following date and type literals are valid for MySQL. 'SELECT TIME '12:13:14' FROM dual;\nSELECT TIME '12:13:14.555' FROM dual;\nSELECT TIME '12:13:14.' FROM dual;\nSELECT TIME '-12:13:14' FROM dual;\nSELECT TIME '10 12:13:14' FROM dual;\nSELECT TIME '-10 12:13:14' FROM dual;'",
                  "markdown": "Reports errors in date and time literals. This inspection is available in MySQL, Oracle, Db2, and H2.\n\nExample (MySQL):\n\n    SELECT TIME '10 -12:13:14' FROM dual;\n    SELECT TIME ' 12 : 13 : 14 ' FROM dual;\n    SELECT TIME '12 13 14' FROM dual;\n    SELECT TIME '12-13-14' FROM dual;\n    SELECT TIME '12.13.14' FROM dual;\n    SELECT TIME '12:13:' FROM dual;\n    SELECT TIME '12:13' FROM dual;\n    SELECT TIME '12:' FROM dual;\n\nIn this example, dates ignore the MySQL standard for date and time literals. Therefore, they will be highlighted.\nFor more information about date and time literals in MySQL, see [Date and Time Literals at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/date-and-time-literals.html).\n\nThe following date and type literals are valid for MySQL.\n\n    SELECT TIME '12:13:14' FROM dual;\n    SELECT TIME '12:13:14.555' FROM dual;\n    SELECT TIME '12:13:14.' FROM dual;\n    SELECT TIME '-12:13:14' FROM dual;\n    SELECT TIME '10 12:13:14' FROM dual;\n    SELECT TIME '-10 12:13:14' FROM dual;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDateTime",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSideEffectsInspection",
                "shortDescription": {
                  "text": "Statement with side effects"
                },
                "fullDescription": {
                  "text": "Reports statements that might lead to modification of a database during a read-only connection. To enable read-only mode for a connection, right-click a data source in the Database tool window (View | Tool Windows | Database) and select Properties. In the Data Sources and Drivers dialog, click the Options tab and select the Read-only checkbox. Example (MySQL): 'CREATE TABLE foo(a INT);\nINSERT INTO foo VALUES (1);' As 'CREATE TABLE' and 'INSERT INTO' statements lead to a database modification, these statements will be highlighted in read-only connection mode.",
                  "markdown": "Reports statements that might lead to modification of a database during a read-only connection.\n\nTo enable read-only mode for a\nconnection,\nright-click a data source in the **Database** tool window (**View \\| Tool Windows \\| Database** ) and select **Properties** .\nIn the **Data Sources and Drivers** dialog, click the **Options** tab and select the **Read-only** checkbox.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT);\n    INSERT INTO foo VALUES (1);\n\nAs `CREATE TABLE` and `INSERT INTO` statements lead to a database modification, these statements will be highlighted\nin read-only connection mode."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlSideEffects",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIllegalCursorStateInspection",
                "shortDescription": {
                  "text": "Illegal cursor state"
                },
                "fullDescription": {
                  "text": "Reports illegal cursor states inside SQL routines. A routine has CLOSE or FETCH statements but a cursor might be closed. A routine has the OPEN statement but a cursor might be opened. Example (Microsoft SQL Server): 'CREATE TABLE t(col INT);\n\nCREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;' According to CLOSE (Transact-SQL) at docs.microsoft.com, CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are already closed. So, we need to open the cursor to fix the warning. 'CREATE PROCEDURE foo() AS\nBEGIN\nDECLARE my_cursor CURSOR FOR SELECT * FROM t;\nDECLARE a INT;\nOPEN my_cursor;\nFETCH my_cursor INTO a;\nCLOSE my_cursor;\nEND;'",
                  "markdown": "Reports illegal cursor states inside SQL routines.\n\n* A routine has CLOSE or FETCH statements but a cursor might be closed.\n* A routine has the OPEN statement but a cursor might be opened.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE t(col INT);\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n\nAccording to [CLOSE (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/language-elements/close-transact-sql), CLOSE must be issued on an open cursor, and CLOSE is not allowed on cursors that have only been declared or are\nalready closed. So, we need to open the cursor to fix the warning.\n\n    CREATE PROCEDURE foo() AS\n    BEGIN\n    DECLARE my_cursor CURSOR FOR SELECT * FROM t;\n    DECLARE a INT;\n    OPEN my_cursor;\n    FETCH my_cursor INTO a;\n    CLOSE my_cursor;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlIllegalCursorState",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlJoinWithoutOnInspection",
                "shortDescription": {
                  "text": "Unsafe 'join' clause in 'delete' statement"
                },
                "fullDescription": {
                  "text": "Reports missing conditional checks for statements that might modify the whole database. For example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops contents of the entire table. Example (MySQL): 'CREATE TABLE foo (a INT,b INT,c INT);\nCREATE TABLE bar (a INT,b INT,c INT);\n\nDELETE table1 FROM foo table1  INNER JOIN bar table2;'",
                  "markdown": "Reports missing conditional checks for statements that might modify the whole database.\n\nFor example, usages of JOIN clauses inside DELETE statements without ON or WHERE. Without conditional checks on JOIN, DELETE drops\ncontents of the entire table.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT,b INT,c INT);\n    CREATE TABLE bar (a INT,b INT,c INT);\n\n    DELETE table1 FROM foo table1  INNER JOIN bar table2;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlJoinWithoutOn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDropIndexedColumnInspection",
                "shortDescription": {
                  "text": "Index is dependent on column"
                },
                "fullDescription": {
                  "text": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE. Example (Microsoft SQL Server): 'CREATE TABLE test_index\n(\ncol  INT NOT NULL,\ncol2 INT NOT NULL,\ncol3 INT NOT NULL UNIQUE,\ncol4 VARCHAR(200)\n);\n\nCREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\nALTER TABLE test_index\nDROP COLUMN col;' You cannot delete the 'col' column because it is in the indexed table. To delete the column, you need to delete the 'aaaa' index first (for example, DROP INDEX aaaa).",
                  "markdown": "Reports cases when you try to drop columns from indexed tables. This inspection is available in Microsoft SQL Server and Sybase ASE.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE test_index\n    (\n    col  INT NOT NULL,\n    col2 INT NOT NULL,\n    col3 INT NOT NULL UNIQUE,\n    col4 VARCHAR(200)\n    );\n\n    CREATE UNIQUE INDEX aaaa ON test_index (col, col2);\n\n    ALTER TABLE test_index\n    DROP COLUMN col;\n\nYou cannot delete the `col` column because it is in the indexed table. To delete the column, you need to delete the\n`aaaa` index first (for example, DROP INDEX aaaa)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDropIndexedColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCheckUsingColumnsInspection",
                "shortDescription": {
                  "text": "Check using clause columns"
                },
                "fullDescription": {
                  "text": "Reports columns in the USING clause that does not exist in both tables. Example (MySQL): 'CREATE TABLE t1 (i INT, j INT);\nCREATE TABLE t2 (k INT, l INT);\nSELECT * FROM t1 JOIN t2 USING (j);' In USING clauses, a column name must be present in both tables, and the SELECT query will automatically join those tables by using the given column name. As we do not have the 'j' column in 't2', we can rewrite the query using ON. The ON clause can join tables where the column names do not match in both tables. 'SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;'",
                  "markdown": "Reports columns in the USING clause that does not exist in both tables.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (i INT, j INT);\n    CREATE TABLE t2 (k INT, l INT);\n    SELECT * FROM t1 JOIN t2 USING (j);\n\nIn USING clauses, a column name must be present in both tables, and the SELECT query will automatically join\nthose tables by using the given column name. As we do not have the `j` column in `t2`, we can\nrewrite the query using ON. The ON clause can join tables where the column names do not match in both tables.\n\n    SELECT * FROM t1 JOIN t2 ON t1.j = t2.l;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCheckUsingColumns",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertValuesInspection",
                "shortDescription": {
                  "text": "VALUES clause cardinality"
                },
                "fullDescription": {
                  "text": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\n\nINSERT INTO foo VALUES (1,2,3,4)' The 'foo' table has three columns but in the INSERT INTO statement we pass four.",
                  "markdown": "Reports situations when a number of parameters in VALUES does not match a number of columns in a target table.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n\n    INSERT INTO foo VALUES (1,2,3,4)\n\nThe `foo` table has three columns but in the INSERT INTO statement we pass four."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlInsertValues",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDialectInspection",
                "shortDescription": {
                  "text": "SQL dialect detection"
                },
                "fullDescription": {
                  "text": "Reports situations when a dialect is not assigned to an SQL file. For example, when you open a new SQL file without assigning a dialect to it, you see a notification where the best matching dialect is advised. Click the Use <dialect> link to use the advised dialect. Alternatively, click the Change dialect to link to select the other dialect.",
                  "markdown": "Reports situations when a dialect is not assigned to an SQL file.\n\nFor example, when you open a new SQL file without assigning a dialect\nto it, you see a notification where the best matching dialect is advised. Click the **Use \\<dialect\\>** link to use the advised\ndialect. Alternatively, click the **Change dialect to** link to select the other dialect."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDialectInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantElseNullInspection",
                "shortDescription": {
                  "text": "Redundant ELSE NULL clause"
                },
                "fullDescription": {
                  "text": "Reports redundant ELSE NULL clauses. Example (MySQL): 'SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;' The 'ELSE NULL' part will never be executed and may be omitted.",
                  "markdown": "Reports redundant ELSE NULL clauses.\n\nExample (MySQL):\n\n    SELECT CASE WHEN 2 > 1 THEN 'OK' ELSE NULL END AS alias FROM foo;\n\nThe `ELSE NULL` part will never be executed and may be omitted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantElseNull",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCallNotationInspection",
                "shortDescription": {
                  "text": "Using of named and positional arguments"
                },
                "fullDescription": {
                  "text": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2. Example (In PostgreSQL): 'CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n    LANGUAGE plpgsql AS\n$$\nBEGIN\n    RETURN a + b + c;\nEND\n$$;\nSELECT foo(a => 1, b => 2, c => 3);\n  -- `3` goes after the named argument\nSELECT foo(1, b => 2, 3);\n  -- `1` and `3` go after the named argument\nSELECT foo(b => 2, 1, 3);'",
                  "markdown": "Reports calls in which positional arguments go after the named ones. Works in PostgreSQL, Oracle, and Db2.\n\nExample (In PostgreSQL):\n\n    CREATE FUNCTION foo(a int, b int, c int) RETURNS int\n        LANGUAGE plpgsql AS\n    $$\n    BEGIN\n        RETURN a + b + c;\n    END\n    $$;\n    SELECT foo(a => 1, b => 2, c => 3);\n      -- `3` goes after the named argument\n    SELECT foo(1, b => 2, 3);\n      -- `1` and `3` go after the named argument\n    SELECT foo(b => 2, 1, 3);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlCallNotation",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MysqlParsingInspection",
                "shortDescription": {
                  "text": "Unsupported syntax in pre-8.0 versions"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of UNION in queries. The inspection works in MySQL versions that are earlier than 8.0. Example (MySQL): 'SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;'",
                  "markdown": "Reports invalid usages of UNION in queries.\n\nThe inspection works in MySQL versions that are earlier than 8.0.\n\nExample (MySQL):\n\n\n    SELECT * FROM (SELECT 1 UNION (SELECT 1 UNION SELECT 2)) a;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MysqlParsing",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MySQL",
                      "index": 19,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated methods in MongoDB and JavaScript code. The quick-fix replaces deprecated methods with recommended alternatives. Example: 'db.my_collection.insert()' After the quick-fix is applied: 'db.my_collection.insertOne()'",
                  "markdown": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n\n      db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n\n      db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSDeprecation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 16,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDuplicateColumnInspection",
                "shortDescription": {
                  "text": "Duplicating column name in SELECT"
                },
                "fullDescription": {
                  "text": "Reports duplicated names of column aliases in SELECT lists. Example (Sybase ASE): 'CREATE TABLE t1 (a TEXT, b INT, c INT);\n\nSELECT a AS x, b AS x FROM t1;' The 'x' alias name is used for 'a' and 'b' columns. These assignments are highlighted as errors because you cannot use identical alias names for columns in Sybase ASE.",
                  "markdown": "Reports duplicated names of column aliases in SELECT lists.\n\nExample (Sybase ASE):\n\n    CREATE TABLE t1 (a TEXT, b INT, c INT);\n\n    SELECT a AS x, b AS x FROM t1;\n\nThe `x` alias name is used for `a` and `b` columns. These assignments are highlighted as errors because\nyou cannot use identical alias names for columns in Sybase ASE."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDuplicateColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlShadowingAliasInspection",
                "shortDescription": {
                  "text": "Column is shadowed by alias"
                },
                "fullDescription": {
                  "text": "Reports SELECT aliases with names that match column names in the FROM clause. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT);\nSELECT a b, c FROM foo;' The 'a' column uses the 'b' alias but the 'b' name is also used by the column from the 'foo' table.",
                  "markdown": "Reports SELECT aliases with names that match column names in the FROM clause.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT);\n    SELECT a b, c FROM foo;\n\nThe `a` column uses the `b` alias but the `b` name is also used by the column from the `foo`\ntable."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlShadowingAlias",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSDeprecationInspection",
                "shortDescription": {
                  "text": "Deprecated element"
                },
                "fullDescription": {
                  "text": "Reports usages of deprecated methods in MongoDB and JavaScript code. The quick-fix replaces deprecated methods with recommended alternatives. Example: 'db.my_collection.insert()' After the quick-fix is applied: 'db.my_collection.insertOne()'",
                  "markdown": "Reports usages of deprecated methods in MongoDB and JavaScript code.\n\nThe quick-fix replaces deprecated methods with recommended alternatives.\n\nExample:\n\n    db.my_collection.insert()\n\nAfter the quick-fix is applied:\n\n    db.my_collection.insertOne()\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSDeprecation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 16,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTypeInspection",
                "shortDescription": {
                  "text": "Types compatibility"
                },
                "fullDescription": {
                  "text": "Reports type-related errors.",
                  "markdown": "Reports type-related errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnreachableCodeInspection",
                "shortDescription": {
                  "text": "Unreachable code"
                },
                "fullDescription": {
                  "text": "Reports unreachable statements inside SQL routines. Example (Microsoft SQL Server): 'CREATE FUNCTION foo() RETURNS INT AS\nBEGIN\n    THROW;\n    RETURN 1;\nEND;' In Microsoft SQL Server, the 'THROW' statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH construct. Therefore, the 'RETURN 1;' part will never be executed.",
                  "markdown": "Reports unreachable statements inside SQL routines.\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo() RETURNS INT AS\n    BEGIN\n        THROW;\n        RETURN 1;\n    END;\n\nIn Microsoft SQL Server, the `THROW` statement raises an exception and transfers execution to the CATCH block of the TRY...CATCH\nconstruct. Therefore, the `RETURN 1;` part will never be executed."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnreachable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnicodeStringLiteralInspection",
                "shortDescription": {
                  "text": "Unicode usage in SQL"
                },
                "fullDescription": {
                  "text": "Reports string literals that use national characters without the 'N' prefix. Without the N prefix, the string is converted to the default code page of the database. This default code page may not recognize certain characters. For more information, see nchar and nvarchar (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL Server): 'SELECT 'abcde' AS a;\nSELECT N'abcde' AS b;\nSELECT 'абвгд' AS c;\nSELECT N'абвгд' AS d;' The 'SELECT 'абвгд' AS c;' does not have the 'N' prefix, the ''абвгд'' part will be highlighted.",
                  "markdown": "Reports string literals that use national characters without the `N` prefix.\n\nWithout the N prefix, the string is converted to the default\ncode page of the database. This default code page may not recognize certain characters. For more information, see\n[nchar and nvarchar\n(Transact-SQL)\nat docs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/data-types/nchar-and-nvarchar-transact-sql).\n\nExample (Microsoft SQL Server):\n\n    SELECT 'abcde' AS a;\n    SELECT N'abcde' AS b;\n    SELECT 'абвгд' AS c;\n    SELECT N'абвгд' AS d;\n\nThe `SELECT 'абвгд' AS c;` does not have the `N` prefix, the `'абвгд'` part will be highlighted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnicodeStringLiteral",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedVariableInspection",
                "shortDescription": {
                  "text": "Unused variable"
                },
                "fullDescription": {
                  "text": "Reports unused arguments, variables, or parameters. Example (PostgreSQL): 'CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n$$\nBEGIN\n    RETURN PARAMUSED;\nEND\n$$ LANGUAGE plpgsql;' The 'PARAMUNUSED' parameter is not used in the function and might be deleted.",
                  "markdown": "Reports unused arguments, variables, or parameters.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION foo(PARAMUSED INT, PARAMUNUSED INT) RETURNS INT AS\n    $$\n    BEGIN\n        RETURN PARAMUSED;\n    END\n    $$ LANGUAGE plpgsql;\n\nThe `PARAMUNUSED` parameter is not used in the function and might be deleted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnused",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNoDataSourceInspection",
                "shortDescription": {
                  "text": "No data sources configured"
                },
                "fullDescription": {
                  "text": "Reports the absence of data sources in the Database tool window (View | Tool Windows | Database).",
                  "markdown": "Reports the absence of data sources in the **Database** tool window (**View \\| Tool Windows \\| Database**)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlNoDataSourceInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlResolveInspection",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved SQL references. Example (MySQL): 'CREATE TABLE users(id INT, name VARCHAR(40));\nCREATE TABLE admins(id INT, col1 INT);\n\nSELECT users.id, admins.id FROM admins WHERE admins.id > 1;' The 'users.id' column is unresolved because the 'users' table is missing in the FROM clause.",
                  "markdown": "Reports unresolved SQL references.\n\nExample (MySQL):\n\n    CREATE TABLE users(id INT, name VARCHAR(40));\n    CREATE TABLE admins(id INT, col1 INT);\n\n    SELECT users.id, admins.id FROM admins WHERE admins.id > 1;\n\nThe `users.id` column is unresolved because the `users` table is missing in the FROM clause."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlResolve",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PgSelectFromProcedureInspection",
                "shortDescription": {
                  "text": "Postgres: Select from procedure call"
                },
                "fullDescription": {
                  "text": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, 'AS t1(s VARCHAR)'). This requirement does not apply to scalar functions. Example (PostgreSQL): 'CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\nSELECT 1;\n$$ LANGUAGE sql;\nSELECT * FROM produce_a_table() AS s (c1 INT);\nSELECT * FROM produce_a_table() AS s (c1);\nSELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;' The 'AS s (c1 INT)' has a typed alias, while 'AS s (c1)' and 'AS t1' do not. In this case, the second call of 'produce_a_table()' and 'DBLINK()' will be highlighted.",
                  "markdown": "Reports situations when you make SELECT from a function or a DBLINK without an alias with a type (for example, `AS t1(s VARCHAR)`).\n\nThis requirement does not apply to scalar functions.\n\nExample (PostgreSQL):\n\n    CREATE FUNCTION produce_a_table() RETURNS RECORD AS $$\n    SELECT 1;\n    $$ LANGUAGE sql;\n    SELECT * FROM produce_a_table() AS s (c1 INT);\n    SELECT * FROM produce_a_table() AS s (c1);\n    SELECT * FROM DBLINK('dbname=mydb', 'SELECT proname, prosrc FROM pg_proc') AS t1;\n\nThe `AS s (c1 INT)` has a typed alias, while `AS s (c1)` and `AS t1` do not.\nIn this case, the second call of `produce_a_table()` and `DBLINK()` will be highlighted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "PgSelectFromProcedure",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "PostgreSQL",
                      "index": 73,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCurrentSchemaInspection",
                "shortDescription": {
                  "text": "Current console schema introspected"
                },
                "fullDescription": {
                  "text": "Reports schemas and databases in the current session that are not introspected. For example, this warning might occur when you try to create a table in the schema that is not introspected. Introspection is a method of inspecting a data source. When you perform introspection, structural information in the data source is inspected to detect tables, columns, functions, and other elements with their attributes.",
                  "markdown": "Reports schemas and databases in the current session that are not introspected.\n\nFor example, this warning might occur when you try to create a table in the schema that is not introspected.\n\nIntrospection is a method of inspecting a data source. When you perform introspection, structural information in the data source is\ninspected to detect tables, columns, functions, and other elements with their attributes."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCurrentSchemaInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMisleadingReferenceInspection",
                "shortDescription": {
                  "text": "Misleading references"
                },
                "fullDescription": {
                  "text": "Reports ambiguous references in SQL code. For example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected results due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority. Example (PostgreSQL): 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\nDECLARE\n    b INT;\nBEGIN\n      -- `name` is ambiguous as it is used as a column name and a parameter\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;' In PostgreSQL, you can use the '#variable_conflict' directives to explicitly specify a correct reference. For example, use '#variable_conflict use_column' to refer to a column name, or '#variable_conflict use_variable' to refer to a parameter. 'CREATE TABLE foo\n(\n    id   INT,\n    name VARCHAR(5)\n);\nCREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n$$\n    #variable_conflict use_column\nDECLARE\n    b INT;\nBEGIN\n    SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n    RETURN b;\nEND;\n$$ LANGUAGE plpgsql;'",
                  "markdown": "Reports ambiguous references in SQL code.\n\nFor example, when a name refer to both a table column and a routine parameter. The execution of such code might lead to errors or unexpected\nresults due to counter-intuitive resolution logic. Usually, names with a more local scope have higher priority.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n    DECLARE\n        b INT;\n    BEGIN\n          -- `name` is ambiguous as it is used as a column name and a parameter\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n\nIn PostgreSQL, you can use the `#variable_conflict` directives to explicitly specify a correct reference. For example,\nuse `#variable_conflict use_column` to refer to a column name, or `#variable_conflict use_variable` to refer to a\nparameter.\n\n    CREATE TABLE foo\n    (\n        id   INT,\n        name VARCHAR(5)\n    );\n    CREATE FUNCTION func(name VARCHAR(5)) RETURNS INT AS\n    $$\n        #variable_conflict use_column\n    DECLARE\n        b INT;\n    BEGIN\n        SELECT COUNT(*) INTO b FROM foo t WHERE t.name = name;\n        RETURN b;\n    END;\n    $$ LANGUAGE plpgsql;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMisleadingReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertIntoGeneratedColumnInspection",
                "shortDescription": {
                  "text": "Insertion into generated columns"
                },
                "fullDescription": {
                  "text": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written. Example (PostgreSQL): 'CREATE TABLE foo\n(\n   col1 INT,\n   col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n);\nINSERT INTO foo(col1, col2) VALUES (1, 2);'\n You cannot insert '2' into the 'col2' column because this column is generated. For this script to work, you can change '2' to DEFAULT. 'INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);'",
                  "markdown": "Reports INSERT statements that assign values to generated columns. Generated columns can be read, but their values can not be directly written.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo\n    (\n       col1 INT,\n       col2 INT GENERATED ALWAYS AS (col1 + 1) STORED\n    );\n    INSERT INTO foo(col1, col2) VALUES (1, 2);\n\nYou cannot insert `2` into the `col2` column because this column is generated.\nFor this script to work, you can change `2` to DEFAULT.\n`INSERT INTO foo(col1, col2) VALUES (1, DEFAULT);`"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlInsertIntoGeneratedColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantLimitInspection",
                "shortDescription": {
                  "text": "Redundant row limiting in queries"
                },
                "fullDescription": {
                  "text": "Reports redundant row limiting clauses like FETCH and LIMIT in queries. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);' To fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because the usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first 'N' rows and this will influence the output. 'SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\nSELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);'",
                  "markdown": "Reports redundant row limiting clauses like FETCH and LIMIT in queries.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo FETCH FIRST 2 ROWS ONLY);\n\nTo fix the warning, you can add OFFSET to limiting clauses. If OFFSET is missing, then LIMIT is redundant because\nthe usage of LIMIT does not influence the operation result of EXISTS. In case with OFFSET, we skip first `N` rows and this will\ninfluence the output.\n\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW LIMIT 2);\n    SELECT * FROM foo WHERE EXISTS(SELECT * FROM foo OFFSET 1 ROW FETCH FIRST 2 ROWS ONLY);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantLimit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlInsertNullIntoNotNullInspection",
                "shortDescription": {
                  "text": "Insert NULL into NOT NULL column"
                },
                "fullDescription": {
                  "text": "Reports cases when you insert NULL values into columns that accept only NOT NULL values. Example (Microsoft SQL Server): 'CREATE TABLE br2 (\nid INT NOT NULL,\ncol1 NVARCHAR (20) NOT NULL,\ncol2 NVARCHAR (20) NOT NULL,\n);\n--\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, NULL, NULL);' You cannot insert NULL values in 'col1' and 'col2' because they are defined as NOT NULL. If you run the script as is, you will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, '42' and ''bird''). INSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');",
                  "markdown": "Reports cases when you insert NULL values into columns that accept only NOT NULL values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE br2 (\n    id INT NOT NULL,\n    col1 NVARCHAR (20) NOT NULL,\n    col2 NVARCHAR (20) NOT NULL,\n    );\n    --\n    INSERT INTO br2 (id, col1, col2)\n    VALUES (1, NULL, NULL);\n\nYou cannot insert NULL values in `col1` and `col2` because they are defined as NOT NULL. If you run the script as\nis,\nyou will receive an error. To fix this code, replace NULL in the VALUES part with some values (for example, `42` and\n`'bird'`).\n\n```\nINSERT INTO br2 (id, col1, col2)\nVALUES (1, 42, 'bird');\n```"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlInsertNullIntoNotNull",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDerivedTableAliasInspection",
                "shortDescription": {
                  "text": "Each derived table should have alias"
                },
                "fullDescription": {
                  "text": "Reports derived tables without aliases. Example (MySQL): 'CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\nCREATE TABLE table2 (id INT, age INTEGER);\n\nSELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);' According to Derived Tables at dev.mysql.com, an alias is mandatory. You can add the alias by using the Introduce alias quick-fix. After the quick-fix is applied: 'SELECT id AS ID, name, cats, age\nFROM (SELECT table1.id, name, cats, age\nFROM table1\nJOIN table2 ON table1.id = table2.id);'",
                  "markdown": "Reports derived tables without aliases.\n\nExample (MySQL):\n\n    CREATE TABLE table1 (id INT, name VARCHAR(20), cats FLOAT);\n    CREATE TABLE table2 (id INT, age INTEGER);\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n\nAccording to [Derived Tables at dev.mysql.com](https://dev.mysql.com/doc/refman/8.0/en/derived-tables.html), an alias is\nmandatory. You can add the alias by using the **Introduce alias** quick-fix.\n\nAfter the quick-fix is applied:\n\n    SELECT id AS ID, name, cats, age\n    FROM (SELECT table1.id, name, cats, age\n    FROM table1\n    JOIN table2 ON table1.id = table2.id);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDerivedTableAlias",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsBuiltinInspection",
                "shortDescription": {
                  "text": "Builtin functions"
                },
                "fullDescription": {
                  "text": "Reports truncations of string arguments in ISNULL functions. The ISNULL syntax is 'ISNULL(check_expression, replacement_value)'. According to ISNULL at docs.microsoft.com, 'replacement_value' will be truncated if 'replacement_value' is longer than 'check_expression'. Example (Microsoft SQL Server): 'DECLARE @name1 VARCHAR(2) = NULL;\nDECLARE @name2 VARCHAR(10) = 'Example';\nDECLARE @name3 VARCHAR(2) = 'Hi';\n\n  -- `@name2` is VARCHAR(10) and will be truncated\nSELECT ISNULL(@name1, @name2);\n\n  -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\nSELECT ISNULL(@name1, @name3);'",
                  "markdown": "Reports truncations of string arguments in ISNULL functions.\n\nThe ISNULL syntax is `ISNULL(check_expression, replacement_value)`.\n\nAccording to [ISNULL at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/functions/isnull-transact-sql), `replacement_value` will be truncated if `replacement_value` is longer than\n`check_expression`.\n\nExample (Microsoft SQL Server):\n\n    DECLARE @name1 VARCHAR(2) = NULL;\n    DECLARE @name2 VARCHAR(10) = 'Example';\n    DECLARE @name3 VARCHAR(2) = 'Hi';\n\n      -- `@name2` is VARCHAR(10) and will be truncated\n    SELECT ISNULL(@name1, @name2);\n\n      -- `@name3` is VARCHAR(2) as `@name1` and will not be truncated\n    SELECT ISNULL(@name1, @name3);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MssqlBuiltin",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 74,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTriggerTransitionInspection",
                "shortDescription": {
                  "text": "Suspicious code in triggers"
                },
                "fullDescription": {
                  "text": "Reports incorrect usages of transition table variables in triggers. Example (HSQLDB): 'CREATE TABLE foo(a INT);\n\nCREATE TRIGGER trg\n AFTER DELETE ON foo\nBEGIN\n   SELECT * FROM NEW;\nEND;\n\nCREATE TRIGGER trig AFTER INSERT ON foo\n   REFERENCING OLD ROW AS newrow\n   FOR EACH ROW WHEN (a > 1)\n   INSERT INTO foo VALUES (1)' In HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous example, NEW in 'SELECT * FROM NEW;' will be highlighted as well as OLD in 'REFERENCING OLD ROW AS newrow'.",
                  "markdown": "Reports incorrect usages of transition table variables in triggers.\n\nExample (HSQLDB):\n\n    CREATE TABLE foo(a INT);\n\n    CREATE TRIGGER trg\n     AFTER DELETE ON foo\n    BEGIN\n       SELECT * FROM NEW;\n    END;\n\n    CREATE TRIGGER trig AFTER INSERT ON foo\n       REFERENCING OLD ROW AS newrow\n       FOR EACH ROW WHEN (a > 1)\n       INSERT INTO foo VALUES (1)\n\nIn HSQLDB, DELETE triggers may be used only with the OLD state while INSERT triggers may have only the NEW state. So, in the previous\nexample, NEW in `SELECT * FROM NEW;` will be highlighted as well as OLD in `REFERENCING OLD ROW AS newrow`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlTriggerTransition",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlNamedArgumentsInspection",
                "shortDescription": {
                  "text": "Named arguments should be used"
                },
                "fullDescription": {
                  "text": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled. For more information about the difference between named and unnamed parameters, see Binding Parameters by Name (Named Parameters) at docs.microsoft.com . Example (Microsoft SQL Server): 'CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\nBEGIN\n    RETURN n + m;\nEND;\n\nCREATE PROCEDURE test AS\nBEGIN\n    foo n = 1, m = 2;\n\n--- The following call misses parameter names and will be highlighted\n    foo 1, 2;\nEND;' Parameters '1, 2' in the 'foo 1, 2;' call are highlighted because they miss names.",
                  "markdown": "Reports arguments that are used without names in routine calls. By default, this inspection is disabled.\n\nFor more information about the difference between named and unnamed parameters, see [Binding Parameters by Name (Named Parameters) at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/odbc/reference/develop-app/binding-parameters-by-name-named-parameters).\n\nExample (Microsoft SQL Server):\n\n    CREATE FUNCTION foo(n INT, m INT) RETURNS INT AS\n    BEGIN\n        RETURN n + m;\n    END;\n\n    CREATE PROCEDURE test AS\n    BEGIN\n        foo n = 1, m = 2;\n\n    --- The following call misses parameter names and will be highlighted\n        foo 1, 2;\n    END;\n\nParameters `1, 2` in the `foo 1, 2;` call are highlighted because they miss names."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlNamedArguments",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMultipleLimitClausesInspection",
                "shortDescription": {
                  "text": "Multiple row limiting/offset clauses in queries"
                },
                "fullDescription": {
                  "text": "Reports usages of multiple row limiting clauses in a single query. Example (Microsoft SQL Server): 'create table foo(a int);\nselect top 1 * from foo order by a offset 10 rows fetch next 20 rows only;' The SELECT TOP clause is used to specify that only 1 record must be returned. The FETCH clause specifies the number of rows to return after the OFFSET clause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant.",
                  "markdown": "Reports usages of multiple row limiting clauses in a single query.\n\nExample (Microsoft SQL Server):\n\n    create table foo(a int);\n    select top 1 * from foo order by a offset 10 rows fetch next 20 rows only;\n\nThe SELECT TOP clause is used to specify that only 1 record must be\nreturned. The FETCH clause specifies the number of rows to return after the OFFSET\nclause has been processed. But as we already have the SELECT TOP limiting clause, the FETCH clause might be redundant."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMultipleLimitClauses",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlCaseVsCoalesceInspection",
                "shortDescription": {
                  "text": "Using CASE instead of COALESCE function and vice versa"
                },
                "fullDescription": {
                  "text": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: Replace with 'COALESCE' call and the opposite one Replace with CASE expression. Example (MySQL): 'SELECT\n  -- this CASE may be replaced by COALESCE\n\tCASE\n\t\tWHEN C1 IS NOT NULL THEN C1\n\t\tELSE 0\n\t\tEND\nFROM dual;' In the example, the CASE statement can be replaced with 'SELECT COALESCE(C1, 0)' that produces the same output. If you prefer using CASE expressions, select the Prefer CASE expressions over COALESCE function option on the inspection page.",
                  "markdown": "Reports situations when CASE and COALESCE calls are interchangeable. This inspection has the following intention actions: **Replace\nwith 'COALESCE' call** and the opposite one **Replace with CASE expression** .\n\nExample (MySQL):\n\n    SELECT\n      -- this CASE may be replaced by COALESCE\n    \tCASE\n    \t\tWHEN C1 IS NOT NULL THEN C1\n    \t\tELSE 0\n    \t\tEND\n    FROM dual;\n\nIn the example, the CASE statement can be replaced with `SELECT COALESCE(C1, 0)` that produces the same output.\n\nIf you prefer using CASE expressions, select the **Prefer CASE expressions over COALESCE function** option on\nthe inspection page."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlCaseVsCoalesce",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlIdentifierInspection",
                "shortDescription": {
                  "text": "Identifier should be quoted"
                },
                "fullDescription": {
                  "text": "Reports situations when you use SQL reserved keywords as identifier names in your query. Example (Microsoft SQL Server): 'CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);' We use 'select', 'identity', and 'order' as table and column names. But they are also reserved keywords in Microsoft SQL Server. Therefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the Quote identifier quick-fix. After the quick-fix is applied: 'CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);'",
                  "markdown": "Reports situations when you use SQL reserved keywords as identifier names in your query.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE select (identity INT IDENTITY NOT NULL, order INT NOT NULL);\n\nWe use `select`, `identity`, and `order` as table and column names.\nBut they are also reserved keywords in Microsoft SQL Server.\nTherefore, in order to use them as object names in the query, you must quote these identifiers. To quote them, you can use the\n**Quote identifier** quick-fix.\n\nAfter the quick-fix is applied:\n\n    CREATE TABLE [select] ([identity] INT IDENTITY NOT NULL, [order] INT NOT NULL);\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlIdentifier",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantAliasInspection",
                "shortDescription": {
                  "text": "Redundant alias expressions"
                },
                "fullDescription": {
                  "text": "Reports alias expressions that duplicate names of columns in tables and might be redundant. Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT * FROM foo foo(a, b);\nSELECT * FROM foo foo(a);\nSELECT * FROM foo foo(x);\nSELECT * FROM foo foo(x, y);' The first two aliases use the same column names as in the 'foo' table. They are considered redundant because they column names are identical.",
                  "markdown": "Reports alias expressions that duplicate names of columns in tables and might be redundant.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT * FROM foo foo(a, b);\n    SELECT * FROM foo foo(a);\n    SELECT * FROM foo foo(x);\n    SELECT * FROM foo foo(x, y);\n\nThe first two aliases use the same column names as in the `foo` table. They are considered redundant because they\ncolumn names are identical."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantAlias",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlTransactionStatementInTriggerInspection",
                "shortDescription": {
                  "text": "Use of transaction management statements in triggers"
                },
                "fullDescription": {
                  "text": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies. With COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile. The fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As COMMIT terminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception. Changes that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger. Example (Oracle): 'CREATE TABLE employee_audit\n(\n    id          INT  NOT NULL,\n    update_date DATE NOT NULL,\n    old_name    VARCHAR2(100),\n    new_name    VARCHAR2(100)\n);\n\nCREATE TABLE employees\n(\n    id   INT           NOT NULL,\n    name VARCHAR2(100) NOT NULL\n);\n\nCREATE OR REPLACE TRIGGER trig_commit\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    COMMIT;\nEND;\n\nCREATE OR REPLACE TRIGGER trig_rollback\n    AFTER UPDATE OF name\n    ON employees\n    FOR EACH ROW\nBEGIN\n    INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n    ROLLBACK;\nEND;'",
                  "markdown": "Reports usages of transaction management statements like COMMIT or ROLLBACK in trigger bodies.\n\nWith COMMIT or ROLLBACK statements in a trigger body, the trigger will not compile.\nThe fail happens because triggers start during transactions. When the trigger starts the current transaction is still not complete. As\nCOMMIT\nterminates a transaction, both statements (COMMIT and ROLLBACK) would lead to an exception.\nChanges that are executed in a trigger should be committed (or rolled back) by the owning transaction that started the trigger.\n\nExample (Oracle):\n\n    CREATE TABLE employee_audit\n    (\n        id          INT  NOT NULL,\n        update_date DATE NOT NULL,\n        old_name    VARCHAR2(100),\n        new_name    VARCHAR2(100)\n    );\n\n    CREATE TABLE employees\n    (\n        id   INT           NOT NULL,\n        name VARCHAR2(100) NOT NULL\n    );\n\n    CREATE OR REPLACE TRIGGER trig_commit\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        COMMIT;\n    END;\n\n    CREATE OR REPLACE TRIGGER trig_rollback\n        AFTER UPDATE OF name\n        ON employees\n        FOR EACH ROW\n    BEGIN\n        INSERT INTO employee_audit VALUES (:old.id, SYSDATE, :old.name, :new.name);\n        ROLLBACK;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlTransactionStatementInTrigger",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantCodeInCoalesceInspection",
                "shortDescription": {
                  "text": "Redundant code in COALESCE call"
                },
                "fullDescription": {
                  "text": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions. Example (MySQL): 'SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;' The first NOT NULL argument is '42', all other arguments will be grayed out.",
                  "markdown": "Reports all the arguments except for the first expression that does not evaluate to NULL in COALESCE functions.\n\nExample (MySQL):\n\n    SELECT COALESCE(NULL, NULL, NULL, 42, NULL, 'string') as a;\n\nThe first NOT NULL argument is `42`, all other arguments will be grayed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantCodeInCoalesce",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlStorageInspection",
                "shortDescription": {
                  "text": "SQL source modification detection"
                },
                "fullDescription": {
                  "text": "Reports situations when source code of a database object has been changed. The inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an object, run statements, and perform code refactoring. Also, you can run introspection by right-clicking an object and selecting Refresh. The inspection covers the following situations: Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE. You changed the object source code, introspected the database, but source code has been already changed by someone else. The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version.",
                  "markdown": "Reports situations when source code of a database object has been changed.\n\nThe inspection is triggered when you perform database or object introspection. The introspection is run when you open source code of an\nobject, run statements, and perform code refactoring.\nAlso, you can run introspection by right-clicking an object and selecting **Refresh**.\n\nThe inspection covers the following situations:\n\n* Object source code was changed in the database but code in the editor was not updated. Works in PostgreSQL, Microsoft SQL Server, Oracle, and Sybase ASE.\n* You changed the object source code, introspected the database, but source code has been already changed by someone else.\n* The database introspector was updated in the IDE and you need to download new object properties that were missing in the previous introspector version."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlStorageInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MsOrderByInspection",
                "shortDescription": {
                  "text": "ORDER BY in queries"
                },
                "fullDescription": {
                  "text": "Reports usages when the 'ORDER BY' clause is used without 'TOP', 'OFFSET', or 'FOR XML' in views, inline functions, derived tables, subqueries, and common table expressions. For more information about usages of 'ORDER BY', see SELECT - ORDER BY Clause (Transact-SQL) at docs.microsoft.com. Example (Microsoft SQL server): 'CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\nSELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89\nORDER BY b) ALIAS;' In a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery. Alternatively, use the Delete element quick-fix to delete the ORDER BY section. After the quick-fix is applied: 'SELECT *\nFROM (SELECT a, b\nFROM foo A\nWHERE a < 89) ALIAS;'",
                  "markdown": "Reports usages when the `ORDER BY` clause is used without `TOP`, `OFFSET`, or `FOR XML` in views, inline functions, derived tables, subqueries, and common table expressions.\n\nFor more information about usages of `ORDER BY`, see [SELECT - ORDER BY Clause (Transact-SQL) at\ndocs.microsoft.com](https://docs.microsoft.com/en-us/sql/t-sql/queries/select-order-by-clause-transact-sql).\n\nExample (Microsoft SQL server):\n\n    CREATE TABLE foo (a INT NOT NULL, b  INT NOT NULL);\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89\n    ORDER BY b) ALIAS;\n\nIn a subquery, ORDER BY will be highlighted as an error. You can add TOP, OFFSET, or FOR XML to a subquery.\nAlternatively, use the **Delete element** quick-fix to delete the ORDER BY section.\n\nAfter the quick-fix is applied:\n\n    SELECT *\n    FROM (SELECT a, b\n    FROM foo A\n    WHERE a < 89) ALIAS;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MsOrderBy",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL server",
                      "index": 74,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlSignatureInspection",
                "shortDescription": {
                  "text": "Function signature"
                },
                "fullDescription": {
                  "text": "Reports signature issues for built-in functions. The inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues. Example (MySQL): 'CREATE TABLE foo (a INT, b INT, c INT)\n\nSELECT IFNULL() FROM foo; -- error\nSELECT IFNULL(a) FROM foo; -- error\nSELECT IFNULL(a, b) FROM foo; -- OK\nSELECT IFNULL(a, b, c) FROM foo; -- error' In MySQL, the 'IFNULL()' function accepts strictly two arguments. So, only the 'SELECT IFNULL(a, b) FROM foo;' query is correct.",
                  "markdown": "Reports signature issues for built-in functions.\n\nThe inspection will report a wrong number of arguments, invalid keywords, wrong data types, and other issues.\n\nExample (MySQL):\n\n    CREATE TABLE foo (a INT, b INT, c INT)\n\n    SELECT IFNULL() FROM foo; -- error\n    SELECT IFNULL(a) FROM foo; -- error\n    SELECT IFNULL(a, b) FROM foo; -- OK\n    SELECT IFNULL(a, b, c) FROM foo; -- error\n\nIn MySQL, the `IFNULL()` function accepts strictly two arguments. So, only the `SELECT IFNULL(a, b) FROM foo;`\nquery is correct."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlSignature",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlRedundantOrderingDirectionInspection",
                "shortDescription": {
                  "text": "Redundant ordering direction"
                },
                "fullDescription": {
                  "text": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses. Example (MySQL): 'CREATE TABLE foo(a INT, b INT, c INT);\nSELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;' The ORDER BY keyword sorts the records in the ascending order by default. So, the 'ASC' keyword for 'a' and 'c' columns is redundant.",
                  "markdown": "Reports redundant ordering directions like ASC and DESC in ORDER BY clauses.\n\nExample (MySQL):\n\n    CREATE TABLE foo(a INT, b INT, c INT);\n    SELECT * FROM foo ORDER BY a ASC, b DESC, c ASC;\n\nThe ORDER BY keyword sorts the records in the ascending order by default. So, the `ASC` keyword for `a` and\n`c` columns is redundant."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlRedundantOrderingDirection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlDeprecateTypeInspection",
                "shortDescription": {
                  "text": "Deprecated type"
                },
                "fullDescription": {
                  "text": "Reports usages of types that are deprecated and might disappear in future versions of DBMS. Reported types: LONG in Oracle (see Deprecated and Desupported Features at docs.oracle.com). TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com). Example (Oracle): 'CREATE TABLE ot.foo(\na NUMBER GENERATED BY DEFAULT AS IDENTITY,\nb LONG NOT NULL\n);'",
                  "markdown": "Reports usages of types that are deprecated and might disappear in future versions of DBMS.\n\nReported types:\n\n* LONG in Oracle (see [Deprecated\n  and Desupported Features at docs.oracle.com](https://docs.oracle.com/cd/A91202_01/901_doc/server.901/a90120/ch4_dep.htm#6690)).\n* TEXT, NTEXT, and IMAGE in Microsoft SQL Server (see [Deprecated Database Engine Features in SQL Server 2016 at docs.microsoft.com](https://docs.microsoft.com/en-us/sql/database-engine/deprecated-database-engine-features-in-sql-server-2016?view=sql-server-ver15)).\n\nExample (Oracle):\n\n    CREATE TABLE ot.foo(\n    a NUMBER GENERATED BY DEFAULT AS IDENTITY,\n    b LONG NOT NULL\n    );\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlDeprecateType",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAggregatesInspection",
                "shortDescription": {
                  "text": "Aggregate-related problems"
                },
                "fullDescription": {
                  "text": "Reports invalid usages of SQL aggregate functions. The following situations are considered: Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses. 'CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\nSELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\nSELECT * FROM foo GROUP BY a ORDER BY b;' This rule does not apply when grouping is made by the primary key. 'SELECT * FROM foo GROUP BY id ORDER BY b;' Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error. 'SELECT a FROM foo WHERE MAX(b) > 0;\nSELECT a FROM foo GROUP BY MAX(a);' Nested calls of aggregate functions. 'SELECT MAX(SUM(a)) FROM foo GROUP BY a;' This rule does not apply to analytic functions. The following query is valid and correct. 'SELECT MAX(SUM(a) OVER ()) FROM foo;' Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section. 'SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;'",
                  "markdown": "Reports invalid usages of SQL aggregate functions.\n\nThe following situations are considered:\n\n* Columns that are used in HAVING and ORDER BY clauses but are missed in GROUP BY clauses.\n\n      CREATE TABLE foo(id INT PRIMARY KEY, a INT, b INT);\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING b > 0;\n      SELECT * FROM foo GROUP BY a ORDER BY b;\n\n  This rule does not apply when grouping is made by the primary key.\n\n      SELECT * FROM foo GROUP BY id ORDER BY b;\n\n* Aggregate functions in a wrong context. Usually, you can use aggregate functions in the following contexts: a list of expressions in\n  SELECT; in HAVING and ORDER BY sections; and other dialect-specific cases. The following queries will display an error.\n\n      SELECT a FROM foo WHERE MAX(b) > 0;\n      SELECT a FROM foo GROUP BY MAX(a);\n\n* Nested calls of aggregate functions.\n\n      SELECT MAX(SUM(a)) FROM foo GROUP BY a;\n\n  This rule does not apply to analytic functions. The following query is valid and correct.\n\n      SELECT MAX(SUM(a) OVER ()) FROM foo;\n\n* Usages of HAVING without aggregate functions. In this case, consider rewriting your code using the WHERE section.\n\n      SELECT a, MAX(b) FROM foo GROUP BY a HAVING a > 0;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAggregates",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlConstantExpressionInspection",
                "shortDescription": {
                  "text": "Constant expression"
                },
                "fullDescription": {
                  "text": "Reports conditions and expressions that are always true, false or null. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nSELECT a FROM t1 WHERE 'Cat' = 'Cat';\nSELECT a FROM t1 WHERE 'Cat' = null;' The ''Cat' = 'Cat'' is always true and will be reported. The ''Cat' = null' is always null and will be reported.",
                  "markdown": "Reports conditions and expressions that are always true, false or null.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    SELECT a FROM t1 WHERE 'Cat' = 'Cat';\n    SELECT a FROM t1 WHERE 'Cat' = null;\n\nThe `'Cat' = 'Cat'` is always true and will be reported.\n\nThe `'Cat' = null` is always null and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlConstantExpression",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlMissingColumnAliasesInspection",
                "shortDescription": {
                  "text": "Missing column aliases"
                },
                "fullDescription": {
                  "text": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement). Example (PostgreSQL): 'CREATE TABLE foo(a INT, b INT);\n\nSELECT 1, a + 1 AS A2, MAX(b) AS M\nFROM foo;'",
                  "markdown": "Reports queries without explicit aliases in output expressions (for example, in the SELECT statement).\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT, b INT);\n\n    SELECT 1, a + 1 AS A2, MAX(b) AS M\n    FROM foo;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMissingColumnAliases",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAddNotNullColumnInspection",
                "shortDescription": {
                  "text": "Adding not null column without default value"
                },
                "fullDescription": {
                  "text": "Reports attempts to create NOT NULL columns without DEFAULT values. Example (Microsoft SQL Server): 'CREATE TABLE foo (a INT, b  INT)\n\nALTER TABLE foo ADD c INT NOT NULL;' By default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values. If we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record. 'ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;' You can quickly add the DEFAULT value by using the Add DEFAULT value quick-fix.",
                  "markdown": "Reports attempts to create NOT NULL columns without DEFAULT values.\n\nExample (Microsoft SQL Server):\n\n    CREATE TABLE foo (a INT, b  INT)\n\n    ALTER TABLE foo ADD c INT NOT NULL;\n\nBy default, a column holds NULL values. In the example, we use the NOT NULL constraint that enforces a column not to accept NULL values.\nIf we prohibit to use NULL values, we must set the DEFAULT value that SQL can use when we create a new record.\n\n    ALTER TABLE foo ADD c INT NOT NULL DEFAULT 42;\n\nYou can quickly add the DEFAULT value by using the **Add DEFAULT value** quick-fix."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAddNotNullColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraOverloadInspection",
                "shortDescription": {
                  "text": "Overloading errors"
                },
                "fullDescription": {
                  "text": "Reports invalid cases of subprogram overloading in Oracle. Example (Oracle): 'DECLARE\n    SUBTYPE fff IS BINARY_INTEGER;\n    SUBTYPE ggg IS NATURAL;\n    PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n    PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\nBEGIN\n    NULL;\nEND;' You cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a BINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading, see Restrictions on Overloading at docs.oracle.com.",
                  "markdown": "Reports invalid cases of subprogram overloading in Oracle.\n\nExample (Oracle):\n\n    DECLARE\n        SUBTYPE fff IS BINARY_INTEGER;\n        SUBTYPE ggg IS NATURAL;\n        PROCEDURE foo (a IN ggg) IS BEGIN NULL; END;\n        PROCEDURE foo (a IN fff) IS BEGIN NULL; END;\n    BEGIN\n        NULL;\n    END;\n\nYou cannot overload subprograms which parameters differ only in subtypes. For example, you cannot overload procedures where one accepts a\nBINARY INTEGER parameter and the other accepts a NATURAL parameter. For more information about restrictions on procedure overloading,\nsee [Restrictions on Overloading at docs.oracle.com](https://docs.oracle.com/cd/B19306_01/appdev.102/b14261/subprograms.htm)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlOverload",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 81,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraMissingBodyInspection",
                "shortDescription": {
                  "text": "Missing body for package/object type specification"
                },
                "fullDescription": {
                  "text": "Reports package and object type specifications that are missing body declarations. Package specifications and object types that declare routines as well as package specifications with cursors must have body declarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are invoked in program code. Example (Oracle): 'CREATE OR REPLACE PACKAGE ppp IS\n    FUNCTION foo(a INT) RETURN INT;\nEND;'",
                  "markdown": "Reports package and object type specifications that are missing body declarations.\n\nPackage specifications and object types that declare routines as well as package specifications with cursors must have body\ndeclarations where those routines and cursors are implemented. Absence of a body leads to a runtime error when routines or cursors are\ninvoked in program code.\n\nExample (Oracle):\n\n    CREATE OR REPLACE PACKAGE ppp IS\n        FUNCTION foo(a INT) RETURN INT;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlMissingBody",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 81,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "OraUnmatchedForwardDeclarationInspection",
                "shortDescription": {
                  "text": "Forward declaration without definition"
                },
                "fullDescription": {
                  "text": "Reports declarations of procedures and functions that are missing their implementation in code. In Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names of such procedures or functions that are left without implementation. Example (Oracle): 'DECLARE PROCEDURE foo(a int, b varchar2);\nBEGIN\n    NULL;\nEND;' The 'foo' procedure is declared but is missing implementation. We can add the implementation to get rid of the error. 'DECLARE PROCEDURE foo(a int, b varchar2);\n  PROCEDURE foo(a int, b varchar2) IS\nBEGIN\n    NULL;\nEND;\nBEGIN\n    NULL;\nEND;'",
                  "markdown": "Reports declarations of procedures and functions that are missing their implementation in code.\n\nIn Oracle, you can declare a procedure or a function without its body, and write the implementation later. The inspection will report names\nof such procedures or functions that are left without implementation.\n\nExample (Oracle):\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n    BEGIN\n        NULL;\n    END;\n\nThe `foo` procedure is declared but is missing implementation. We can add the implementation to get rid of the error.\n\n    DECLARE PROCEDURE foo(a int, b varchar2);\n      PROCEDURE foo(a int, b varchar2) IS\n    BEGIN\n        NULL;\n    END;\n    BEGIN\n        NULL;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "SqlUnmatchedForwardDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Oracle",
                      "index": 81,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlGotoInspection",
                "shortDescription": {
                  "text": "Usages of GOTO statements"
                },
                "fullDescription": {
                  "text": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop. The extensive use of GOTO statements is generally not recommended. For details, see GOTO statement in SQL procedures at ibm.com. Instead of jumping back to a previous statement using GOTO, consider using a loop. Instead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK). Example (Oracle): 'CREATE PROCEDURE test(n INT) AS\nDECLARE\n    x INT;\nBEGIN\n    x := 0;\n    GOTO a;\n    <<a>> x := 1;\n    IF (n = 0) THEN\n        GOTO a;\n    END IF;\n    WHILE TRUE\n        LOOP\n            GOTO b;\n        END LOOP;\n    <<b>> x := 3;\nEND;'",
                  "markdown": "Reports usages of backward GOTO statements and GOTO statements used to exit a loop.\n\nThe extensive use of GOTO statements is generally\nnot recommended. For details, see [GOTO statement in\nSQL\nprocedures at ibm.com](https://www.ibm.com/docs/no/db2/11.5?topic=procedures-goto-statement-in-sql).\n\nInstead of jumping back to a previous statement using GOTO, consider using a loop.\n\nInstead of exiting the WHILE loop with GOTO, consider using other control-of-flow statements (for example, RETURN or BREAK).\n\nExample (Oracle):\n\n    CREATE PROCEDURE test(n INT) AS\n    DECLARE\n        x INT;\n    BEGIN\n        x := 0;\n        GOTO a;\n        <<a>> x := 1;\n        IF (n = 0) THEN\n            GOTO a;\n        END IF;\n        WHILE TRUE\n            LOOP\n                GOTO b;\n            END LOOP;\n        <<b>> x := 3;\n    END;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlGoto",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSExtResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in MongoDB and JavaScript code.",
                  "markdown": "Reports unresolved references in MongoDB and JavaScript code."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSResolve",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 16,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlWithoutWhereInspection",
                "shortDescription": {
                  "text": "Delete or update statement without where clauses"
                },
                "fullDescription": {
                  "text": "Reports usages of DELETE or UPDATE statements without WHERE clauses. Without WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows. Example (MySQL): 'CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\nupdate t1 set  a = 'Smith';\ndelete from t1;'",
                  "markdown": "Reports usages of DELETE or UPDATE statements without WHERE clauses.\n\nWithout WHERE clauses, DELETE drops all the data from the table, and UPDATE overwrites values for all the table rows.\n\nExample (MySQL):\n\n    CREATE TABLE t1 (a TEXT, b INT, c BOOLEAN);\n    update t1 set  a = 'Smith';\n    delete from t1;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlWithoutWhere",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlAmbiguousColumnInspection",
                "shortDescription": {
                  "text": "Ambiguous reference"
                },
                "fullDescription": {
                  "text": "Reports columns that have identical names but belong to different tables. Example (MySQL): 'CREATE TABLE foo(id INT PRIMARY KEY);\nCREATE TABLE bar(id INT PRIMARY KEY);\n\nSELECT foo.id, bar.id FROM foo, bar WHERE id > 0;' The 'id' column appears in 'foo' and 'bar' tables. You need to qualify the column name to make the query correct. 'SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;'",
                  "markdown": "Reports columns that have identical names but belong to different tables.\n\nExample (MySQL):\n\n    CREATE TABLE foo(id INT PRIMARY KEY);\n    CREATE TABLE bar(id INT PRIMARY KEY);\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE id > 0;\n\nThe `id` column appears in `foo` and `bar` tables. You need to qualify the column name to\nmake the query correct.\n\n    SELECT foo.id, bar.id FROM foo, bar WHERE foo.id > 0;\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlAmbiguousColumn",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "SqlUnusedCteInspection",
                "shortDescription": {
                  "text": "Unused common table expression"
                },
                "fullDescription": {
                  "text": "Reports unused common table expressions (CTE) inside the query. Example (PostgreSQL): 'CREATE TABLE foo(a INT);\n\nWITH a AS (SELECT 1 AS x FROM foo)\nSELECT 1 + 2 FROM foo;' By using WITH, we create a temporary named result set with the name 'a', also known as a common table expression (CTE). But we do not use this CTE later in the code. The unused CTE is greyed out.",
                  "markdown": "Reports unused common table expressions (CTE) inside the query.\n\nExample (PostgreSQL):\n\n    CREATE TABLE foo(a INT);\n\n    WITH a AS (SELECT 1 AS x FROM foo)\n    SELECT 1 + 2 FROM foo;\n\nBy using WITH, we create a temporary named result set with the name `a`, also known as a common table expression (CTE). But\nwe do not use this CTE later in the code. The unused CTE is greyed out."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "SqlUnusedCte",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "SQL",
                      "index": 40,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MongoJSResolveInspection",
                "shortDescription": {
                  "text": "Resolution problems"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in MongoDB and JavaScript code. Example: 'db\nuse foo\n  -- a reference to a non-existing collection\ndb.non_existing_collection\ndb['non_existing_collection']\ndb['non_existing_collection'].find().hasNext()' The 'non_existing_collection' collection does not exist in the database and will be reported.",
                  "markdown": "Reports unresolved references in MongoDB and JavaScript code.\n\nExample:\n\n    db\n    use foo\n      -- a reference to a non-existing collection\n    db.non_existing_collection\n    db['non_existing_collection']\n    db['non_existing_collection'].find().hasNext()\n\nThe `non_existing_collection` collection does not exist in the database and will be reported."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MongoJSResolve",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "MongoJS",
                      "index": 16,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.plugins.markdown",
            "version": "243.6317",
            "rules": [
              {
                "id": "MarkdownOutdatedTableOfContents",
                "shortDescription": {
                  "text": "Outdated table of contents section"
                },
                "fullDescription": {
                  "text": "Checks if a particular table of contents section corresponds to the actual structure of the document.",
                  "markdown": "Checks if a particular table of contents section corresponds to the actual structure of the document."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownOutdatedTableOfContents",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 22,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownUnresolvedLinkLabel",
                "shortDescription": {
                  "text": "Unresolved link label"
                },
                "fullDescription": {
                  "text": "Reports unresolved link labels in Markdown files.",
                  "markdown": "Reports unresolved link labels in Markdown files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownUnresolvedLinkLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 22,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownIncorrectTableFormatting",
                "shortDescription": {
                  "text": "Incorrect table formatting"
                },
                "fullDescription": {
                  "text": "Checks if table is correctly formatted.",
                  "markdown": "Checks if table is correctly formatted."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "MarkdownIncorrectTableFormatting",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 22,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownIncorrectlyNumberedListItem",
                "shortDescription": {
                  "text": "Incorrectly numbered list item"
                },
                "fullDescription": {
                  "text": "Ordered list items are expected to have straight numeration starting from 1. The motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an '<ol>' element for such list, that will number items continuously from 1.",
                  "markdown": "Ordered list items are expected to have straight numeration starting from 1.\n\nThe motivation behind this is that most of Markdown processors are ignoring the numbering of ordered lists. A processor will generate an `<ol>` element for such list, that will number items continuously from 1."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownIncorrectlyNumberedListItem",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 22,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownLinkDestinationWithSpaces",
                "shortDescription": {
                  "text": "Links should not contain spaces"
                },
                "fullDescription": {
                  "text": "To ensure consistency between different tools, file links should not contain spaces. Example: '[Some file link](some file.md)' A quick-fix replaces spaces with their url-encoded equivalent: '[Some file link](some%20file.md)'",
                  "markdown": "To ensure consistency between different tools, file links should not contain spaces.\n\n**Example:**\n\n\n      [Some file link](some file.md)\n\nA quick-fix replaces spaces with their url-encoded equivalent:\n\n\n      [Some file link](some%20file.md)\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownLinkDestinationWithSpaces",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 22,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownNoTableBorders",
                "shortDescription": {
                  "text": "Table doesn't have side borders"
                },
                "fullDescription": {
                  "text": "Checks if table has correct side borders. For compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end.",
                  "markdown": "Checks if table has correct side borders. For compatibility reasons all table rows should have borders (pipe symbols) at the start and at the end."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownNoTableBorders",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 22,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownUnresolvedFileReference",
                "shortDescription": {
                  "text": "Unresolved file references"
                },
                "fullDescription": {
                  "text": "Reports unresolved file references in Markdown files.",
                  "markdown": "Reports unresolved file references in Markdown files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownUnresolvedFileReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 22,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MarkdownUnresolvedHeaderReference",
                "shortDescription": {
                  "text": "Unresolved header reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved header references in Markdown files.",
                  "markdown": "Reports unresolved header references in Markdown files."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "MarkdownUnresolvedHeaderReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Markdown",
                      "index": 22,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.dts",
            "version": "243.6317",
            "rules": [
              {
                "id": "DtsPropertyEnum",
                "shortDescription": {
                  "text": "Invalid property value (enum)"
                },
                "fullDescription": {
                  "text": "Reports enum properties with invalid values. The values of an enum property are specified in the node binding.",
                  "markdown": "Reports enum properties with invalid values. The values of an enum property are specified in the node binding."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsPropertyEnum",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsDuplicateElement",
                "shortDescription": {
                  "text": "Duplicate element"
                },
                "fullDescription": {
                  "text": "Reports duplicated elements inside a node. This could either be two or more properties with the same name or two or more nodes.",
                  "markdown": "Reports duplicated elements inside a node. This could either be two or more properties with the same name or two or more nodes."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsDuplicateElement",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsRequiredProperty",
                "shortDescription": {
                  "text": "Required properties"
                },
                "fullDescription": {
                  "text": "Reports missing required properties. Properties are considered required if they are marked as required in the binding.",
                  "markdown": "Reports missing required properties. Properties are considered required if they are marked as required in the binding."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsRequiredProperty",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsBits",
                "shortDescription": {
                  "text": "Invalid array element size"
                },
                "fullDescription": {
                  "text": "Reports invalid array element size. Array elements must be 8, 16, 32 or 64-bits.",
                  "markdown": "Reports invalid array element size. Array elements must be 8, 16, 32 or 64-bits."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsBits",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsNodeName",
                "shortDescription": {
                  "text": "Invalid node name"
                },
                "fullDescription": {
                  "text": "Reports invalid node names. Node names should match '[a-zA-Z0-9,._+@-]+' and should only include at most one '@'.",
                  "markdown": "Reports invalid node names. Node names should match `[a-zA-Z0-9,._+@-]+` and should only include at most one `@`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsNodeName",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "PpParserError",
                "shortDescription": {
                  "text": "Preprocessor parser"
                },
                "fullDescription": {
                  "text": "Displays preprocessor parser errors.",
                  "markdown": "Displays preprocessor parser errors."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "PpParserError",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsPropertyType",
                "shortDescription": {
                  "text": "Invalid property type"
                },
                "fullDescription": {
                  "text": "Reports properties with invalid type. The type of the property is specified in the node binding.",
                  "markdown": "Reports properties with invalid type. The type of the property is specified in the node binding."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsPropertyType",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsLabelName",
                "shortDescription": {
                  "text": "Invalid label name"
                },
                "fullDescription": {
                  "text": "Reports invalid label names. Label names should match '[a-zA-Z_][a-zA-Z0-9_]*'.",
                  "markdown": "Reports invalid label names. Label names should match `[a-zA-Z_][a-zA-Z0-9_]*`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsLabelName",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsUnitName",
                "shortDescription": {
                  "text": "Invalid unit name"
                },
                "fullDescription": {
                  "text": "Reports invalid unit names inside node names. Unit names should not have leading 0s or start with 0x.",
                  "markdown": "Reports invalid unit names inside node names. Unit names should not have leading 0s or start with 0x."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DtsUnitName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsPropertyName",
                "shortDescription": {
                  "text": "Invalid property name"
                },
                "fullDescription": {
                  "text": "Reports invalid property names. Property names should match '[a-zA-Z0-9,._+*#?-]+'.",
                  "markdown": "Reports invalid property names. Property names should match `[a-zA-Z0-9,._+*#?-]+`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsPropertyName",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsContainer",
                "shortDescription": {
                  "text": "Invalid entry location"
                },
                "fullDescription": {
                  "text": "Reports if an entry is not valid in its current location. For example if a property was defied on the root level of a devicetree source file.",
                  "markdown": "Reports if an entry is not valid in its current location. For example if a property was defied on the root level of a devicetree source file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsContainer",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsPropertyConst",
                "shortDescription": {
                  "text": "Invalid property value (const)"
                },
                "fullDescription": {
                  "text": "Reports const properties with invalid values. The value of a const property is specified in the node binding.",
                  "markdown": "Reports const properties with invalid values. The value of a const property is specified in the node binding."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsPropertyConst",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsStatementOrder",
                "shortDescription": {
                  "text": "Invalid entry order"
                },
                "fullDescription": {
                  "text": "Reports if property and node entries are in the wrong order. Property definitions should always come before node definitions.",
                  "markdown": "Reports if property and node entries are in the wrong order. Property definitions should always come before node definitions."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsStatementOrder",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DtsUndeclaredProperty",
                "shortDescription": {
                  "text": "Undeclared property"
                },
                "fullDescription": {
                  "text": "Reports undeclared properties. Properties are undeclared if there not present in the properties section of the binding. There are some exceptions: Property name ends with: '-controller' Property name starts with: '#' Property name starts with: 'pinctrl-' And the following properties are allowed: status compatible phandle ranges device_type interrupts-extended interrupt-parent",
                  "markdown": "Reports undeclared properties. Properties are undeclared if there not present in the properties section of the binding.   \n\nThere are some exceptions:\n\n* Property name ends with: `-controller`\n* Property name starts with: `#`\n* Property name starts with: `pinctrl-`\n\nAnd the following properties are allowed:\n\n<!-- -->\n\n* status\n* compatible\n* phandle\n* ranges\n* device_type\n* interrupts-extended\n* interrupt-parent"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DtsUndeclaredProperty",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Devicetree",
                      "index": 24,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "HtmlTools",
            "version": "243.6317",
            "rules": [
              {
                "id": "HtmlRequiredAltAttribute",
                "shortDescription": {
                  "text": "Missing required 'alt' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'alt' attribute in a 'img' or 'applet' tag or in a 'area' element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: H24, H35, H36, H37.",
                  "markdown": "Reports a missing `alt` attribute in a `img` or `applet` tag or in a `area` element of an image map. Suggests adding a required attribute with a text alternative for the contents of the tag. Based on WCAG 2.0: [H24](https://www.w3.org/TR/WCAG20-TECHS/H24.html), [H35](https://www.w3.org/TR/WCAG20-TECHS/H35.html), [H36](https://www.w3.org/TR/WCAG20-TECHS/H36.html), [H37](https://www.w3.org/TR/WCAG20-TECHS/H37.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredAltAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 32,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlFormInputWithoutLabel",
                "shortDescription": {
                  "text": "Missing associated label"
                },
                "fullDescription": {
                  "text": "Reports a form element ('input', 'textarea', or 'select') without an associated label. Suggests creating a new label. Based on WCAG 2.0: H44.",
                  "markdown": "Reports a form element (`input`, `textarea`, or `select`) without an associated label. Suggests creating a new label. Based on WCAG 2.0: [H44](https://www.w3.org/TR/WCAG20-TECHS/H44.html).  "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlFormInputWithoutLabel",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 32,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleAttribute",
                "shortDescription": {
                  "text": "Missing required 'title' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing title attribute 'frame', 'iframe', 'dl', and 'a' tags. Suggests adding a title attribute. Based on WCAG 2.0: H33, H40, and H64.",
                  "markdown": "Reports a missing title attribute `frame`, `iframe`, `dl`, and `a` tags. Suggests adding a title attribute. Based on WCAG 2.0: [H33](https://www.w3.org/TR/WCAG20-TECHS/H33.html), [H40](https://www.w3.org/TR/WCAG20-TECHS/H40.html), and [H64](https://www.w3.org/TR/WCAG20-TECHS/H64.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredTitleAttribute",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 32,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedTag",
                "shortDescription": {
                  "text": "Obsolete tag"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag.",
                  "markdown": "Reports an obsolete HTML5 tag. Suggests replacing the obsolete tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlDeprecatedTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CheckImageSize",
                "shortDescription": {
                  "text": "Mismatched image size"
                },
                "fullDescription": {
                  "text": "Reports a 'width' and 'height' attribute value of a 'img' tag that is different from the actual width and height of the referenced image.",
                  "markdown": "Reports a `width` and `height` attribute value of a `img` tag that is different from the actual width and height of the referenced image."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CheckImageSize",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredSummaryAttribute",
                "shortDescription": {
                  "text": "Missing required 'summary' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'summary' attribute in a 'table' tag. Suggests adding a'summary' attribute. Based on WCAG 2.0: H73.",
                  "markdown": "Reports a missing `summary` attribute in a `table` tag. Suggests adding a`summary` attribute. Based on WCAG 2.0: [H73](https://www.w3.org/TR/WCAG20-TECHS/H73.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredSummaryAttribute",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 32,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredLangAttribute",
                "shortDescription": {
                  "text": "Missing required 'lang' attribute"
                },
                "fullDescription": {
                  "text": "Reports a missing 'lang' (or 'xml:lang') attribute in a 'html' tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: H57.",
                  "markdown": "Reports a missing `lang` (or `xml:lang`) attribute in a `html` tag. Suggests adding a required attribute to state the default language of the document. Based on WCAG 2.0: [H57](https://www.w3.org/TR/WCAG20-TECHS/H57.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredLangAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 32,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlNonExistentInternetResource",
                "shortDescription": {
                  "text": "Unresolved web link"
                },
                "fullDescription": {
                  "text": "Reports an unresolved web link. Works by making network requests in the background.",
                  "markdown": "Reports an unresolved web link. Works by making network requests in the background."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlNonExistentInternetResource",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlRequiredTitleElement",
                "shortDescription": {
                  "text": "Missing required 'title' element"
                },
                "fullDescription": {
                  "text": "Reports a missing 'title' element inside a 'head' section. Suggests adding a 'title' element. The title should describe the document. Based on WCAG 2.0: H25.",
                  "markdown": "Reports a missing `title` element inside a `head` section. Suggests adding a `title` element. The title should describe the document. Based on WCAG 2.0: [H25](https://www.w3.org/TR/WCAG20-TECHS/H25.html)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlRequiredTitleElement",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML/Accessibility",
                      "index": 32,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlDeprecatedAttribute",
                "shortDescription": {
                  "text": "Obsolete attribute"
                },
                "fullDescription": {
                  "text": "Reports an obsolete HTML5 attribute.",
                  "markdown": "Reports an obsolete HTML5 attribute."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "HtmlDeprecatedAttribute",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "HtmlPresentationalElement",
                "shortDescription": {
                  "text": "Presentational tag"
                },
                "fullDescription": {
                  "text": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag.",
                  "markdown": "Reports a presentational HTML tag. Suggests replacing the presentational tag with a CSS or another tag."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "HtmlPresentationalElement",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "HTML",
                      "index": 25,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "Docker",
            "version": "243.6317",
            "rules": [
              {
                "id": "ComposeMissingKeys",
                "shortDescription": {
                  "text": "Missing docker-compose YAML keys"
                },
                "fullDescription": {
                  "text": "Reports missing required keys in Docker Compose files.",
                  "markdown": "Reports missing required keys in Docker Compose files.   "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ComposeMissingKeys",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Docker-compose",
                      "index": 36,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DockerFileAssignments",
                "shortDescription": {
                  "text": "Invalid spaces in ''key=value'' pair"
                },
                "fullDescription": {
                  "text": "Reports incorrect spacing for key-value pairs in 'ARG', 'ENV', and 'LABEL' commands. While it is not explicitly specified in the Dockerfile specification, some combinations of spacing for key-value pairs are not allowed. Docker build will fail after reaching the problem instruction. Examples: The 'ARG' command does not allow any spaces around '=' 'ENV' and 'LABEL' do not allow spaces after '=' '# all the commands below will fail\n  ARG answer = 42\n  ARG version= \"1.0.0\"\n  LABEL \"maintained.by\"= someone@gmail.com\n  ENV JAVA_HOME= \"/docker-java-home\"' After the quick-fix is applied: 'ARG answer=2\n  ARG version=\"1.0.0\"\n  LABEL \"maintained.by\"=someone@gmail.com\n  ENV JAVA_HOME=\"/docker-java-home\"'",
                  "markdown": "Reports incorrect spacing for key-value pairs in `ARG`, `ENV`, and `LABEL` commands.\n\n\nWhile it is not explicitly specified in the [Dockerfile specification](https://docs.docker.com/engine/reference/builder/#arg),\nsome combinations of spacing for key-value pairs are not allowed.\nDocker build will fail after reaching the problem instruction.\n\n**Examples:**\n\n* The `ARG` command does not allow any spaces around '='\n* `ENV` and `LABEL` do not allow spaces after '='\n\n\n      # all the commands below will fail\n      ARG answer = 42\n      ARG version= \"1.0.0\"\n      LABEL \"maintained.by\"= someone@gmail.com\n      ENV JAVA_HOME= \"/docker-java-home\"\n\nAfter the quick-fix is applied:\n\n\n      ARG answer=2\n      ARG version=\"1.0.0\"\n      LABEL \"maintained.by\"=someone@gmail.com\n      ENV JAVA_HOME=\"/docker-java-home\"\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DockerFileAssignments",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dockerfile",
                      "index": 41,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DockerFileAddOrCopyPaths",
                "shortDescription": {
                  "text": "Invalid destination for ''ADD''/''COPY'' commands"
                },
                "fullDescription": {
                  "text": "Reports invalid destination directories in 'ADD' and 'COPY' commands. According to the Dockerfile specification, if multiple sources are specified, then the destination must be a directory, and it must end with a slash '/'. Otherwise, Docker build will fail. Examples: '# all the commands below will fail\n  ADD textA.txt textB.txt relativeDir\n  ADD [\"binaryA.jar\", \"binary2.jar\", \"destination\"]\n  COPY text3.txt text4.txt /absolute/path' After the quick-fix is applied: 'ADD textA.txt textB.txt relativeDir/\n  ADD [\"binaryA.jar\", \"binary2.jar\", \"destination/\"]\n  COPY text3.txt text4.txt /absolute/path/'",
                  "markdown": "Reports invalid destination directories in `ADD` and `COPY` commands.\n\n\nAccording to the [Dockerfile specification](https://docs.docker.com/engine/reference/builder/#add),\nif multiple sources are specified, then the destination must be a directory, and it must end with a slash '/'.\nOtherwise, Docker build will fail.\n\n**Examples:**\n\n\n      # all the commands below will fail\n      ADD textA.txt textB.txt relativeDir\n      ADD [\"binaryA.jar\", \"binary2.jar\", \"destination\"]\n      COPY text3.txt text4.txt /absolute/path\n\nAfter the quick-fix is applied:\n\n\n      ADD textA.txt textB.txt relativeDir/\n      ADD [\"binaryA.jar\", \"binary2.jar\", \"destination/\"]\n      COPY text3.txt text4.txt /absolute/path/\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DockerFileAddOrCopyPaths",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dockerfile",
                      "index": 41,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DockerFileRunCommandMissingContinuation",
                "shortDescription": {
                  "text": "Missing continuation character for ''RUN'' command"
                },
                "fullDescription": {
                  "text": "Reports missing continuation characters in 'RUN' command. In the shell form of 'RUN' command you should use a '\\' (backslash) to continue a single 'RUN' instruction onto the next line. Otherwise, Docker build will fail. Examples: '# the command below will fail\n  RUN /bin/bash -c 'source $HOME/.bashrc;\n      echo $HOME'' After the quick-fix is applied: 'RUN /bin/bash -c 'source $HOME/.bashrc; \\\n      echo $HOME''",
                  "markdown": "Reports missing continuation characters in `RUN` command.\n\n\nIn the *shell* form of `RUN` command you should use a '\\\\' (backslash)\nto continue a single `RUN` instruction onto the next line.\nOtherwise, Docker build will fail.\n\n**Examples:**\n\n\n      # the command below will fail\n      RUN /bin/bash -c 'source $HOME/.bashrc;\n          echo $HOME'\n\nAfter the quick-fix is applied:\n\n\n      RUN /bin/bash -c 'source $HOME/.bashrc; \\\n          echo $HOME'\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DockerFileRunCommandMissingContinuation",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dockerfile",
                      "index": 41,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DockerJsonFormStringLiterals",
                "shortDescription": {
                  "text": "A single quoted string in JSON array format"
                },
                "fullDescription": {
                  "text": "Reports a single quoted string in JSON array format. JSON array form, must use double-quotes (\") around words not single-quotes ('). Otherwise, Docker build will fail. Examples: '# all the commands below will fail\n  RUN ['/bin/bash', '-c', 'echo hello']\n  ADD ['binaryA.jar', 'binary2.jar', 'destination/']\n  COPY ['binaryA.jar', 'binary2.jar', 'destination/']' After the quick-fix is applied: 'RUN [\"/bin/bash\", \"-c\", \"echo hello\"]\n  ADD [\"binaryA.jar\", \"binary2.jar\", \"destination/\"]\n  COPY [\"binaryA.jar\", \"binary2.jar\", \"destination/\"]'",
                  "markdown": "Reports a single quoted string in JSON array format.\n\n\nJSON array form, must use double-quotes (\") around words not single-quotes ('). Otherwise, Docker build will fail.\n\n**Examples:**\n\n\n      # all the commands below will fail\n      RUN ['/bin/bash', '-c', 'echo hello']\n      ADD ['binaryA.jar', 'binary2.jar', 'destination/']\n      COPY ['binaryA.jar', 'binary2.jar', 'destination/']\n\nAfter the quick-fix is applied:\n\n\n      RUN [\"/bin/bash\", \"-c\", \"echo hello\"]\n      ADD [\"binaryA.jar\", \"binary2.jar\", \"destination/\"]\n      COPY [\"binaryA.jar\", \"binary2.jar\", \"destination/\"]\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DockerJsonFormStringLiterals",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dockerfile",
                      "index": 41,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ComposeUnknownValues",
                "shortDescription": {
                  "text": "Unknown docker-compose YAML values"
                },
                "fullDescription": {
                  "text": "Reports unrecognized values in Docker Compose files.",
                  "markdown": "Reports unrecognized values in Docker Compose files.   "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ComposeUnknownValues",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Docker-compose",
                      "index": 36,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ComposeUnknownKeys",
                "shortDescription": {
                  "text": "Unknown docker-compose YAML keys"
                },
                "fullDescription": {
                  "text": "Reports unrecognized keys in Docker Compose files.",
                  "markdown": "Reports unrecognized keys in Docker Compose files.   "
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "ComposeUnknownKeys",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Docker-compose",
                      "index": 36,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "ComposeUnquotedPorts",
                "shortDescription": {
                  "text": "Unquoted port mappings"
                },
                "fullDescription": {
                  "text": "Reports unquoted port mappings in Docker Compose files. According to the Compose file specification, mapping ports in the 'HOST:CONTAINER' format may lead to erroneous results when using a container port lower than 60, because YAML parses numbers in the format 'xx:yy' as a base-60 value. For this reason, we recommend always explicitly specifying the port mappings as strings. Examples: 'ports:\n    - 3000\n    - 3000-3005\n    - 22:22\n    - 8080:8080' After the quick-fix is applied: 'ports:\n    - \"3000\"\n    - \"3000-3005\"\n    - \"22:22\"\n    - \"8080:8080\"'",
                  "markdown": "Reports unquoted port mappings in Docker Compose files.\n\n\nAccording to the [Compose file specification](https://docs.docker.com/compose/compose-file/compose-file-v3/#short-syntax-1),\nmapping ports in the `HOST:CONTAINER` format may lead to erroneous results when using a container port lower than 60,\nbecause YAML parses numbers in the format `xx:yy` as a base-60 value.\nFor this reason, we recommend always explicitly specifying the port mappings as strings.\n\n**Examples:**\n\n\n      ports:\n        - 3000\n        - 3000-3005\n        - 22:22\n        - 8080:8080\n\nAfter the quick-fix is applied:\n\n\n      ports:\n        - \"3000\"\n        - \"3000-3005\"\n        - \"22:22\"\n        - \"8080:8080\"\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "ComposeUnquotedPorts",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Docker-compose",
                      "index": 36,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DockerFileArgumentCount",
                "shortDescription": {
                  "text": "Wrong number of arguments"
                },
                "fullDescription": {
                  "text": "Reports invalid number of arguments for the Dockerfile commands. Docker build will fail after reaching the instruction with an invalid number of arguments.",
                  "markdown": "Reports invalid number of arguments for the Dockerfile commands.\n\n\nDocker build will fail after reaching the instruction with an invalid number of arguments."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DockerFileArgumentCount",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dockerfile",
                      "index": 41,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.css",
            "version": "243.6317",
            "rules": [
              {
                "id": "CssInvalidHtmlTagReference",
                "shortDescription": {
                  "text": "Invalid type selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS type selector that matches an unknown HTML element.",
                  "markdown": "Reports a CSS [type selector](https://developer.mozilla.org/en-US/docs/Web/CSS/Type_selectors) that matches an unknown HTML element."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidHtmlTagReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCustomPropertyAtRuleDeclaration",
                "shortDescription": {
                  "text": "Invalid @property declaration"
                },
                "fullDescription": {
                  "text": "Reports a missing required syntax, inherits, or initial-value property in a declaration of a custom property.",
                  "markdown": "Reports a missing required [syntax](https://developer.mozilla.org/en-US/docs/web/css/@property/syntax), [inherits](https://developer.mozilla.org/en-US/docs/web/css/@property/inherits), or [initial-value](https://developer.mozilla.org/en-US/docs/web/css/@property/initial-value) property in a declaration of a custom property."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidCustomPropertyAtRuleDeclaration",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidFunction",
                "shortDescription": {
                  "text": "Invalid function"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS function or an incorrect function parameter.",
                  "markdown": "Reports an unknown [CSS function](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Functions) or an incorrect function parameter."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidFunction",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingSemicolon",
                "shortDescription": {
                  "text": "Missing semicolon"
                },
                "fullDescription": {
                  "text": "Reports a missing semicolon at the end of a declaration.",
                  "markdown": "Reports a missing semicolon at the end of a declaration."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssMissingSemicolon",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssRedundantUnit",
                "shortDescription": {
                  "text": "Redundant measure unit"
                },
                "fullDescription": {
                  "text": "Reports a measure unit of a zero value where units are not required by the specification. Example: 'width: 0px'",
                  "markdown": "Reports a measure unit of a zero value where units are not required by the specification.\n\n**Example:**\n\n    width: 0px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssRedundantUnit",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code style issues",
                      "index": 49,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssMissingComma",
                "shortDescription": {
                  "text": "Missing comma in selector list"
                },
                "fullDescription": {
                  "text": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines. Example: 'input /* comma has probably been forgotten */\n.button {\n  margin: 1px;\n}'",
                  "markdown": "Reports a multi-line selector. Most likely this means that several single-line selectors are actually intended but a comma is missing at the end of one or several lines.\n\n**Example:**\n\n\n    input /* comma has probably been forgotten */\n    .button {\n      margin: 1px;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssMissingComma",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 62,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPropertyValue",
                "shortDescription": {
                  "text": "Invalid property value"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS property value.",
                  "markdown": "Reports an incorrect CSS property value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidPropertyValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssBrowserCompatibilityForProperties",
                "shortDescription": {
                  "text": "Property is incompatible with selected browsers"
                },
                "fullDescription": {
                  "text": "Reports a CSS property that is not supported by the specified browsers. Based on the MDN Compatibility Data.",
                  "markdown": "Reports a CSS property that is not supported by the specified browsers. Based on the [MDN Compatibility Data](https://github.com/mdn/browser-compat-data)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssBrowserCompatibilityForProperties",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 38,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCustomPropertyAtRuleName",
                "shortDescription": {
                  "text": "Invalid @property name"
                },
                "fullDescription": {
                  "text": "Reports an invalid custom property name. Custom property name should be prefixed with two dashes. Example: '@property invalid-property-name {\n  ...\n}\n\n@property --valid-property-name {\n  ...\n}'",
                  "markdown": "Reports an invalid custom property name. Custom property name should be prefixed with two dashes.\n\n**Example:**\n\n\n    @property invalid-property-name {\n      ...\n    }\n\n    @property --valid-property-name {\n      ...\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidCustomPropertyAtRuleName",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToHexInspection",
                "shortDescription": {
                  "text": "Color could be replaced with #-hex"
                },
                "fullDescription": {
                  "text": "Reports an 'rgb()', 'hsl()', or other color function. Suggests replacing a color function with an equivalent hexadecimal notation. Example: 'rgb(12, 15, 255)' After the quick-fix is applied: '#0c0fff'.",
                  "markdown": "Reports an `rgb()`, `hsl()`, or other color function.\n\nSuggests replacing a color function with an equivalent hexadecimal notation.\n\n**Example:**\n\n    rgb(12, 15, 255)\n\nAfter the quick-fix is applied:\n\n    #0c0fff.\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssConvertColorToHexInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 38,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandUnsafely",
                "shortDescription": {
                  "text": "Properties may probably be replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case. For example, 2 properties: 'outline-color' and 'outline-style' may be replaced with a single 'outline'. Such replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states. In this example, switching to the 'outline' shorthand means that 'outline-width' is also set to its initial value, which is 'medium'. This inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe). For such cases see the 'Properties may be safely replaced with a shorthand' inspection instead.",
                  "markdown": "Reports a set of longhand CSS properties and suggests replacing an incomplete set of longhand CSS properties with a shorthand form, which is however not 100% equivalent in this case.\n\n\nFor example, 2 properties: `outline-color` and `outline-style` may be replaced with a single `outline`.\nSuch replacement is not 100% equivalent because shorthands reset all omitted sub-values to their initial states.\nIn this example, switching to the `outline` shorthand means that `outline-width` is also set to its initial value,\nwhich is `medium`.\n\n\nThis inspection doesn't handle full sets of longhand properties (when switching to shorthand is 100% safe).\nFor such cases see the 'Properties may be safely replaced with a shorthand' inspection instead."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssReplaceWithShorthandUnsafely",
                    "ideaSeverity": "INFORMATION",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 38,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownUnit",
                "shortDescription": {
                  "text": "Unknown unit"
                },
                "fullDescription": {
                  "text": "Reports an unknown unit.",
                  "markdown": "Reports an unknown unit."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnknownUnit",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidMediaFeature",
                "shortDescription": {
                  "text": "Invalid media feature"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS media feature or an incorrect media feature value.",
                  "markdown": "Reports an unknown [CSS media feature](https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries) or an incorrect media feature value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidMediaFeature",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssConvertColorToRgbInspection",
                "shortDescription": {
                  "text": "Color could be replaced with rgb()"
                },
                "fullDescription": {
                  "text": "Reports an 'hsl()' or 'hwb()' color function or a hexadecimal color notation. Suggests replacing such color value with an equivalent 'rgb()' or 'rgba()' color function. Example: '#0c0fff' After the quick-fix is applied: 'rgb(12, 15, 255)'.",
                  "markdown": "Reports an `hsl()` or `hwb()` color function or a hexadecimal color notation.\n\nSuggests replacing such color value with an equivalent `rgb()` or `rgba()` color function.\n\n**Example:**\n\n    #0c0fff\n\nAfter the quick-fix is applied:\n\n    rgb(12, 15, 255).\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssConvertColorToRgbInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 38,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnusedSymbol",
                "shortDescription": {
                  "text": "Unused selector"
                },
                "fullDescription": {
                  "text": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML. Note that complete inspection results are available only when running it via Code | Inspect Code or Code | Analyze Code | Run Inspection by Name. Due to performance reasons, style sheet files are not inspected on the fly.",
                  "markdown": "Reports a CSS class or an element IDs that appears in selectors but is not used in HTML.\n\n\nNote that complete inspection results are available only when running it via **Code \\| Inspect Code** or\n**Code \\| Analyze Code \\| Run Inspection by Name**.\nDue to performance reasons, style sheet files are not inspected on the fly."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssUnusedSymbol",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 38,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssDeprecatedValue",
                "shortDescription": {
                  "text": "Deprecated value"
                },
                "fullDescription": {
                  "text": "Reports a deprecated CSS value. Suggests replacing the deprecated value with its valid equivalent.",
                  "markdown": "Reports a deprecated CSS value. Suggests replacing the deprecated value with its valid equivalent."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssDeprecatedValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 38,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNonIntegerLengthInPixels",
                "shortDescription": {
                  "text": "Non-integer length in pixels"
                },
                "fullDescription": {
                  "text": "Reports a non-integer length in pixels. Example: 'width: 3.14px'",
                  "markdown": "Reports a non-integer length in pixels.\n\n**Example:**\n\n     width: 3.14px\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssNonIntegerLengthInPixels",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 62,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidImport",
                "shortDescription": {
                  "text": "Misplaced @import"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@import' statement. According to the specification, '@import' rules must precede all other types of rules, except '@charset' rules.",
                  "markdown": "Reports a misplaced `@import` statement.\n\n\nAccording to the [specification](https://developer.mozilla.org/en-US/docs/Web/CSS/@import),\n`@import` rules must precede all other types of rules, except `@charset` rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidImport",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidAtRule",
                "shortDescription": {
                  "text": "Unknown at-rule"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS at-rule.",
                  "markdown": "Reports an unknown [CSS at-rule](https://developer.mozilla.org/en-US/docs/Web/CSS/At-rule)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidAtRule",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedCustomProperty",
                "shortDescription": {
                  "text": "Unresolved custom property"
                },
                "fullDescription": {
                  "text": "Reports an unresolved reference to a custom property among the arguments of the 'var()' function.",
                  "markdown": "Reports an unresolved reference to a [custom property](https://developer.mozilla.org/en-US/docs/Web/CSS/--*) among the arguments of the `var()` function."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnresolvedCustomProperty",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssOverwrittenProperties",
                "shortDescription": {
                  "text": "Overwritten property"
                },
                "fullDescription": {
                  "text": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties. Example: '.foo {\n  margin-bottom: 1px;\n  margin-bottom: 1px; /* duplicates margin-bottom */\n  margin: 0; /* overrides margin-bottom */\n}'",
                  "markdown": "Reports a duplicated CSS property within a ruleset. Respects shorthand properties.\n\n**Example:**\n\n\n    .foo {\n      margin-bottom: 1px;\n      margin-bottom: 1px; /* duplicates margin-bottom */\n      margin: 0; /* overrides margin-bottom */\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssOverwrittenProperties",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 38,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownTarget",
                "shortDescription": {
                  "text": "Unresolved file reference"
                },
                "fullDescription": {
                  "text": "Reports an unresolved file reference, for example, an incorrect path in an '@import' statement.",
                  "markdown": "Reports an unresolved file reference, for example, an incorrect path in an `@import` statement."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnknownTarget",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNegativeValue",
                "shortDescription": {
                  "text": "Negative property value"
                },
                "fullDescription": {
                  "text": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height.",
                  "markdown": "Reports a negative value of a CSS property that is not expected to be less than zero, for example, object width or height."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssNegativeValue",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssNoGenericFontName",
                "shortDescription": {
                  "text": "Missing generic font family name"
                },
                "fullDescription": {
                  "text": "Verifies that the 'font-family' property contains a generic font family name as a fallback alternative. Generic font family names are: 'serif', 'sans-serif', 'cursive', 'fantasy', and 'monospace'.",
                  "markdown": "Verifies that the [font-family](https://developer.mozilla.org/en-US/docs/Web/CSS/font-family) property contains a generic font family name as a fallback alternative.\n\n\nGeneric font family names are: `serif`, `sans-serif`, `cursive`, `fantasy`,\nand `monospace`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssNoGenericFontName",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Probable bugs",
                      "index": 62,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnresolvedClassInComposesRule",
                "shortDescription": {
                  "text": "Unresolved class in 'composes' rule"
                },
                "fullDescription": {
                  "text": "Reports a CSS class reference in the 'composes' rule that cannot be resolved to any valid target. Example: '.className {/* ... */}\n\n  .otherClassName {\n    composes: className;\n  }'",
                  "markdown": "Reports a CSS class reference in the ['composes'](https://github.com/css-modules/css-modules#composition) rule that cannot be resolved to any valid target.\n\n**Example:**\n\n\n      .className {/* ... */}\n\n      .otherClassName {\n        composes: className;\n      }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssUnresolvedClassInComposesRule",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidCharsetRule",
                "shortDescription": {
                  "text": "Misplaced or incorrect @charset"
                },
                "fullDescription": {
                  "text": "Reports a misplaced '@charset' at-rule or an incorrect charset value.",
                  "markdown": "Reports a misplaced `@charset` at-rule or an incorrect charset value."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidCharsetRule",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssReplaceWithShorthandSafely",
                "shortDescription": {
                  "text": "Properties may be safely replaced with a shorthand"
                },
                "fullDescription": {
                  "text": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form. For example, 4 properties: 'padding-top', 'padding-right', 'padding-bottom', and 'padding-left' can be safely replaced with a single 'padding' property. Note that this inspection doesn't show up if the set of longhand properties is incomplete (e.g. only 3 'padding-xxx' properties in a ruleset) because switching to a shorthand may change the result. For such cases consider the 'Properties may probably be replaced with a shorthand' inspection.",
                  "markdown": "Reports a set of longhand properties. Suggests replacing a complete set of longhand CSS properties with an equivalent shorthand form.\n\n\nFor example, 4 properties: `padding-top`, `padding-right`, `padding-bottom`, and\n`padding-left`\ncan be safely replaced with a single `padding` property.\n\n\nNote that this inspection doesn't show up if the set of longhand properties is incomplete\n(e.g. only 3 `padding-xxx` properties in a ruleset)\nbecause switching to a shorthand may change the result.\nFor such cases consider the 'Properties may probably be replaced with a shorthand'\ninspection."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "CssReplaceWithShorthandSafely",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS",
                      "index": 38,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssUnknownProperty",
                "shortDescription": {
                  "text": "Unknown property"
                },
                "fullDescription": {
                  "text": "Reports an unknown CSS property or a property used in a wrong context. Add the unknown property to the 'Custom CSS properties' list to skip validation.",
                  "markdown": "Reports an unknown CSS property or a property used in a wrong context.\n\nAdd the unknown property to the 'Custom CSS properties' list to skip validation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssUnknownProperty",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidPseudoSelector",
                "shortDescription": {
                  "text": "Invalid pseudo-selector"
                },
                "fullDescription": {
                  "text": "Reports an incorrect CSS pseudo-class pseudo-element.",
                  "markdown": "Reports an incorrect CSS [pseudo-class](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-classes) [pseudo-element](https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CssInvalidPseudoSelector",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CssInvalidNestedSelector",
                "shortDescription": {
                  "text": "Invalid nested selector"
                },
                "fullDescription": {
                  "text": "Reports a nested selector starting with an identifier or a functional notation.",
                  "markdown": "Reports a nested selector starting with an identifier or a functional notation."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "CssInvalidNestedSelector",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Invalid elements",
                      "index": 39,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.yaml",
            "version": "243.6317",
            "rules": [
              {
                "id": "YAMLSchemaValidation",
                "shortDescription": {
                  "text": "Validation by JSON Schema"
                },
                "fullDescription": {
                  "text": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified. Scheme example: '{\n    \"properties\": {\n      \"SomeNumberProperty\": {\n        \"type\": \"number\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeNumberProperty: hello world'",
                  "markdown": "Reports inconsistencies between a YAML file and a JSON Schema if the schema is specified.\n\n**Scheme example:**\n\n\n      {\n        \"properties\": {\n          \"SomeNumberProperty\": {\n            \"type\": \"number\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeNumberProperty: hello world\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLSchemaValidation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 45,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLIncompatibleTypes",
                "shortDescription": {
                  "text": "Suspicious type mismatch"
                },
                "fullDescription": {
                  "text": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions. Example: 'myElements:\n  - value1\n  - value2\n  - false # <- reported, because it is a boolean value, while other values are strings'",
                  "markdown": "Reports a mismatch between a scalar value type in YAML file and types of the values in the similar positions.\n\n**Example:**\n\n\n    myElements:\n      - value1\n      - value2\n      - false # <- reported, because it is a boolean value, while other values are strings\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLIncompatibleTypes",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 45,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnresolvedAlias",
                "shortDescription": {
                  "text": "Unresolved alias"
                },
                "fullDescription": {
                  "text": "Reports unresolved aliases in YAML files. Example: 'some_key: *unknown_alias'",
                  "markdown": "Reports unresolved aliases in YAML files.\n\n**Example:**\n\n\n      some_key: *unknown_alias\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLUnresolvedAlias",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 45,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLSchemaDeprecation",
                "shortDescription": {
                  "text": "Deprecated YAML key"
                },
                "fullDescription": {
                  "text": "Reports deprecated keys in YAML files. Deprecation is checked only if there exists a JSON schema associated with the corresponding YAML file. Note that the deprecation mechanism is not defined in the JSON Schema specification yet, and this inspection uses a non-standard 'deprecationMessage' extension. Scheme deprecation example: '{\n    \"properties\": {\n      \"SomeDeprecatedProperty\": {\n        \"deprecationMessage\": \"Baz\",\n        \"description\": \"Foo bar\"\n      }\n    }\n  }' The following is an example with the corresponding warning: 'SomeDeprecatedProperty: some value'",
                  "markdown": "Reports deprecated keys in YAML files.\n\nDeprecation is checked only if there exists a JSON schema associated with the corresponding YAML file.\n\nNote that the deprecation mechanism is not defined in the JSON Schema specification yet,\nand this inspection uses a non-standard `deprecationMessage` extension.\n\n**Scheme deprecation example:**\n\n\n      {\n        \"properties\": {\n          \"SomeDeprecatedProperty\": {\n            \"deprecationMessage\": \"Baz\",\n            \"description\": \"Foo bar\"\n          }\n        }\n      }\n\n**The following is an example with the corresponding warning:**\n\n\n      SomeDeprecatedProperty: some value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "YAMLSchemaDeprecation",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 45,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLRecursiveAlias",
                "shortDescription": {
                  "text": "Recursive alias"
                },
                "fullDescription": {
                  "text": "Reports recursion in YAML aliases. Alias can't be recursive and be used inside the data referenced by a corresponding anchor. Example: 'some_key: &some_anchor\n    sub_key1: value1\n    sub_key2: *some_anchor'",
                  "markdown": "Reports recursion in YAML aliases.\n\nAlias can't be recursive and be used inside the data referenced by a corresponding anchor.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        sub_key1: value1\n        sub_key2: *some_anchor\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLRecursiveAlias",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 45,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLDuplicatedKeys",
                "shortDescription": {
                  "text": "Duplicated YAML keys"
                },
                "fullDescription": {
                  "text": "Reports duplicated keys in YAML files. Example: 'same_key: some value\n  same_key: another value'",
                  "markdown": "Reports duplicated keys in YAML files.\n\n**Example:**\n\n\n      same_key: some value\n      same_key: another value\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "YAMLDuplicatedKeys",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 45,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "YAMLUnusedAnchor",
                "shortDescription": {
                  "text": "Unused anchor"
                },
                "fullDescription": {
                  "text": "Reports unused anchors. Example: 'some_key: &some_anchor\n    key1: value1'",
                  "markdown": "Reports unused anchors.\n\n**Example:**\n\n\n      some_key: &some_anchor\n        key1: value1\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "YAMLUnusedAnchor",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "YAML",
                      "index": 45,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.less",
            "version": "243.6317",
            "rules": [
              {
                "id": "LessUnresolvedMixin",
                "shortDescription": {
                  "text": "Unresolved mixin"
                },
                "fullDescription": {
                  "text": "Reports a reference to a Less mixin that is not resolved. Example: '* {\n  .unknown-mixin();\n}'",
                  "markdown": "Reports a reference to a [Less mixin](http://lesscss.org/features/#mixins-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      .unknown-mixin();\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LessUnresolvedMixin",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 50,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LessUnresolvedVariable",
                "shortDescription": {
                  "text": "Unresolved variable"
                },
                "fullDescription": {
                  "text": "Reports a reference to a Less variable that is not resolved. Example: '* {\n  margin: @unknown-var;\n}'",
                  "markdown": "Reports a reference to a [Less variable](http://lesscss.org/features/#variables-feature) that is not resolved.\n\n**Example:**\n\n\n    * {\n      margin: @unknown-var;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LessUnresolvedVariable",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 50,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "LessResolvedByNameOnly",
                "shortDescription": {
                  "text": "Missing import"
                },
                "fullDescription": {
                  "text": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly imported in the current file. Example: '* {\n  margin: @var-in-other-file;\n}'",
                  "markdown": "Reports a reference to a variable or mixin that is declared in another file, which is not explicitly [imported](http://lesscss.org/features/#import-atrules-feature) in the current file.\n\n**Example:**\n\n\n    * {\n      margin: @var-in-other-file;\n    }\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "LessResolvedByNameOnly",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Less",
                      "index": 50,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.intelliLang",
            "version": "243.6317",
            "rules": [
              {
                "id": "InjectedReferences",
                "shortDescription": {
                  "text": "Injected references"
                },
                "fullDescription": {
                  "text": "Reports unresolved references injected by Language Injections. Example: '@Language(\"file-reference\")\n    String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist'",
                  "markdown": "Reports unresolved references injected by [Language Injections](https://www.jetbrains.com/help/idea/using-language-injections.html).\n\nExample:\n\n\n        @Language(\"file-reference\")\n        String fileName = \"/home/user/nonexistent.file\"; // highlighted if file doesn't exist\n"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "InjectedReferences",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "General",
                      "index": 31,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.vue",
            "version": "243.6317",
            "rules": [
              {
                "id": "VueDataFunction",
                "shortDescription": {
                  "text": "Data function"
                },
                "fullDescription": {
                  "text": "Reports a Vue component data property that is not a function. Suggests wrapping an object literal with a function. When defining a component, 'data' must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for 'data', that very object will be shared by reference across all instances created! With a 'data' function, every time a new instance is created we can simply call it to return a fresh copy of the initial data.",
                  "markdown": "Reports a Vue component [data](https://vuejs.org/v2/api/#data) property that is not a function. Suggests wrapping an object literal with a function.\n\nWhen defining a component, `data` must be declared as a function that returns the initial data object, because the same definition will be used for creating numerous instances. If a plain object is still used for `data`, that very object will be shared by reference across all instances created! With a `data` function, every time a new instance is created we can simply call it to return a fresh copy of the initial data."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VueDataFunction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 52,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueUnrecognizedSlot",
                "shortDescription": {
                  "text": "Unrecognized slot"
                },
                "fullDescription": {
                  "text": "Reports an unrecognized Vue slot.",
                  "markdown": "Reports an unrecognized Vue slot."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "VueUnrecognizedSlot",
                    "ideaSeverity": "WEAK WARNING",
                    "qodanaSeverity": "Moderate"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 52,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueMissingComponentImportInspection",
                "shortDescription": {
                  "text": "Missing component import"
                },
                "fullDescription": {
                  "text": "Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import.",
                  "markdown": "Reports Vue components, which require to be imported in Vue templates. It provides a quick fix to add the missing import."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VueMissingComponentImportInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 52,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueUnrecognizedDirective",
                "shortDescription": {
                  "text": "Unrecognized directive"
                },
                "fullDescription": {
                  "text": "Reports an unrecognized Vue directive.",
                  "markdown": "Reports an unrecognized Vue directive."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VueUnrecognizedDirective",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 52,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueDuplicateTag",
                "shortDescription": {
                  "text": "Duplicate template/script tag"
                },
                "fullDescription": {
                  "text": "Reports multiple usages of the 'template' or 'script' tag in a Vue file. Vue Component specification indicates that each '*.vue' file can contain at most one 'template' or 'script' block at a time.",
                  "markdown": "Reports multiple usages of the `template` or `script` tag in a Vue file.\n\n[Vue Component specification](https://vue-loader.vuejs.org/spec.html) indicates that each `*.vue` file can contain at most one `template` or `script` block at a time."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VueDuplicateTag",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 52,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "VueDeprecatedSymbol",
                "shortDescription": {
                  "text": "Deprecated symbol"
                },
                "fullDescription": {
                  "text": "Reports a deprecated Vue symbol.",
                  "markdown": "Reports a deprecated Vue symbol."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "VueDeprecatedSymbol",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Vue",
                      "index": 52,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.jetbrains.plugins.ini4idea",
            "version": "243.6317",
            "rules": [
              {
                "id": "DuplicateKeyInSection",
                "shortDescription": {
                  "text": "Duplicate directive in section"
                },
                "fullDescription": {
                  "text": "Reports duplicate properties in the 'ini' file section.",
                  "markdown": "Reports duplicate properties in the `ini` file section."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicateKeyInSection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Ini files",
                      "index": 54,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "DuplicateSectionInFile",
                "shortDescription": {
                  "text": "Duplicate section in file"
                },
                "fullDescription": {
                  "text": "Reports duplicate sections in the 'ini' file.",
                  "markdown": "Reports duplicate sections in the `ini` file."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "DuplicateSectionInFile",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Ini files",
                      "index": 54,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.intellij.qodana",
            "version": "243.6317",
            "rules": [
              {
                "id": "JsCoverageInspection",
                "shortDescription": {
                  "text": "Check JavaScript and TypeScript source code coverage"
                },
                "fullDescription": {
                  "text": "Reports methods, classes and files whose coverage is below a certain threshold.",
                  "markdown": "Reports methods, classes and files whose coverage is below a certain threshold."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsCoverageInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Code Coverage",
                      "index": 68,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "QodanaSanity",
                "shortDescription": {
                  "text": "Sanity"
                },
                "fullDescription": {
                  "text": "Reports issues essential to this file like syntax errors, unresolved methods and variables, etc...",
                  "markdown": "Reports issues essential to this file like syntax errors, unresolved methods and variables, etc..."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "QodanaSanity",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Qodana",
                      "index": 79,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.github",
            "version": "243.6317-ultimate",
            "rules": [
              {
                "id": "GithubFunctionSignatureValidation",
                "shortDescription": {
                  "text": "Standard library functions validation"
                },
                "fullDescription": {
                  "text": "Reports invalid GitHub Actions Expression language standard library function calls For more information on GitHub Actions Expression language, see the GitHub documentation.",
                  "markdown": "Reports invalid GitHub Actions Expression language standard library function calls\n\n\nFor more information on GitHub Actions Expression language, see the [GitHub documentation](https://docs.github.com/en/actions/learn-github-actions/expressions)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "GithubFunctionSignatureValidation",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 70,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "IllegalJobDependency",
                "shortDescription": {
                  "text": "Undefined job dependency"
                },
                "fullDescription": {
                  "text": "Detects dependencies to undefined Jobs in GitHub workflow YML file. See the GitHub Actions documentation for more information on workflow syntax.",
                  "markdown": "Detects dependencies to undefined Jobs in GitHub workflow YML file.\n\n\nSee the [GitHub Actions documentation](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds) for more information on workflow syntax."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "IllegalJobDependency",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 70,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "CyclicJobDependency",
                "shortDescription": {
                  "text": "Cyclic job dependency"
                },
                "fullDescription": {
                  "text": "Detects cyclic dependencies for jobs in GitHub workflow YML file. See the GitHub Actions documentation for more information on workflow syntax.",
                  "markdown": "Detects cyclic dependencies for jobs in GitHub workflow YML file.\n\n\nSee the [GitHub Actions documentation](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idneeds) for more information on workflow syntax."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "CyclicJobDependency",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 70,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UndefinedParamsPresent",
                "shortDescription": {
                  "text": "Undefined action parameters"
                },
                "fullDescription": {
                  "text": "Reports the presence of parameters which are not defined in an action. It also provides a Quick Fix by removing the undefined parameters. For more information on action params, see the GitHub documentation.",
                  "markdown": "Reports the presence of parameters which are not defined in an action. It also provides a Quick Fix by removing the undefined parameters.\n\n\nFor more information on action params, see the [GitHub documentation](https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runsstepswith)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UndefinedParamsPresent",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 70,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "MandatoryParamsAbsent",
                "shortDescription": {
                  "text": "Invalid action parameters"
                },
                "fullDescription": {
                  "text": "Reports the absence of mandatory parameters that do not have a default value for an action. It also provides a Quick Fix by adding the missing parameters with an empty value. For more information on action params, see the GitHub documentation.",
                  "markdown": "Reports the absence of mandatory parameters that do not have a default value for an action. It also provides a Quick Fix by adding the missing parameters with an empty value.\n\n\nFor more information on action params, see the [GitHub documentation](https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#runsstepswith)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "MandatoryParamsAbsent",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 70,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "UndefinedAction",
                "shortDescription": {
                  "text": "Undefined action reference"
                },
                "fullDescription": {
                  "text": "Detects unresolved action references in GitHub action and workflow files. For more information on action references, see the GitHub documentation.",
                  "markdown": "Detects unresolved action references in GitHub action and workflow files.\n\n\nFor more information on action references, see the [GitHub documentation](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsuses)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "UndefinedAction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "GitHub actions",
                      "index": 70,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.stylelint",
            "version": "243.6317",
            "rules": [
              {
                "id": "Stylelint",
                "shortDescription": {
                  "text": "Stylelint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the Stylelint linter. The highlighting is based on the rule severity specified in the Stylelint configuration file for each individual rule.",
                  "markdown": "Reports a discrepancy detected by the [Stylelint](http://stylelint.io) linter.   \n\nThe highlighting is based on the rule severity specified in the [Stylelint configuration file](https://stylelint.io/user-guide/configure) for each individual rule."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "Stylelint",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "CSS/Code quality tools",
                      "index": 72,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "intellij.webpack",
            "version": "243.6317",
            "rules": [
              {
                "id": "WebpackConfigHighlighting",
                "shortDescription": {
                  "text": "Webpack config compliance with JSON Schema"
                },
                "fullDescription": {
                  "text": "Validates options in webpack config files (which name should start with `webpack`, e.g. `webpack.config.js`) against webpack options schema. Disable this inspection to turn off validation and code completion inside the configuration object.",
                  "markdown": "Validates options in webpack config files (which name should start with \\`webpack\\`, e.g. \\`webpack.config.js\\`) against [webpack options schema](https://github.com/webpack/webpack/blob/master/schemas/WebpackOptions.json).   \n\nDisable this inspection to turn off validation and code completion inside the configuration object."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "WebpackConfigHighlighting",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/General",
                      "index": 17,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tslint",
            "version": "243.6317",
            "rules": [
              {
                "id": "TsLint",
                "shortDescription": {
                  "text": "TSLint"
                },
                "fullDescription": {
                  "text": "Reports a discrepancy detected by the TSLint linter. The highlighting is based on the rule severity specified in the TSLint configuration file for each individual rule. Clear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules.",
                  "markdown": "Reports a discrepancy detected by the [TSLint](https://github.com/palantir/tslint) linter.   \n\nThe highlighting is based on the rule severity specified in the [TSLint configuration file](https://palantir.github.io/tslint/usage/configuration/) for each individual rule.   \n\nClear the 'Use rule severity from the configuration file' checkbox to use the severity configured in this inspection for all TSLint rules."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TsLint",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JavaScript and TypeScript/Code quality tools",
                      "index": 67,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.jsonpath",
            "version": "243.6317",
            "rules": [
              {
                "id": "JsonPathEvaluateUnknownKey",
                "shortDescription": {
                  "text": "Unknown property key used for JSONPath evaluate expression"
                },
                "fullDescription": {
                  "text": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate.",
                  "markdown": "Reports a key in a JSONPath expression that is missing in the source JSON document to evaluate."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonPathEvaluateUnknownKey",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSONPath",
                      "index": 76,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownFunction",
                "shortDescription": {
                  "text": "Unknown JSONPath function"
                },
                "fullDescription": {
                  "text": "Reports an unknown name in a JSONPath function call instead of known standard function names: 'concat', 'keys', 'length', 'min', 'max', 'avg', 'stddev', 'sum'.",
                  "markdown": "Reports an unknown name in a JSONPath function call instead of known standard function names: `concat`, `keys`, `length`, `min`, `max`, `avg`, `stddev`, `sum`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonPathUnknownFunction",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSONPath",
                      "index": 76,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "JsonPathUnknownOperator",
                "shortDescription": {
                  "text": "Unknown JSONPath operator"
                },
                "fullDescription": {
                  "text": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: 'in', 'nin', 'subsetof', 'anyof', 'noneof', 'size', 'empty', 'contains'.",
                  "markdown": "Reports an unknown operator on a JSONPath expression instead of one of the standard ones: `in`, `nin`, `subsetof`, `anyof`, `noneof`, `size`, `empty`, `contains`."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "JsonPathUnknownOperator",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "JSONPath",
                      "index": 76,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.jetbrains.plugins.docker.gateway",
            "version": "243.6317",
            "rules": [
              {
                "id": "DevContainerIdeSettings",
                "shortDescription": {
                  "text": "Validate IDE settings"
                },
                "fullDescription": {
                  "text": "No description available",
                  "markdown": "No description available"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "error",
                  "parameters": {
                    "suppressToolId": "DevContainerIdeSettings",
                    "ideaSeverity": "ERROR",
                    "qodanaSeverity": "Critical"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Dev Container",
                      "index": 77,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "com.intellij.cidr.lang.clangd",
            "version": "243.6317",
            "rules": [
              {
                "id": "ClangdMeasureResolve",
                "shortDescription": {
                  "text": "Measure resolve via clangd-indexer"
                },
                "fullDescription": {
                  "text": "Measures time needed to parse all files in the given scope",
                  "markdown": "Measures time needed to parse all files in the given scope"
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "ClangdMeasureResolve",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Clangd Inspections",
                      "index": 78,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "tanvd.grazi",
            "version": "243.6317",
            "rules": [
              {
                "id": "LanguageDetectionInspection",
                "shortDescription": {
                  "text": "Natural language detection"
                },
                "fullDescription": {
                  "text": "Detects natural languages and suggests enabling corresponding grammar and spelling checks.",
                  "markdown": "Detects natural languages and suggests enabling corresponding grammar and spelling checks."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "LanguageDetectionInspection",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 69,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              },
              {
                "id": "GrazieInspection",
                "shortDescription": {
                  "text": "Grammar"
                },
                "fullDescription": {
                  "text": "Reports grammar mistakes in your text. You can configure the inspection in Settings | Editor | Natural Languages | Grammar.",
                  "markdown": "Reports grammar mistakes in your text. You can configure the inspection in [Settings \\| Editor \\| Natural Languages \\| Grammar](settings://reference.settingsdialog.project.grazie)."
                },
                "defaultConfiguration": {
                  "enabled": false,
                  "level": "note",
                  "parameters": {
                    "suppressToolId": "GrazieInspection",
                    "ideaSeverity": "GRAMMAR_ERROR",
                    "qodanaSeverity": "Info"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "Proofreading",
                      "index": 69,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          },
          {
            "name": "org.toml.lang",
            "version": "243.6317",
            "rules": [
              {
                "id": "TomlUnresolvedReference",
                "shortDescription": {
                  "text": "Unresolved reference"
                },
                "fullDescription": {
                  "text": "Reports unresolved references in TOML files.",
                  "markdown": "Reports unresolved references in TOML files."
                },
                "defaultConfiguration": {
                  "enabled": true,
                  "level": "warning",
                  "parameters": {
                    "suppressToolId": "TomlUnresolvedReference",
                    "ideaSeverity": "WARNING",
                    "qodanaSeverity": "High"
                  }
                },
                "relationships": [
                  {
                    "target": {
                      "id": "TOML",
                      "index": 83,
                      "toolComponent": {
                        "name": "CL"
                      }
                    },
                    "kinds": [
                      "superset"
                    ]
                  }
                ]
              }
            ],
            "language": "en-US",
            "contents": [
              "localizedData",
              "nonLocalizedData"
            ],
            "isComprehensive": false
          }
        ]
      },
      "invocations": [
        {
          "startTimeUtc": "2024-07-29T13:40:56.766724Z",
          "exitCode": 0,
          "executionSuccessful": true
        }
      ],
      "language": "en-US",
      "versionControlProvenance": [
        {
          "repositoryUri": "ssh://git@github.com/maxim-banaev/clang-tidy-inspections.git",
          "revisionId": "e89ee9900eec54ce07238ab1062a4a899f17ba02",
          "branch": "master",
          "properties": {
            "repoUrl": "",
            "lastAuthorName": "Maxim.Banaev",
            "vcsType": "Git",
            "lastAuthorEmail": "maxim.banaev@jetbrains.com"
          }
        }
      ],
      "results": [
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Argument name 'bar' in comment does not match parameter name 'foo_'",
            "markdown": "Argument name 'bar' in comment does not match parameter name 'foo_'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-argument-comment.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 6,
                  "charOffset": 927,
                  "charLength": 8,
                  "snippet": {
                    "text": "/*bar=*/"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 841,
                  "charLength": 248,
                  "snippet": {
                    "text": "void check() {\n  std::cout << \"-- check bugprone-argument-comment\" << std::endl;\n  f1(/*bar=*/true);                 // warn here!\n  f11(/*foo=*/true, /*bar=*/false); // shouldn't warn here\n  f1(/*foo=*/true);                 // shouldn't warn here"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "824e38206053747f",
            "equalIndicator/v1": "00b489ceb6d68b9f1658ddee911c0c28d1a35901c4f8da6abbaa38c9feaac3b5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not use 'std::endl' with streams; use '\\n' instead",
            "markdown": "Do not use 'std::endl' with streams; use '\\\\n' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance/performance-unnecessary-value-param.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 66,
                  "charOffset": 1977,
                  "charLength": 9,
                  "snippet": {
                    "text": "std::endl"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 1896,
                  "charLength": 145,
                  "snippet": {
                    "text": "\nvoid check() {\n  std::cout << \"-- check performance-unnecessary-value-param\" << std::endl;\n}\n} // namespace performance::unnecessary_value_param"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "456085a76e283fdc",
            "equalIndicator/v1": "013664f67aef929b7c2b99431fca281c3d5879441fb3f140e5a67989e1c1a333"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Implicit conversion 'bool' -> 'int'",
            "markdown": "Implicit conversion 'bool' -\\> 'int'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-implicit-bool-conversion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 13,
                  "charOffset": 562,
                  "charLength": 3,
                  "snippet": {
                    "text": "foo"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 499,
                  "charLength": 154,
                  "snippet": {
                    "text": "public:\n  [[maybe_unused]] void setFoo(bool foo) {\n    m_foo = foo; // warning: implicit conversion bool -> int\n  }\n  int getFoo() const { return m_foo; }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "14090e976b9d7410",
            "equalIndicator/v1": "01fe3332c88f0b4d3f25a99a9c4ac34a27a6117f7da80658f6d73b73ca19defb"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not declare C-style arrays, use std::array<> instead",
            "markdown": "Do not declare C-style arrays, use std::array\\<\\> instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-avoid-c-arrays.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 641,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 561,
                  "charLength": 171,
                  "snippet": {
                    "text": "    1, 2}; // warning: do not declare C-style arrays, use std::array<> instead\n\nint b[1]; // warning: do not declare C-style arrays, use std::array<> instead\n\nvoid foo() {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5fd4d06d70d3d233",
            "equalIndicator/v1": "0558249461793d6989be379377e5487709b3106aa0dd3e473933a8656461e41e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant void argument list in function declaration",
            "markdown": "Redundant void argument list in function declaration"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-redundant-void-arg.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 7,
                  "charOffset": 405,
                  "charLength": 4,
                  "snippet": {
                    "text": "void"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 356,
                  "charLength": 208,
                  "snippet": {
                    "text": "\nnamespace modernize::redundant_void_arg {\nint f(void);                    // warn here!\nint (*fu(void))(void);          // warn here!\ntypedef int (*f_t(void))(void); // warn here! NOLINT(modernize-use-using)"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f25789aca69c1ce3",
            "equalIndicator/v1": "06ab96ed473d38ebc1ba589b374e149937f69b1f2f6cb694ea9a5d8c99c6a599"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Std::basic_string_view outlives its value",
            "markdown": "Std::basic_string_view outlives its value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-dangling-handle.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "charOffset": 926,
                  "charLength": 1,
                  "snippet": {
                    "text": "V"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 888,
                  "charLength": 124,
                  "snippet": {
                    "text": "\n  std::vector<std::string_view> V;\n  V.push_back(std::string()); // warn here!\n  V.resize(3, std::string()); // warn here!\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "49a6213e8947e827",
            "equalIndicator/v1": "0c8d1b7623fc8521b4b3821dd6fbac51b74f13ebca273ee8c15cc14e8233dca9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "An integer is interpreted as a character code when assigning it to a string; if this is intended, cast the integer to the appropriate character type; if you want a string representation, use the appropriate conversion facility",
            "markdown": "An integer is interpreted as a character code when assigning it to a string; if this is intended, cast the integer to the appropriate character type; if you want a string representation, use the appropriate conversion facility"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-string-integer-assignment.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 7,
                  "charOffset": 651,
                  "charLength": 1,
                  "snippet": {
                    "text": "x"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 606,
                  "charLength": 131,
                  "snippet": {
                    "text": "  int x = 5965;\n  s = 6; // warn here!\n  s = x; // warn here! NOLINT(bugprone-narrowing-conversions)\n}\n#pragma clang diagnostic pop"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dd8fcaba3f168250",
            "equalIndicator/v1": "0f4ae6fb20c391c98c16c5592834950616395cefa19ac500c96b8a721ef68649"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not use 'else' after 'return'",
            "markdown": "Do not use 'else' after 'return'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-else-after-return.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 7,
                  "charOffset": 724,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 682,
                  "charLength": 83,
                  "snippet": {
                    "text": "    if (Value == 1) {\n      return;\n    } else { // warn here!\n      Local++;\n    }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8b76cb6760505c80",
            "equalIndicator/v1": "10253a5e9c45dc9f44203e467ee2050d24427808372ade8d0bf1ec920bbb5bb9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal in ternary expression result",
            "markdown": "Redundant boolean literal in ternary expression result"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 7,
                  "charOffset": 1719,
                  "charLength": 5,
                  "snippet": {
                    "text": "false"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 65,
                  "startColumn": 1,
                  "charOffset": 1678,
                  "charLength": 111,
                  "snippet": {
                    "text": "\n  e ? true : false; // warn here!\n  e ? false : true; // warn here!\n  if (true)         // warn here!\n    t();"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "03179bdec654f5d2",
            "equalIndicator/v1": "10670966ec7eaa42c3773f416135e4d2fec46aec670ece4a9fb51564b5b4bab4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Variable 'pointerToNonConstInt' provides global access to a non-const object; consider making the pointed-to data 'const'",
            "markdown": "Variable 'pointerToNonConstInt' provides global access to a non-const object; consider making the pointed-to data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cppcoreguidelines/avoid-non-const-global-variables.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 23,
                  "charOffset": 615,
                  "charLength": 20,
                  "snippet": {
                    "text": "pointerToNonConstInt"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 447,
                  "charLength": 234,
                  "snippet": {
                    "text": "int nonConstInt = 0;                                       // warn here!\n[[maybe_unused]] int &nonConstIntReference = nonConstInt;  // warn here!\n[[maybe_unused]] int *pointerToNonConstInt = &nonConstInt; // warn here!\n\nvoid check() {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "12122aaca52fa3a9",
            "equalIndicator/v1": "1197041b0330a076dab0e212c0a82021dc52fe64d8629d9a08940cd3e1446428"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not declare C-style arrays, use std::array<> instead",
            "markdown": "Do not declare C-style arrays, use std::array\\<\\> instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-avoid-c-arrays.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 5,
                  "charOffset": 1296,
                  "charLength": 6,
                  "snippet": {
                    "text": "int[4]"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1264,
                  "charLength": 188,
                  "snippet": {
                    "text": "\nusing k [[maybe_unused]] =\n    int[4]; // warning: do not declare C-style arrays, use std::array<> instead\n\nvoid check() { std::cout << \"-- check modernize-avoid-c-arrays\" << std::endl; }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "60563bba63db1ffd",
            "equalIndicator/v1": "16597d3bca587136fdb871c78e63b2106bb50a5b0ded3ef4519f565ddbcc160e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Initializer for member 's' is redundant",
            "markdown": "Initializer for member 's' is redundant"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-redundant-member-init.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 11,
                  "charOffset": 506,
                  "charLength": 1,
                  "snippet": {
                    "text": "s"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 476,
                  "charLength": 60,
                  "snippet": {
                    "text": "class Foo {\npublic:\n  Foo() : s() {} // warn here!\n\nprivate:"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1a71997e46b52f96",
            "equalIndicator/v1": "1779c47d1c77329b89522b52c18dc890cb2aa50c12e83dda4a37069eeb25a6bb"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'locale.h'; consider using 'clocale' instead",
            "markdown": "Inclusion of deprecated C++ header 'locale.h'; consider using 'clocale' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 877,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <locale.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 835,
                  "charLength": 99,
                  "snippet": {
                    "text": "#include <inttypes.h>\n#include <limits.h>\n#include <locale.h>\n#include <math.h>\n#include <setjmp.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3b07922b8e15326d",
            "equalIndicator/v1": "178cb5d2303a4b570ca61186278e18cbf8ca3203c41f24b1c9a18be292aa77ab"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Throwing an exception whose type 'custom_exception' is not derived from 'std::exception'",
            "markdown": "Throwing an exception whose type 'custom_exception' is not derived from 'std::exception'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hicpp/hicpp-exception-baseclass.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 9,
                  "charOffset": 582,
                  "charLength": 16,
                  "snippet": {
                    "text": "custom_exception"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 486,
                  "charLength": 212,
                  "snippet": {
                    "text": "[[maybe_unused]] void throwing2() noexcept(false) {\n  // Problematic throw expressions.\n  throw custom_exception(); // warn here!\n}\nvoid check() { std::cout << \"-- check hicpp-exception-baseclass\" << std::endl; }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6b1a8d8ef9a373ea",
            "equalIndicator/v1": "1e1ddc8b8792c5a7e3856a821320cc47c3ce847ee9dee0d4bc79ea10245ec81d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Converting integer literal to bool, use bool literal instead",
            "markdown": "Converting integer literal to bool, use bool literal instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-use-bool-literals.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 37,
                  "charOffset": 593,
                  "charLength": 1,
                  "snippet": {
                    "text": "0"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 429,
                  "charLength": 222,
                  "snippet": {
                    "text": "  [[maybe_unused]] bool f = static_cast<bool>(1); // warn here!\n  std::ios_base::sync_with_stdio(0);              // warn here!\n  [[maybe_unused]] bool x = p ? 1 : 0;            // warn here!\n}\n#pragma clang diagnostic pop"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1078ac32052bc1ce",
            "equalIndicator/v1": "2138bfe8d3519c9b01e0775aa88b5470a6d7a27f35d6d89dc7012bec6b806e07"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Switch statement without labels has no effect",
            "markdown": "Switch statement without labels has no effect"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hicpp/hicpp-multiway-paths-covered.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "charOffset": 973,
                  "charLength": 6,
                  "snippet": {
                    "text": "switch"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 956,
                  "charLength": 49,
                  "snippet": {
                    "text": "\n  int i = 42;\n  switch (i) { // warn here!\n  }\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fcd689a1848ea63d",
            "equalIndicator/v1": "21a1da053aa62c1d214cb26c8509a7d81294f9ac06f12d8b765764c2cc534323"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not overload unary operator&, it is dangerous.",
            "markdown": "Do not overload unary operator\\&, it is dangerous."
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "google/google-runtime-operator.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 3,
                  "charOffset": 370,
                  "charLength": 4,
                  "snippet": {
                    "text": "void"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 349,
                  "charLength": 136,
                  "snippet": {
                    "text": "struct X {\npublic:\n  void operator&() {} // warn here!\n};\nvoid check() { std::cout << \"-- check google-runtime-operator\" << std::endl; }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ff1a38745da7795a",
            "equalIndicator/v1": "21ce44824fc13639a38d2c117f5d1f8e76a6ec00d54529bb2ee977e748685eb6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant string initialization",
            "markdown": "Redundant string initialization"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-redundant-string-init.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 15,
                  "charOffset": 624,
                  "charLength": 1,
                  "snippet": {
                    "text": "b"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 507,
                  "charLength": 190,
                  "snippet": {
                    "text": "  // Initializing string with empty string literal is unnecessary.\n  std::string a = \"\"; // warn here!\n  std::string b(\"\");  // warn here!\n}\n} // namespace readability::redundant_string_init"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "16292162a0406228",
            "equalIndicator/v1": "2260e55bb467e05b90475c3a8e7e071cf0f422537c0b715e3357c33b600649c6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'bar' can be made static",
            "markdown": "Method 'bar' can be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-convert-member-functions-to-static.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 24,
                  "charOffset": 940,
                  "charLength": 3,
                  "snippet": {
                    "text": "bar"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 845,
                  "charLength": 134,
                  "snippet": {
                    "text": "  [[maybe_unused]] int getI() const { return i; } // do not warn here!\n\n  [[maybe_unused]] int bar() { // warn here!\n    return 0;\n  }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3d1fa3203cb7143e",
            "equalIndicator/v1": "23239220ce2fe060418bfb3f31af8e3ef8e0a3f86879a0d27603dde5f8d3eb8a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calling a base constructor other than the copy constructor",
            "markdown": "Calling a base constructor other than the copy constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-copy-constructor-init.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "charOffset": 604,
                  "charLength": 2,
                  "snippet": {
                    "text": "X2"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 555,
                  "charLength": 175,
                  "snippet": {
                    "text": "\nclass [[maybe_unused]] X2 : public Copyable {\n  X2([[maybe_unused]] const X2 &other) { // warn here!\n  }                                      // Copyable(other) is missing\n};"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bfe2f4e8d89e4b68",
            "equalIndicator/v1": "236289fa5b02cb5c87a7cfa8177cf5e58359be84adadbff175fcc91394b21673"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Address of stack memory associated with local variable 'kStr' is still referred to by the global variable 'p' upon returning to the caller. This will be a dangling reference",
            "markdown": "Address of stack memory associated with local variable 'kStr' is still referred to by the global variable 'p' upon returning to the caller. This will be a dangling reference"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "analyzer/core/StackAddrEscapeBase.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 417,
                  "charLength": 1,
                  "snippet": {
                    "text": "}"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 359,
                  "charLength": 93,
                  "snippet": {
                    "text": "  char const kStr[] = \"string\";\n  p = kStr; // warn here!\n}\n\n[[maybe_unused]] void *test1() {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7b6311a87fdd02f3",
            "equalIndicator/v1": "236de6df4a7d46579b0b7946c858c2554c1319da08b832b99da0df46ae798cc6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal supplied to boolean operator",
            "markdown": "Redundant boolean literal supplied to boolean operator"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 12,
                  "charOffset": 1583,
                  "charLength": 4,
                  "snippet": {
                    "text": "true"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 57,
                  "startColumn": 1,
                  "charOffset": 1534,
                  "charLength": 108,
                  "snippet": {
                    "text": "  if (b && false) { // warn here!\n  }\n  if (b || true) { // warn here!\n  }\n  if (b || false) { // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e6eab93677c2cb52",
            "equalIndicator/v1": "24fa7afdb3bef091bdd21110fd7f11e77cee205c231cd9b7c4989593bfbcfae9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Default arguments on virtual or override methods are prohibited",
            "markdown": "Default arguments on virtual or override methods are prohibited"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "google/google-default-arguments.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 16,
                  "charOffset": 338,
                  "charLength": 3,
                  "snippet": {
                    "text": "foo"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "charOffset": 274,
                  "charLength": 178,
                  "snippet": {
                    "text": "namespace google::default_arguments {\nstruct X {\n  virtual void foo(int x = 1){}; // warn here!\n};\nvoid check() { std::cout << \"-- check google-default-arguments\" << std::endl; }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "832d32946370e003",
            "equalIndicator/v1": "2657d48b1823baafb553ce8478c20434c560a806f3317a1beb03a95735960554"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of integer division used in a floating point context; possible loss of precision",
            "markdown": "Result of integer division used in a floating point context; possible loss of precision"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-integer-division.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 7,
                  "charOffset": 869,
                  "charLength": 2,
                  "snippet": {
                    "text": "32"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 848,
                  "charLength": 152,
                  "snippet": {
                    "text": "  int i = 42;\n\n  d = 32 * 8 / (2 + i);         // warn here!\n  d = 8 * floatFunc(1 + 7 / 2); // warn here!\n  d = i / (1 << 4);             // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d2da9fea7c4485f0",
            "equalIndicator/v1": "2755ffe9c7990ed51e43304b7f1125d0cc9b22203223854609c356b7c0bce7d6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Std::basic_string_view outlives its value",
            "markdown": "Std::basic_string_view outlives its value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-dangling-handle.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 3,
                  "charOffset": 858,
                  "charLength": 4,
                  "snippet": {
                    "text": "View"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 767,
                  "charLength": 156,
                  "snippet": {
                    "text": "  [[maybe_unused]] std::string_view View = std::string(); // warn here!\n  std::string A;\n  View = A + \"A\"; // warn here!\n\n  std::vector<std::string_view> V;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5ce26582aff513f5",
            "equalIndicator/v1": "29352082c45915ba2cec78d03936ce0ac97706ef31e5afcda7af443694a2f2c9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'wait' should be placed inside a while statement or used with a conditional parameter",
            "markdown": "'wait' should be placed inside a while statement or used with a conditional parameter"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-spuriously-wake-up-functions.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 15,
                  "charOffset": 948,
                  "charLength": 4,
                  "snippet": {
                    "text": "wait"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 903,
                  "charLength": 79,
                  "snippet": {
                    "text": "\n  if (list.next == nullptr) {\n    condition.wait(lk); // should warn here\n  }\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8bb753c71d83fbd9",
            "equalIndicator/v1": "2abe93b57b6f142654953d5e4833e8f5b8b7f5eef345172633f2f3fae8cee6b7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal in conditional assignment",
            "markdown": "Redundant boolean literal in conditional assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 9,
                  "charOffset": 1965,
                  "charLength": 4,
                  "snippet": {
                    "text": "true"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 1947,
                  "charLength": 45,
                  "snippet": {
                    "text": "\n  if (e)\n    b = true;\n  else\n    b = false;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ad70ecde428e1e4b",
            "equalIndicator/v1": "2c49ddedea5761c4883007dfacee67f9edf0733cc93ab1fb4935f02a5fdc28b6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Std::basic_string_view outlives its value",
            "markdown": "Std::basic_string_view outlives its value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-dangling-handle.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 44,
                  "charOffset": 810,
                  "charLength": 11,
                  "snippet": {
                    "text": "std::string"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 702,
                  "charLength": 185,
                  "snippet": {
                    "text": "#pragma clang diagnostic ignored \"-Wdangling-gsl\"\nvoid check() {\n  [[maybe_unused]] std::string_view View = std::string(); // warn here!\n  std::string A;\n  View = A + \"A\"; // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "771c9b9627c827c5",
            "equalIndicator/v1": "2d78755b433aa8951f1ad4414f5b2fdfb3eee58a7f4b31cf0e62bb999cbe63e0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'fact' is within a recursive call chain",
            "markdown": "Function 'fact' is within a recursive call chain"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 5,
                  "charOffset": 903,
                  "charLength": 4,
                  "snippet": {
                    "text": "fact"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 867,
                  "charLength": 136,
                  "snippet": {
                    "text": "namespace misc::no_recursion {\n\nint fact(int i) noexcept(false) { // warn here!\n  if (i < 0) {\n    // Negative factorials are undefined."
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bf0a20ed5f261db5",
            "equalIndicator/v1": "2e86d787937332f3e46a0b2c1c9280b36c4fa86a902fe06ca9c8f046e38636b8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Method 'getP' can be made static",
            "markdown": "Method 'getP' can be made static"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-convert-member-functions-to-static.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 25,
                  "charOffset": 809,
                  "charLength": 4,
                  "snippet": {
                    "text": "getP"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 776,
                  "charLength": 139,
                  "snippet": {
                    "text": "\npublic:\n  [[maybe_unused]] char getP() { return p; } // warn here!\n\n  [[maybe_unused]] int getI() const { return i; } // do not warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "00d7165708d4843e",
            "equalIndicator/v1": "2f104dadbf2449b7d4487f978b7ed7c74cb5d8ca95276fd4604ec94adfe4c417"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not call 'setjmp'; consider using exception handling instead",
            "markdown": "Do not call 'setjmp'; consider using exception handling instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cert/cert-err52-cpp.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 7,
                  "charOffset": 641,
                  "charLength": 6,
                  "snippet": {
                    "text": "setjmp"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 565,
                  "charLength": 122,
                  "snippet": {
                    "text": "void check() {\n  std::cout << \"-- check cert-err52-cpp\" << std::endl;\n  if (setjmp(env) == 0) { // warn here!\n    f();\n  }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b63424ffd280f749",
            "equalIndicator/v1": "31f5c7209a7c5f09cac2313b4d4b353458ea523b8f0230569dbc5d039931d649"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not define a C-style variadic function; consider using a function parameter pack or currying instead",
            "markdown": "Do not define a C-style variadic function; consider using a function parameter pack or currying instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cert/cert-dcl50-cpp.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "charOffset": 517,
                  "charLength": 3,
                  "snippet": {
                    "text": "add"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 484,
                  "charLength": 120,
                  "snippet": {
                    "text": "namespace cert::dcl50_cpp {\n\nint add(int first, int second, ...) { // warn here!\n  int r = first + second;\n  va_list va;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ee3eb0f41c6499e6",
            "equalIndicator/v1": "32037ab090835d392d77dd5c3a4e7dc75d42c21266f6b0dca1a09bfc10d4c2ac"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant cast to the same type",
            "markdown": "Redundant cast to the same type"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "google/google-readability-casting.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 39,
                  "charOffset": 747,
                  "charLength": 17,
                  "snippet": {
                    "text": "(const char *)cpc"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 613,
                  "charLength": 199,
                  "snippet": {
                    "text": "#pragma clang diagnostic ignored \"-Wunused-value\"\n[[maybe_unused]] void test(const char *cpc) {\n  [[maybe_unused]] const char *cpc2 = (const char *)cpc; // warn here!\n\n  typedef const char *Typedef1;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a0cf40b2b334634a",
            "equalIndicator/v1": "3301912edf0110d2e6d7d14284d9d09fba85c3946e4cae7b220c04b872c8453a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal in ternary expression result",
            "markdown": "Redundant boolean literal in ternary expression result"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 7,
                  "charOffset": 1685,
                  "charLength": 4,
                  "snippet": {
                    "text": "true"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1648,
                  "charLength": 132,
                  "snippet": {
                    "text": "  auto e = random() % 2 == 0;\n\n  e ? true : false; // warn here!\n  e ? false : true; // warn here!\n  if (true)         // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7e90b024d796d1a2",
            "equalIndicator/v1": "33cde9175ce1c03ec818a88c73542b406b4f2fc8c7c83b4380f6ddf997c3fe1b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Variable 'nonConstInt' is non-const and globally accessible, consider making it const",
            "markdown": "Variable 'nonConstInt' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cppcoreguidelines/avoid-non-const-global-variables.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 5,
                  "charOffset": 451,
                  "charLength": 11,
                  "snippet": {
                    "text": "nonConstInt"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 382,
                  "charLength": 283,
                  "snippet": {
                    "text": "\nnamespace cppcoreguidelines::avoid_non_const_global_variables {\nint nonConstInt = 0;                                       // warn here!\n[[maybe_unused]] int &nonConstIntReference = nonConstInt;  // warn here!\n[[maybe_unused]] int *pointerToNonConstInt = &nonConstInt; // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c10a1663d4e83579",
            "equalIndicator/v1": "3478162e65c421363e49ffc76d547f0e6a535f5049b574feb06565c0bdfbe114"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'operator bool' must be marked explicit to avoid unintentional implicit conversions",
            "markdown": "'operator bool' must be marked explicit to avoid unintentional implicit conversions"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "google/google-explicit-constructor.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 12,
                  "charOffset": 414,
                  "charLength": 4,
                  "snippet": {
                    "text": "bool"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 367,
                  "charLength": 124,
                  "snippet": {
                    "text": "  S(int x) : x(x) {} // warn here!\n\n  operator bool() const { return true; } // warn here!\n\n  int getX() const { return x; }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9e7e1c2f9ffc65e4",
            "equalIndicator/v1": "35ed6afa31d8fe55e7f68308cb9c32f7701315bb151eb7a083d1eff974578a4d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Statement should be inside braces",
            "markdown": "Statement should be inside braces"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-braces-around-statements.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 3,
                  "charOffset": 1081,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 1055,
                  "charLength": 85,
                  "snippet": {
                    "text": "      time(nullptr)));\n\n  if (random() % 2 == 0) // warn here!\n    std::cout << \"\";\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "69ae9bdfc33e4c77",
            "equalIndicator/v1": "39237891b3ee8351cec32ae1a99915b50f74a2d7d10a2cfd6e67cafaf62b7278"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Pass by value and use std::move",
            "markdown": "Pass by value and use std::move"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-pass-by-value.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 7,
                  "charOffset": 1511,
                  "charLength": 17,
                  "snippet": {
                    "text": "const std::string"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1430,
                  "charLength": 225,
                  "snippet": {
                    "text": "#pragma clang diagnostic push\n#pragma ide diagnostic ignored \"UnusedValue\"\n  Foo(const std::string &Copied, const std::string &ReadOnly) // warn here!\n      : Copied(Copied), ReadOnly(ReadOnly) {}\n#pragma clang diagnostic pop"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d6e385d10338e3d2",
            "equalIndicator/v1": "3a28fbc9a5f6d9095f9e9d144ebb24e37cbaf8a177b22e76ec0e63d5531a5064"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal in if statement condition",
            "markdown": "Redundant boolean literal in if statement condition"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 7,
                  "charOffset": 1812,
                  "charLength": 5,
                  "snippet": {
                    "text": "false"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 70,
                  "startColumn": 1,
                  "charOffset": 1790,
                  "charLength": 58,
                  "snippet": {
                    "text": "  else\n    f();\n  if (false) // warn here!\n    t();\n  else"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1b5168b31d0ec9ea",
            "equalIndicator/v1": "3a49149a0a1a1da0a28c1da8551ee1711cb37a621eb6dccda30f54393aca85c7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'wctype.h'; consider using 'cwctype' instead",
            "markdown": "Inclusion of deprecated C++ header 'wctype.h'; consider using 'cwctype' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 1202,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <wctype.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1138,
                  "charLength": 126,
                  "snippet": {
                    "text": "#include <uchar.h> // deprecated since C++11\n#include <wchar.h>\n#include <wctype.h>\n\nnamespace modernize::deprecated_headers {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9b88ffd9199124f1",
            "equalIndicator/v1": "3a8c0b098bc2076a1f88594c1e77ae43668da2db6f1a8504f1edd3e8a0b5f895"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Implicit conversion 'int' -> 'bool'",
            "markdown": "Implicit conversion 'int' -\\> 'bool'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-implicit-bool-conversion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 7,
                  "charOffset": 717,
                  "charLength": 3,
                  "snippet": {
                    "text": "foo"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 658,
                  "charLength": 119,
                  "snippet": {
                    "text": "void use(Foo &foo) {\n  [[maybe_unused]] bool value =\n      foo.getFoo(); // warning: implicit conversion int -> bool\n}\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f2175edb0413a936",
            "equalIndicator/v1": "3ccee9b9774d989991abf7d6423d5d4371149463d242983614d5117fe7b4597c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'uchar.h'; consider using 'cuchar' instead",
            "markdown": "Inclusion of deprecated C++ header 'uchar.h'; consider using 'cuchar' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1138,
                  "charLength": 44,
                  "snippet": {
                    "text": "#include <uchar.h> // deprecated since C++11"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 1074,
                  "charLength": 147,
                  "snippet": {
                    "text": "#include <tgmath.h> // deprecated since C++11\n#include <time.h>\n#include <uchar.h> // deprecated since C++11\n#include <wchar.h>\n#include <wctype.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e1908a80608a5d0c",
            "equalIndicator/v1": "3f2f0170ace9625319a5bdf9e031439dc0d09c8fca59f5dcfb5e74d60dbb3c8c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Different indentation for 'if' and corresponding 'else'",
            "markdown": "Different indentation for 'if' and corresponding 'else'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-misleading-indentation.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 3,
                  "charOffset": 1358,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 1327,
                  "charLength": 107,
                  "snippet": {
                    "text": "    if (cond2)\n      foo1();\n  else\n    foo2(); // Wrong indentation: else belongs to if(cond2) statement.\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1033995493b243be",
            "equalIndicator/v1": "3fa30846135864c8ae787211d4a2ccaf44181c6d1f788208e7f8dfa764f46cc1"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "No header providing \"stdout\" is directly included",
            "markdown": "No header providing \"stdout\" is directly included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-non-copyable-objects.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 38,
                  "charOffset": 403,
                  "charLength": 6,
                  "snippet": {
                    "text": "stdout"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "charOffset": 312,
                  "charLength": 217,
                  "snippet": {
                    "text": "namespace misc::non_copyable_objects {\nvoid check() {\n  [[maybe_unused]] FILE my_stdout = *stdout; // warn here twice! NOLINT(misc-const-correctness)\n  std::cout << \"-- check misc-non-copyable-objects\" << std::endl;\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ec92f2f81a652081",
            "equalIndicator/v1": "407fb18b5c5740233f6397555dee5af2cc3a8b78593157893f755f2ef4fb0a2d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'my_stdout' declared as type 'FILE', which is unsafe to copy; did you mean 'FILE *'?",
            "markdown": "'my_stdout' declared as type 'FILE', which is unsafe to copy; did you mean 'FILE \\*'?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-non-copyable-objects.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 25,
                  "charOffset": 390,
                  "charLength": 9,
                  "snippet": {
                    "text": "my_stdout"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "charOffset": 312,
                  "charLength": 217,
                  "snippet": {
                    "text": "namespace misc::non_copyable_objects {\nvoid check() {\n  [[maybe_unused]] FILE my_stdout = *stdout; // warn here twice! NOLINT(misc-const-correctness)\n  std::cout << \"-- check misc-non-copyable-objects\" << std::endl;\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7bf49bfb25f364eb",
            "equalIndicator/v1": "41482f80449ae093869bfa2e3c9cba8346d4c766cb9f23cfed22fff5feb70c79"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Narrowing conversion from constant 'double' to 'int'",
            "markdown": "Narrowing conversion from constant 'double' to 'int'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cppcoreguidelines/narrowing-conversions.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 8,
                  "charOffset": 1540,
                  "charLength": 3,
                  "snippet": {
                    "text": "0.1"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 1519,
                  "charLength": 132,
                  "snippet": {
                    "text": "\n  int i = 0;\n  i += 0.1; // NOLINT(cppcoreguidelines-avoid-magic-numbers)\n}\n} // namespace cppcoreguidelines::narrowing_conversions"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a5b810643d4f051d",
            "equalIndicator/v1": "417d7f72b2adb4bfa2b4e729d5ec17e14da0a3f04273020fbede6aa6041303ec"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use of a signed integer operand with a binary bitwise operator",
            "markdown": "Use of a signed integer operand with a binary bitwise operator"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hicpp/hicpp-signed-bitwise.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 13,
                  "charOffset": 807,
                  "charLength": 6,
                  "snippet": {
                    "text": "SValue"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 744,
                  "charLength": 119,
                  "snippet": {
                    "text": "  int SValue = 42;\n  [[maybe_unused]] int SResult;\n  SResult = SValue & 1; // warn here!\n}\n#pragma clang diagnostic pop"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4bf26265d79a4a27",
            "equalIndicator/v1": "42028fd0699a96dfaf8066963103a885d1fd1d4593c8bed42a25b35c34630709"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'readability::inconsistent_declaration_parameter_name::templateFunctionWithSeparateDeclarationAndDefinition' has a definition with different parameter names",
            "markdown": "Function 'readability::inconsistent_declaration_parameter_name::templateFunctionWithSeparateDeclarationAndDefinition' has a definition with different parameter names"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-inconsistent-declaration-parameter-name.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "charOffset": 909,
                  "charLength": 52,
                  "snippet": {
                    "text": "templateFunctionWithSeparateDeclarationAndDefinition"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 881,
                  "charLength": 131,
                  "snippet": {
                    "text": "\ntemplate <typename T>\nvoid templateFunctionWithSeparateDeclarationAndDefinition(T a); // warn here!\n\n#pragma clang diagnostic push"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "83c947702b86c12e",
            "equalIndicator/v1": "42b25b78aafca5ba755c12966e130a5b1f8a5164c03327778561151400b3fa50"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Address of stack memory associated with local variable 'y' is still referred to by the static variable 'x' upon returning to the caller. This will be a dangling reference",
            "markdown": "Address of stack memory associated with local variable 'y' is still referred to by the static variable 'x' upon returning to the caller. This will be a dangling reference"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "analyzer/core/StackAddrEscapeBase.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 583,
                  "charLength": 1,
                  "snippet": {
                    "text": "}"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 550,
                  "charLength": 37,
                  "snippet": {
                    "text": "  int y;\n  x = &y; // warn here!\n}\n}\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c80e127fb25e30c4",
            "equalIndicator/v1": "457d3e2d61e2561c76819d31010dd7a401a339007da98b9910f66e67bc505a7d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'time.h'; consider using 'ctime' instead",
            "markdown": "Inclusion of deprecated C++ header 'time.h'; consider using 'ctime' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1120,
                  "charLength": 17,
                  "snippet": {
                    "text": "#include <time.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 1054,
                  "charLength": 147,
                  "snippet": {
                    "text": "#include <string.h>\n#include <tgmath.h> // deprecated since C++11\n#include <time.h>\n#include <uchar.h> // deprecated since C++11\n#include <wchar.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fbbef219b86330c3",
            "equalIndicator/v1": "465f1a9f93f2b3486f5639c4d5741511f6c30d55e90273b1ea43c6b1ce2e5b9d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "C-style casts are discouraged; use static_cast (if needed, the cast may be redundant)",
            "markdown": "C-style casts are discouraged; use static_cast (if needed, the cast may be redundant)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "google/google-readability-casting.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 3,
                  "charOffset": 862,
                  "charLength": 12,
                  "snippet": {
                    "text": "(Typedef2)t1"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 813,
                  "charLength": 107,
                  "snippet": {
                    "text": "  typedef const char *Typedef2;\n  Typedef1 t1;\n  (Typedef2)t1; // warn here!\n}\n#pragma clang diagnostic pop"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "605689669b6d884c",
            "equalIndicator/v1": "47884a36a7101f1c5e90402ad60fdd850c4409b898a64aa52d501765618984ae"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "An integer is interpreted as a character code when assigning it to a string; if this is intended, cast the integer to the appropriate character type; if you want a string representation, use the appropriate conversion facility",
            "markdown": "An integer is interpreted as a character code when assigning it to a string; if this is intended, cast the integer to the appropriate character type; if you want a string representation, use the appropriate conversion facility"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-string-integer-assignment.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 7,
                  "charOffset": 628,
                  "charLength": 1,
                  "snippet": {
                    "text": "6"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 589,
                  "charLength": 119,
                  "snippet": {
                    "text": "  std::string s;\n  int x = 5965;\n  s = 6; // warn here!\n  s = x; // warn here! NOLINT(bugprone-narrowing-conversions)\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0754dfdc0384c3c5",
            "equalIndicator/v1": "49994dd0ded9f82cc21013f881a434a883f1965e0a29c69fd1de41f7ea1bdf85"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The const qualified parameter 'value' is copied for each invocation; consider making it a reference",
            "markdown": "The const qualified parameter 'value' is copied for each invocation; consider making it a reference"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance/performance-unnecessary-value-param.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 45,
                  "charOffset": 1633,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 46,
                  "startColumn": 1,
                  "charOffset": 1586,
                  "charLength": 127,
                  "snippet": {
                    "text": "}\n\nvoid foo([[maybe_unused]] const std::string value) { // warn here!\n  // The warning will suggest making Value a reference.\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1785f67c6d8be6cd",
            "equalIndicator/v1": "4bd44273e6d207f5c8f9935cc02ad44c0ba17ce1fdb5c1c9bb4ef1b33692d2ab"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused local variable 'str' of type 'std::string' (aka 'basic_string')",
            "markdown": "Unused local variable 'str' of type 'std::string' (aka 'basic_string')"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-string-constructor.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 15,
                  "charOffset": 977,
                  "charLength": 3,
                  "snippet": {
                    "text": "str"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 894,
                  "charLength": 228,
                  "snippet": {
                    "text": "  std::cout << \"-- check bugprone-string-constructor\" << std::endl;\n\n  std::string str('x', 50); // should be str(50, 'x')\n\n  std::string(\"test\", 200); // Will include random characters after \"test\". NOLINT(bugprone-unused-raii)"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d74e9327f6c9bf39",
            "equalIndicator/v1": "4c183ca40ddd13432802041c10315bf0c707b09277771a20f4e415001728a1a7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Prefer 'unique_ptr<>' assignment over 'release' and 'reset'",
            "markdown": "Prefer 'unique_ptr\\<\\>' assignment over 'release' and 'reset'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-uniqueptr-reset-release.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "charOffset": 335,
                  "charLength": 5,
                  "snippet": {
                    "text": "reset"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 287,
                  "charLength": 152,
                  "snippet": {
                    "text": "void check() {\n  std::unique_ptr<Foo> x, y;\n  x.reset(y.release()); // warn here!\n  std::cout << \"-- check misc-uniqueptr-reset-release\" << std::endl;\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "67620a1a97d9aef2",
            "equalIndicator/v1": "4d238432cbccb056cc2b93e4859e5c11912c579fd6eaad28e1c05589f92a28b8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant return statement at the end of a function with a void return type",
            "markdown": "Redundant return statement at the end of a function with a void return type"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-redundant-control-flow.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 3,
                  "charOffset": 620,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 600,
                  "charLength": 44,
                  "snippet": {
                    "text": "void f() {\n  g();\n  return; // warn here!\n}\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2341d27a472f7a97",
            "equalIndicator/v1": "4e0ecbf1ca03fca244097f673ea6f9c8d1ab7a9905f43116c9332bb9bca51584"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'stdint.h'; consider using 'cstdint' instead",
            "markdown": "Inclusion of deprecated C++ header 'stdint.h'; consider using 'cstdint' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 995,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <stdint.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 955,
                  "charLength": 98,
                  "snippet": {
                    "text": "#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "47a32cfeb57da6fc",
            "equalIndicator/v1": "4e831bfb09a28d9db4c0f63608b23e6271f8562c6615cecb4da8f46afedb67f6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage",
            "markdown": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-uniqueptr-reset-release.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 6,
                  "charOffset": 292,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 272,
                  "charLength": 96,
                  "snippet": {
                    "text": "class Foo {};\n\nvoid check() {\n  std::unique_ptr<Foo> x, y;\n  x.reset(y.release()); // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e136e325b9eb0ff0",
            "equalIndicator/v1": "4e8464c689b0974aaf4323cfaa41c0e46d627b1d9f4bd28c6202e4cac3bedb4b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Length is bigger than string literal size",
            "markdown": "Length is bigger than string literal size"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-string-constructor.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "charOffset": 1020,
                  "charLength": 11,
                  "snippet": {
                    "text": "std::string"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 963,
                  "charLength": 218,
                  "snippet": {
                    "text": "  std::string str('x', 50); // should be str(50, 'x')\n\n  std::string(\"test\", 200); // Will include random characters after \"test\". NOLINT(bugprone-unused-raii)\n\n  std::string(\"test\", 0); // Creation of an empty string."
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bd0e5e8f44e64781",
            "equalIndicator/v1": "4fbd2a24a37e8aea3332922fc58471d20c534b22c0539f8713f7e8d8675a27a8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Address of stack memory allocated by call to alloca() on line 19 returned to caller",
            "markdown": "Address of stack memory allocated by call to alloca() on line 19 returned to caller"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "analyzer/core/StackAddrEscapeBase.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 3,
                  "charOffset": 455,
                  "charLength": 6,
                  "snippet": {
                    "text": "return"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 419,
                  "charLength": 81,
                  "snippet": {
                    "text": "\n[[maybe_unused]] void *test1() {\n  return __builtin_alloca(12); // warn here!\n}\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "92c59cf88d88f76e",
            "equalIndicator/v1": "5013898f8928d4e5666dd9390e673d6ed0df6c70ff6cd480b8e439440d76a8ac"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Confusing array subscript expression, usually the index is inside the []",
            "markdown": "Confusing array subscript expression, usually the index is inside the \\[\\]"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-misplaced-array-index.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 3,
                  "charOffset": 369,
                  "charLength": 1,
                  "snippet": {
                    "text": "Y"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 342,
                  "charLength": 39,
                  "snippet": {
                    "text": "\nvoid f(int *X, int Y) {\n  Y[X] = 0;\n}\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fb85a22c05c5d8f1",
            "equalIndicator/v1": "5118686ac4083f98692eb3c68d1b49ef08beae58b3dd66590e51a84ce2f84a91"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage",
            "markdown": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-throw-by-value-catch-by-reference.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 6,
                  "charOffset": 605,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 593,
                  "charLength": 30,
                  "snippet": {
                    "text": "  }\n};\nvoid check() {\n\n  try {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bfdb1552d950b63a",
            "equalIndicator/v1": "513dc2dd2b31f787e5966517b97b0878e380e408769b7bd8faddb351c5192838"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'string.h'; consider using 'cstring' instead",
            "markdown": "Inclusion of deprecated C++ header 'string.h'; consider using 'cstring' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 1054,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <string.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "charOffset": 1015,
                  "charLength": 122,
                  "snippet": {
                    "text": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <tgmath.h> // deprecated since C++11\n#include <time.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c0beca40f0538bd5",
            "equalIndicator/v1": "515775c346893f27b4f04f7c570974d53f9d3804e812245f6f7456d70282f79a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant get() call on smart pointer",
            "markdown": "Redundant get() call on smart pointer"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-redundant-smartptr-get.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "charOffset": 637,
                  "charLength": 3,
                  "snippet": {
                    "text": "s_a"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 534,
                  "charLength": 188,
                  "snippet": {
                    "text": "  std::cout << \"-- check readability-redundant-smartptr-get\" << std::endl;\n  std::shared_ptr<A> s_a;\n  s_a.get()->func(); // warn here!\n}\n} // namespace readability::redundant_smartptr_get"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f7f755fc1ae0d858",
            "equalIndicator/v1": "531cc112bc72f3aa02921ae727c6fab67c8350dccbd1bd97d6647b8781fcc5a5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'if' statement is unnecessary; deleting null pointer has no effect",
            "markdown": "'if' statement is unnecessary; deleting null pointer has no effect"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-delete-null-pointer.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "charOffset": 619,
                  "charLength": 2,
                  "snippet": {
                    "text": "if"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 565,
                  "charLength": 161,
                  "snippet": {
                    "text": "\n  int *p; // NOLINT(readability-identifier-length)\n  if (p) // NOLINT(readability-implicit-bool-conversion,readability-braces-around-statements)\n    delete p;\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c93de8c426a5abda",
            "equalIndicator/v1": "53cdc3be2a8878be1d0b19fc6eb62d932ac878d49b61b823c36706f1b48823c2"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Constructor accepting a forwarding reference can hide the copy and move constructors",
            "markdown": "Constructor accepting a forwarding reference can hide the copy and move constructors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-forwarding-reference-overload.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 12,
                  "charOffset": 2057,
                  "charLength": 6,
                  "snippet": {
                    "text": "Person"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 41,
                  "startColumn": 1,
                  "charOffset": 1960,
                  "charLength": 176,
                  "snippet": {
                    "text": "  // C2: perfect forwarding ctor with parameter default value\n  template <typename T>\n  explicit Person([[maybe_unused]] T &&n, [[maybe_unused]] int x = 1) { // warn here!\n  }\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "54aa8631f4f2b542",
            "equalIndicator/v1": "560ac0a34fa0452ce4f8aee58e0898936cc7823306b4be925d99e2af25d823e1"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant repeated dereference of function pointer",
            "markdown": "Redundant repeated dereference of function pointer"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-redundant-function-ptr-dereference.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "charOffset": 556,
                  "charLength": 3,
                  "snippet": {
                    "text": "**p"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 454,
                  "charLength": 179,
                  "snippet": {
                    "text": "int f([[maybe_unused]] int i, [[maybe_unused]] int j) { return 0; }\nint (*p)(int, int) = &f;\nint i = (**p)(10, 50); // warn here! NOLINT(readability-magic-numbers)\n\nvoid check() {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f8f5e3e654515c5d",
            "equalIndicator/v1": "5a10676fc749ab0dea1dcc61123006b83d5fb5b33e33d312ea031e6630cfa5a2"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Argument name 'MeaningOfLife_bad' in comment does not match parameter name 'MeaningOfLife'",
            "markdown": "Argument name 'MeaningOfLife_bad' in comment does not match parameter name 'MeaningOfLife'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-argument-comment.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 6,
                  "charOffset": 1283,
                  "charLength": 22,
                  "snippet": {
                    "text": "/*MeaningOfLife_bad=*/"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 44,
                  "startColumn": 1,
                  "charOffset": 1208,
                  "charLength": 170,
                  "snippet": {
                    "text": "  f1(/*foo=*/true);                 // works only if StrictMode is 1\n\n  f2(/*MeaningOfLife_bad=*/1); // warn here!\n  f2(/*MeaningOfLife=*/1);     // shouldn't warn here\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "381ae7cd83e6696a",
            "equalIndicator/v1": "5b046ae1b197a46b30093fd9eb30e86b3cb0f62721b6171696b29dfbd96bd356"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Converting integer literal to bool, use bool literal instead",
            "markdown": "Converting integer literal to bool, use bool literal instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-use-bool-literals.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 33,
                  "charOffset": 589,
                  "charLength": 1,
                  "snippet": {
                    "text": "1"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 429,
                  "charLength": 222,
                  "snippet": {
                    "text": "  [[maybe_unused]] bool f = static_cast<bool>(1); // warn here!\n  std::ios_base::sync_with_stdio(0);              // warn here!\n  [[maybe_unused]] bool x = p ? 1 : 0;            // warn here!\n}\n#pragma clang diagnostic pop"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1361ca57c4537a24",
            "equalIndicator/v1": "5b846889b2c89f4c9a33b443506ca6dfaef532b030e3e53fb6af13c5522f6dea"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Accessing an element of the container does not require a call to 'data()'; did you mean to use 'operator[]'?",
            "markdown": "Accessing an element of the container does not require a call to 'data()'; did you mean to use 'operator\\[\\]'?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-subscript-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 14,
                  "charOffset": 955,
                  "charLength": 4,
                  "snippet": {
                    "text": "data"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 848,
                  "charLength": 166,
                  "snippet": {
                    "text": "  std::string s = \"check readability-simplify-subscript-expr\";\n  int i = random() % s.size();\n  char c = s.data()[i]; // char c = s[i]; // warn here!\n\n  if (c == 0) {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "851d147450fa355f",
            "equalIndicator/v1": "5ce24afba8413ef77c2a7827be827884fd15499d95be85d7ab325a055ceee67c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'readability::inconsistent_declaration_parameter_name::foo' has a definition with different parameter names",
            "markdown": "Function 'readability::inconsistent_declaration_parameter_name::foo' has a definition with different parameter names"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-inconsistent-declaration-parameter-name.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 5,
                  "charOffset": 544,
                  "charLength": 3,
                  "snippet": {
                    "text": "foo"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 474,
                  "charLength": 163,
                  "snippet": {
                    "text": "namespace readability::inconsistent_declaration_parameter_name {\n\nint foo(int a); // warning and fix-it hint (replace \"a\" to \"b\")\nint foo(int b) { return b + 2; }\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "aff0dc48040ace42",
            "equalIndicator/v1": "5e5ae6cfe8e09e874418d9f410010e0af72811eff969ff8ce31ea1e2f21d435c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Either cast from 'int' to 'long' is ineffective, or there is loss of precision before the conversion",
            "markdown": "Either cast from 'int' to 'long' is ineffective, or there is loss of precision before the conversion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-misplaced-widening-cast.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 10,
                  "charOffset": 590,
                  "charLength": 11,
                  "snippet": {
                    "text": "static_cast"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 564,
                  "charLength": 71,
                  "snippet": {
                    "text": "\nlong f(int x) {\n  return static_cast<long>(x * 1000); // warn here!\n}\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "30d2ff7864065939",
            "equalIndicator/v1": "60b8613e6d0287bc70c217e4f2a5adea1c27562fcd3796a48efa6773e7da11ef"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "No definition found for 'A', but a definition with the same name 'A' found in another namespace 'bugprone::forward_declaration_namespace::nb'",
            "markdown": "No definition found for 'A', but a definition with the same name 'A' found in another namespace 'bugprone::forward_declaration_namespace::nb'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-forward-declaration-namespace.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 8,
                  "charOffset": 615,
                  "charLength": 1,
                  "snippet": {
                    "text": "A"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 592,
                  "charLength": 42,
                  "snippet": {
                    "text": "\nnamespace na {\nstruct A; // warn here!\n}\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0982d4a8d2a93815",
            "equalIndicator/v1": "60d13523b51d92090b2a7daf04d92f1f4f64de755fa9e409db859c10f77662e6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "No header providing \"std::exception\" is directly included",
            "markdown": "No header providing \"std::exception\" is directly included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-throw-by-value-catch-by-reference.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 12,
                  "charOffset": 481,
                  "charLength": 14,
                  "snippet": {
                    "text": "std::exception"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 417,
                  "charLength": 175,
                  "snippet": {
                    "text": "\nnamespace misc::throw_by_value_catch_by_reference {\nstruct S : std::exception {\n  [[nodiscard]] const char *what() const noexcept override {\n    return \"My custom exception\";"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e1b44f46051947f3",
            "equalIndicator/v1": "615d1299fb00e2a19b2723fc06e95e3561a8e9b9e337c5bc54b2d416bdaf8aa3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not declare C-style arrays, use std::array<> instead",
            "markdown": "Do not declare C-style arrays, use std::array\\<\\> instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-avoid-c-arrays.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 549,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 510,
                  "charLength": 130,
                  "snippet": {
                    "text": "\nnamespace modernize::avoid_c_arrays {\nint a[] = {\n    1, 2}; // warning: do not declare C-style arrays, use std::array<> instead\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f49668eb1712fb3e",
            "equalIndicator/v1": "63afc023575dd601e17f4bdbbe43ba2de27d6a5731512ac3f3723bb5b5e57434"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant void argument list in function declaration",
            "markdown": "Redundant void argument list in function declaration"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-redundant-void-arg.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 17,
                  "charOffset": 461,
                  "charLength": 4,
                  "snippet": {
                    "text": "void"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 357,
                  "charLength": 208,
                  "snippet": {
                    "text": "namespace modernize::redundant_void_arg {\nint f(void);                    // warn here!\nint (*fu(void))(void);          // warn here!\ntypedef int (*f_t(void))(void); // warn here! NOLINT(modernize-use-using)\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fb4e71356ba7191d",
            "equalIndicator/v1": "6646c10c19656d02c5481f986c47bedce63ff8f3fea60cd3402f832b5faebfcf"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Integer literal has suffix 'u', which is not uppercase",
            "markdown": "Integer literal has suffix 'u', which is not uppercase"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cert/cert-dcl16-c.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 29,
                  "charOffset": 758,
                  "charLength": 2,
                  "snippet": {
                    "text": "1u"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 676,
                  "charLength": 173,
                  "snippet": {
                    "text": "  std::cout << \"-- check cert-dcl16-c\" << std::endl;\n\n  [[maybe_unused]] auto x = 1u; // warning: integer literal suffix 'u' is not upper-case\n}\n} // namespace cert::dcl16_c"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8a817a637ce24742",
            "equalIndicator/v1": "6827668f95ef21bf2896f52822679440628705a1c57aa03a2c6e1410d881d73f"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal supplied to boolean operator",
            "markdown": "Redundant boolean literal supplied to boolean operator"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 12,
                  "charOffset": 1433,
                  "charLength": 4,
                  "snippet": {
                    "text": "true"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 49,
                  "startColumn": 1,
                  "charOffset": 1341,
                  "charLength": 151,
                  "snippet": {
                    "text": "  srand(static_cast<unsigned int>(time(nullptr)));\n  auto b = random() % 2 == 0;\n  if (b == true) { // warn here!\n  }\n  if (b == false) { // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "da4bc823abfc012d",
            "equalIndicator/v1": "68a45d3c6b5c30f6bfed6b47fed06954a69f991a2dd32603e351717e6f1fc2a8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'f' can be made static or moved into an anonymous namespace to enforce internal linkage",
            "markdown": "Function 'f' can be made static or moved into an anonymous namespace to enforce internal linkage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-misplaced-const.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 6,
                  "charOffset": 554,
                  "charLength": 1,
                  "snippet": {
                    "text": "f"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 526,
                  "charLength": 141,
                  "snippet": {
                    "text": "typedef int *int_ptr;\n\nvoid f(const int_ptr ptr) { // warn here!\n  *ptr = 0; // potentially quite unexpectedly the int can be modified here\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "231b33e306e45cd3",
            "equalIndicator/v1": "68b12d6d2c89a62273612a0f2709d0fd7dcc7560ef82011ae42665abbc3d945b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'assert.h'; consider using 'cassert' instead",
            "markdown": "Inclusion of deprecated C++ header 'assert.h'; consider using 'cassert' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 693,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <assert.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 672,
                  "charLength": 80,
                  "snippet": {
                    "text": "#include <iostream>\n\n#include <assert.h>\n#include <complex.h>\n#include <ctype.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6fc86727d6c7dba9",
            "equalIndicator/v1": "6b72f17f2b2eb0328475a4dfe792e29c1c6f1d3edba65cdf95ddcb902b6e2850"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Constructor creating an empty string",
            "markdown": "Constructor creating an empty string"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-string-constructor.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 3,
                  "charOffset": 1126,
                  "charLength": 11,
                  "snippet": {
                    "text": "std::string"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 1018,
                  "charLength": 209,
                  "snippet": {
                    "text": "  std::string(\"test\", 200); // Will include random characters after \"test\". NOLINT(bugprone-unused-raii)\n\n  std::string(\"test\", 0); // Creation of an empty string.\n}\n} // namespace bugprone::string_constructor"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "80f30150044a4bc2",
            "equalIndicator/v1": "6ce9b3a358bbcf3c568a41d528800de7626a39e4732cd3f6fa529f76713f8fb6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'readability::inconsistent_declaration_parameter_name::foo_in_source' has a definition with different parameter names",
            "markdown": "Function 'readability::inconsistent_declaration_parameter_name::foo_in_source' has a definition with different parameter names"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-inconsistent-declaration-parameter-name.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 5,
                  "charOffset": 642,
                  "charLength": 13,
                  "snippet": {
                    "text": "foo_in_source"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 604,
                  "charLength": 149,
                  "snippet": {
                    "text": "int foo(int b) { return b + 2; }\n\nint foo_in_source(int a, int b, int c); // warn here!\nint foo_in_source(int d, int e, int f) { return d + e + f; }\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8afbda22ff7f66f9",
            "equalIndicator/v1": "6ebb694a2aa899379ba6bf3d078b955a3069a1c9384e3195c976efd28720d829"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use auto when declaring iterators",
            "markdown": "Use auto when declaring iterators"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-use-auto.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 20,
                  "charOffset": 2174,
                  "charLength": 26,
                  "snippet": {
                    "text": "std::vector<int>::iterator"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 67,
                  "startColumn": 1,
                  "charOffset": 2121,
                  "charLength": 153,
                  "snippet": {
                    "text": "\n  std::vector<int> my_container;\n  [[maybe_unused]] std::vector<int>::iterator I = my_container.begin(); // warn here!\n\n  [[maybe_unused]] int val = 42;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7256cc8f6602a43a",
            "equalIndicator/v1": "6f26d377f3c348476d7f5b29945450f0a8c96d49d886c3edee4bf4f26bd735bf"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Constructor accepting a forwarding reference can hide the copy and move constructors",
            "markdown": "Constructor accepting a forwarding reference can hide the copy and move constructors"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-forwarding-reference-overload.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 34,
                  "charOffset": 1911,
                  "charLength": 6,
                  "snippet": {
                    "text": "Person"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1837,
                  "charLength": 184,
                  "snippet": {
                    "text": "public:\n  // C1: perfect forwarding ctor\n  template <typename T> explicit Person([[maybe_unused]] T &&n) {} // warn here!\n\n  // C2: perfect forwarding ctor with parameter default value"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a28c00ff1505aeb2",
            "equalIndicator/v1": "73bd091e712f6e804e69e1c9c12086766951893c9d4c85ed3eb70f502213c2ff"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Casting (double + 0.5) to integer leads to incorrect rounding; consider using lround (#include ) instead",
            "markdown": "Casting (double + 0.5) to integer leads to incorrect rounding; consider using lround (#include ) instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-incorrect-roundings.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 29,
                  "charOffset": 425,
                  "charLength": 13,
                  "snippet": {
                    "text": "1.00000000001"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "charOffset": 313,
                  "charLength": 184,
                  "snippet": {
                    "text": "void check() {\n  std::cout << \"-- check bugprone-incorrect-roundings\" << std::endl;\n  auto a = static_cast<int>(1.00000000001 + 0.5); // warn here!\n  if (a < 1.5) { /* do nothing*/\n  }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "aac222089039a404",
            "equalIndicator/v1": "73beaeee1f8db421e1143dfd2c6b5cd268e803e631635f8bc368a5929066a992"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Converting integer literal to bool, use bool literal instead",
            "markdown": "Converting integer literal to bool, use bool literal instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-use-bool-literals.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 12,
                  "charOffset": 376,
                  "charLength": 1,
                  "snippet": {
                    "text": "1"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 301,
                  "charLength": 255,
                  "snippet": {
                    "text": "#pragma ide diagnostic ignored \"UnreachableCode\"\nvoid check() {\n  bool p = 1;                                     // warn here!\n  [[maybe_unused]] bool f = static_cast<bool>(1); // warn here!\n  std::ios_base::sync_with_stdio(0);              // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e09ea771812685b9",
            "equalIndicator/v1": "7411f9b7476e73b02581e94e9c38a9cebff9ba2448164b719c4d9ed03037fa16"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'math.h'; consider using 'cmath' instead",
            "markdown": "Inclusion of deprecated C++ header 'math.h'; consider using 'cmath' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 897,
                  "charLength": 17,
                  "snippet": {
                    "text": "#include <math.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 857,
                  "charLength": 97,
                  "snippet": {
                    "text": "#include <limits.h>\n#include <locale.h>\n#include <math.h>\n#include <setjmp.h>\n#include <signal.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "062519fcc526bc8d",
            "equalIndicator/v1": "753e83ed9b01b06d41000ddd6bd0a255d7e6a982bbde552ab1f80bcc3e831213"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'signal.h'; consider using 'csignal' instead",
            "markdown": "Inclusion of deprecated C++ header 'signal.h'; consider using 'csignal' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 935,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <signal.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 897,
                  "charLength": 97,
                  "snippet": {
                    "text": "#include <math.h>\n#include <setjmp.h>\n#include <signal.h>\n#include <stdarg.h>\n#include <stddef.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7c8e8fbb1564396e",
            "equalIndicator/v1": "7857500f8c50d8bf3c71fe37171be80f304d0f7445adcbe13a1f948b2bcb7a19"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant void argument list in function declaration",
            "markdown": "Redundant void argument list in function declaration"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-redundant-void-arg.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 10,
                  "charOffset": 454,
                  "charLength": 4,
                  "snippet": {
                    "text": "void"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 357,
                  "charLength": 208,
                  "snippet": {
                    "text": "namespace modernize::redundant_void_arg {\nint f(void);                    // warn here!\nint (*fu(void))(void);          // warn here!\ntypedef int (*f_t(void))(void); // warn here! NOLINT(modernize-use-using)\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "536692d6ea443bee",
            "equalIndicator/v1": "786457a250f98236111b873077430efb87936baa4b054718364eb118cdb4ebb9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use range-based for loop instead",
            "markdown": "Use range-based for loop instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-loop-convert.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 3,
                  "charOffset": 2484,
                  "charLength": 3,
                  "snippet": {
                    "text": "for"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 79,
                  "startColumn": 1,
                  "charOffset": 2454,
                  "charLength": 95,
                  "snippet": {
                    "text": "\n  // reasonable conversion\n  for (int i = 0; i < v.size(); ++i) // warn here!\n    tmp = v[i];\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "250c45d5f62da364",
            "equalIndicator/v1": "79444591a53f4754e92de473f11e01e6e1f450635f90e0242d3c9f3746e7617f"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Side effect in assert() condition discarded in release builds",
            "markdown": "Side effect in assert() condition discarded in release builds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-assert-side-effect.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 3,
                  "charOffset": 1094,
                  "charLength": 6,
                  "snippet": {
                    "text": "assert"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 1061,
                  "charLength": 136,
                  "snippet": {
                    "text": "\n  [[maybe_unused]] int X = 1;\n  assert(X = 0); // warn here! NOLINT(bugprone-assignment-in-if-condition)\n}\n#pragma clang diagnostic pop"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7688c8f4c9ed8509",
            "equalIndicator/v1": "7a700562cde2126e63503cb5271f8babefb778744717729bd463e692dd959152"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'fenv.h'; consider using 'cfenv' instead",
            "markdown": "Inclusion of deprecated C++ header 'fenv.h'; consider using 'cfenv' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 772,
                  "charLength": 43,
                  "snippet": {
                    "text": "#include <fenv.h> // deprecated since C++11"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 734,
                  "charLength": 122,
                  "snippet": {
                    "text": "#include <ctype.h>\n#include <errno.h>\n#include <fenv.h> // deprecated since C++11\n#include <float.h>\n#include <inttypes.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "11cb7adf9ffcc028",
            "equalIndicator/v1": "7daac5e0ee0de22441fac232259355cc658c59bc7d237fb0e4fbec0c2c6513c0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'setjmp.h'; consider using 'csetjmp' instead",
            "markdown": "Inclusion of deprecated C++ header 'setjmp.h'; consider using 'csetjmp' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 915,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <setjmp.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 877,
                  "charLength": 97,
                  "snippet": {
                    "text": "#include <locale.h>\n#include <math.h>\n#include <setjmp.h>\n#include <signal.h>\n#include <stdarg.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "abcde8008bd1815f",
            "equalIndicator/v1": "7defb0dc6315a2cfd0d12c8caa298217e93b28e54b0d1114dd362297a809e336"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calling a function that uses a default argument is disallowed",
            "markdown": "Calling a function that uses a default argument is disallowed"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "fuchsia/fuchsia-default-arguments-calls.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 3,
                  "charOffset": 504,
                  "charLength": 3,
                  "snippet": {
                    "text": "foo"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 475,
                  "charLength": 99,
                  "snippet": {
                    "text": "            << std::endl;\n\n  foo(); // warn here!\n}\n} // namespace fuchsia::default_arguments_calls"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f9152beacb1b3fa6",
            "equalIndicator/v1": "7e8e7dc97d8135f31143142aa57972af8062e0c1c8867c4641421fd47c032b28"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Pointer parameter 'p' can be pointer to const",
            "markdown": "Pointer parameter 'p' can be pointer to const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-non-const-parameter.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 15,
                  "charOffset": 986,
                  "charLength": 1,
                  "snippet": {
                    "text": "p"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 879,
                  "charLength": 216,
                  "snippet": {
                    "text": "// warning here; the declaration \"const char *p\" would make the function\n// interface safer.\nchar f1(char *p) { return *p; } // warn here!\n\n// no warning; the declaration could be more const \"const int * const p\" but"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "61e0921e5ce2c6a1",
            "equalIndicator/v1": "7fff55973c6e19c8875263fd939962ae5ed08e5637edea09a8ad2484e344d153"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'ptr' declared with a const-qualified typedef; results in the type being 'int *const' instead of 'const int *'",
            "markdown": "'ptr' declared with a const-qualified typedef; results in the type being 'int \\*const' instead of 'const int \\*'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-misplaced-const.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 22,
                  "charOffset": 570,
                  "charLength": 3,
                  "snippet": {
                    "text": "ptr"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 526,
                  "charLength": 141,
                  "snippet": {
                    "text": "typedef int *int_ptr;\n\nvoid f(const int_ptr ptr) { // warn here!\n  *ptr = 0; // potentially quite unexpectedly the int can be modified here\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e4590b3de1653bd1",
            "equalIndicator/v1": "80141f62edd39ff322b5c527989598b2a63a46e2e6ab5fa5b9def7034f161623"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Dubious check of 'bool *' against 'nullptr', did you mean to dereference it?",
            "markdown": "Dubious check of 'bool \\*' against 'nullptr', did you mean to dereference it?"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-bool-pointer-implicit-conversion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 7,
                  "charOffset": 584,
                  "charLength": 1,
                  "snippet": {
                    "text": "p"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 497,
                  "charLength": 138,
                  "snippet": {
                    "text": "#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wuninitialized\"\n  if (p) { // warn here!\n  }\n#pragma clang diagnostic pop"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2a720c682986eaaf",
            "equalIndicator/v1": "852bab7fe8ef8c56526004ddf6eea4f6ff7e4d7836c485273be7da6579b4abb7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'stdlib.h'; consider using 'cstdlib' instead",
            "markdown": "Inclusion of deprecated C++ header 'stdlib.h'; consider using 'cstdlib' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1034,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <stdlib.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 995,
                  "charLength": 124,
                  "snippet": {
                    "text": "#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <tgmath.h> // deprecated since C++11"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "653a8783f6d458e3",
            "equalIndicator/v1": "86b38116d82db9f3dc4bc0ceb03a43f80c2d8f6265be271dcad40f82469b777e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'errno.h'; consider using 'cerrno' instead",
            "markdown": "Inclusion of deprecated C++ header 'errno.h'; consider using 'cerrno' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 753,
                  "charLength": 18,
                  "snippet": {
                    "text": "#include <errno.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 713,
                  "charLength": 121,
                  "snippet": {
                    "text": "#include <complex.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fenv.h> // deprecated since C++11\n#include <float.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "da5281fbd4eb1795",
            "equalIndicator/v1": "87ed818a14a7b8127f577ee38a01898d02bbbb0ccc9fd262565ae6511d686324"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Catch handler catches by value; should catch by reference instead",
            "markdown": "Catch handler catches by value; should catch by reference instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-throw-by-value-catch-by-reference.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 12,
                  "charOffset": 650,
                  "charLength": 14,
                  "snippet": {
                    "text": "std::exception"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 616,
                  "charLength": 72,
                  "snippet": {
                    "text": "  try {\n    throw S();\n  } catch (std::exception e) { // warn here!\n  }\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6b4d4c9a6a493fb0",
            "equalIndicator/v1": "8b3c16e9a42c968197aea9032540af469ba5d21a9bbcb89f18af6c31980a8db0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Forwarding reference passed to std::move(), which may unexpectedly cause lvalues to be moved; use std::forward() instead",
            "markdown": "Forwarding reference passed to std::move(), which may unexpectedly cause lvalues to be moved; use std::forward() instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-move-forwarding-reference.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 45,
                  "charOffset": 615,
                  "charLength": 9,
                  "snippet": {
                    "text": "std::move"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 507,
                  "charLength": 154,
                  "snippet": {
                    "text": "template <typename T> void bar(T && /*t*/) { /* Do nothing*/ }\n\ntemplate <typename T> void foo(T &&t) { bar(std::move(t)); } // warn here!\n\nvoid check() {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ca5b5d0fdbc40389",
            "equalIndicator/v1": "909cffec154be02400133b1d22174b0b5147baf2fc36d0cc48a6239c70a93ce6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal in conditional assignment",
            "markdown": "Redundant boolean literal in conditional assignment"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 9,
                  "charOffset": 2010,
                  "charLength": 5,
                  "snippet": {
                    "text": "false"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 83,
                  "startColumn": 1,
                  "charOffset": 1978,
                  "charLength": 59,
                  "snippet": {
                    "text": "    b = false;\n  if (e)\n    b = false;\n  else\n    b = true;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "93f3673efbb0e14c",
            "equalIndicator/v1": "90d87036cfc652d4b84a6f6805a0506394990e9a8cc03ca5c7b892eeebc038ef"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not use 'else' after 'continue'",
            "markdown": "Do not use 'else' after 'continue'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-else-after-return.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 5,
                  "charOffset": 855,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 767,
                  "charLength": 167,
                  "snippet": {
                    "text": "    if (Value == 2) // NOLINT(readability-braces-around-statements)\n      continue;\n    else // warn here! NOLINT(readability-braces-around-statements)\n      Local++;\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "987fe2dbef53f383",
            "equalIndicator/v1": "915288d2cc324162c67b4b8176cde3d93adfe24411cc160c2c814668b9628e95"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'wchar.h'; consider using 'cwchar' instead",
            "markdown": "Inclusion of deprecated C++ header 'wchar.h'; consider using 'cwchar' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1183,
                  "charLength": 18,
                  "snippet": {
                    "text": "#include <wchar.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1120,
                  "charLength": 102,
                  "snippet": {
                    "text": "#include <time.h>\n#include <uchar.h> // deprecated since C++11\n#include <wchar.h>\n#include <wctype.h>\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "0ce5f9d65c930e09",
            "equalIndicator/v1": "94abf86a529751ce171ea35de6fc13dc5f264b57e632b1a2e7153cf47753128b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal supplied to boolean operator",
            "markdown": "Redundant boolean literal supplied to boolean operator"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 12,
                  "charOffset": 1470,
                  "charLength": 5,
                  "snippet": {
                    "text": "false"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 51,
                  "startColumn": 1,
                  "charOffset": 1422,
                  "charLength": 107,
                  "snippet": {
                    "text": "  if (b == true) { // warn here!\n  }\n  if (b == false) { // warn here!\n  }\n  if (b && true) { // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "171079440cc48b9b",
            "equalIndicator/v1": "9756ab15a06431e7a7c016631a966b38900f273a6c2f0fb717483e4abef389ca"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'stdarg.h'; consider using 'cstdarg' instead",
            "markdown": "Inclusion of deprecated C++ header 'stdarg.h'; consider using 'cstdarg' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 955,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <stdarg.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 915,
                  "charLength": 99,
                  "snippet": {
                    "text": "#include <setjmp.h>\n#include <signal.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5b3f09b3367dfcb3",
            "equalIndicator/v1": "97f2d50bf2d6e3d92e158a23ac6b27aa492d59342b3d3ab7ca37808bb6573911"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant continue statement at the end of loop statement",
            "markdown": "Redundant continue statement at the end of loop statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-redundant-control-flow.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 5,
                  "charOffset": 730,
                  "charLength": 8,
                  "snippet": {
                    "text": "continue"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 645,
                  "charLength": 114,
                  "snippet": {
                    "text": "void k() {\n  for (int i = 0; i < 10; ++i) { // NOLINT(readability-magic-numbers)\n    continue; // warn here!\n  }\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "dd620a1e13fc8341",
            "equalIndicator/v1": "98303d42a48503b377c0baf96f5ff06cdf7403445578e18d039bcdb2d30ba1e3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal supplied to boolean operator",
            "markdown": "Redundant boolean literal supplied to boolean operator"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 12,
                  "charOffset": 1620,
                  "charLength": 5,
                  "snippet": {
                    "text": "false"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 59,
                  "startColumn": 1,
                  "charOffset": 1572,
                  "charLength": 75,
                  "snippet": {
                    "text": "  if (b || true) { // warn here!\n  }\n  if (b || false) { // warn here!\n  }\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6122fec3fb97576d",
            "equalIndicator/v1": "98bcb887ac20af650bcf3163e881ddded25347742f9815e1a5bb14d275c549a7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of integer division used in a floating point context; possible loss of precision",
            "markdown": "Result of integer division used in a floating point context; possible loss of precision"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-integer-division.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 7,
                  "charOffset": 961,
                  "charLength": 1,
                  "snippet": {
                    "text": "i"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 863,
                  "charLength": 168,
                  "snippet": {
                    "text": "  d = 32 * 8 / (2 + i);         // warn here!\n  d = 8 * floatFunc(1 + 7 / 2); // warn here!\n  d = i / (1 << 4);             // warn here!\n}\n#pragma clang diagnostic pop"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "583bca4d0a5501ec",
            "equalIndicator/v1": "9c00ffda6610ea0582930582eca9007822e536aabac1d0f3c644920a11a31330"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant 'X' declaration",
            "markdown": "Redundant 'X' declaration"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-redundant-declaration.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 12,
                  "charOffset": 1121,
                  "charLength": 1,
                  "snippet": {
                    "text": "X"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 1054,
                  "charLength": 143,
                  "snippet": {
                    "text": "\nextern int X; // NOLINT(readability-identifier-length)\nextern int X; // NOLINT(readability-identifier-length)\n\n#define DECLARE(Y) extern int Y"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9ba4f51a32659f57",
            "equalIndicator/v1": "9d2ac380d927f1b97cb797e1b583befbc94fe6b8803677d6de40c5ca1d910850"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage",
            "markdown": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-unconventional-assign-operator.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 6,
                  "charOffset": 622,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 613,
                  "charLength": 96,
                  "snippet": {
                    "text": "};\n\nvoid check() {\n  std::cout << \"-- check misc-unconventional-assign-operator\" << std::endl;\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "746af440e6841944",
            "equalIndicator/v1": "9dffa201dfd2dc4c3d03c201c7856915733d1f448f6b5dae72e1ad957094476f"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage",
            "markdown": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-new-delete-overloads.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 6,
                  "charOffset": 994,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 985,
                  "charLength": 127,
                  "snippet": {
                    "text": "};\n\nvoid check() { std::cout << \"-- check misc-new-delete-overloads\" << std::endl; }\n} // namespace misc::new_delete_overloads\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "27a210d627b7df0d",
            "equalIndicator/v1": "9f56e8efe751cf2b2b326bdd813dbb325c32a12b65dc31ff366e0b404499a45b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Variable 'nonConstIntReference' provides global access to a non-const object; consider making the referenced data 'const'",
            "markdown": "Variable 'nonConstIntReference' provides global access to a non-const object; consider making the referenced data 'const'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cppcoreguidelines/avoid-non-const-global-variables.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 23,
                  "charOffset": 542,
                  "charLength": 20,
                  "snippet": {
                    "text": "nonConstIntReference"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 383,
                  "charLength": 283,
                  "snippet": {
                    "text": "namespace cppcoreguidelines::avoid_non_const_global_variables {\nint nonConstInt = 0;                                       // warn here!\n[[maybe_unused]] int &nonConstIntReference = nonConstInt;  // warn here!\n[[maybe_unused]] int *pointerToNonConstInt = &nonConstInt; // warn here!\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4e0bbe19b39df164",
            "equalIndicator/v1": "a0b54c5bc9c92134d3311afb98d3a8a04f0b88b6aa1de629e59aaf72d756ac60"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'stdio.h'; consider using 'cstdio' instead",
            "markdown": "Inclusion of deprecated C++ header 'stdio.h'; consider using 'cstdio' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "charOffset": 1015,
                  "charLength": 18,
                  "snippet": {
                    "text": "#include <stdio.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 975,
                  "charLength": 98,
                  "snippet": {
                    "text": "#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e849f85677c43ce4",
            "equalIndicator/v1": "a5ceb41e07f6600106a2ce2ce0dc33ff21b2c5e11bdcfa5015093215123cf05e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "No header providing \"std::size_t\" is directly included",
            "markdown": "No header providing \"std::size_t\" is directly included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-new-delete-overloads.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 59,
                  "charOffset": 718,
                  "charLength": 11,
                  "snippet": {
                    "text": "std::size_t"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 620,
                  "charLength": 166,
                  "snippet": {
                    "text": "namespace misc::new_delete_overloads {\n\nextern \"C++\" void update_bookkeeping(void *allocated_ptr, std::size_t size,\n                                     bool alloc);\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d314f790cba1e318",
            "equalIndicator/v1": "a6b6d0b9861f43d1423f209a1ae8785c72faf6437d178d09fc069c5712440e31"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use a trailing return type for this function",
            "markdown": "Use a trailing return type for this function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-use-trailing-return-type.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 5,
                  "charOffset": 539,
                  "charLength": 2,
                  "snippet": {
                    "text": "f1"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 460,
                  "charLength": 203,
                  "snippet": {
                    "text": "void check() { std::cout << \"-- check modernize-use-auto\" << std::endl; }\n\nint f1();                                         // warn here!\n[[maybe_unused]] inline int f2(int arg) noexcept; // warn here!\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "50acf9cf6c65edb3",
            "equalIndicator/v1": "a881bfe0da48b1a0e829203783b25f1f57e0248ee526fcd87c10ee781b8eb424"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use a trailing return type for this function",
            "markdown": "Use a trailing return type for this function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-use-trailing-return-type.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 29,
                  "charOffset": 627,
                  "charLength": 2,
                  "snippet": {
                    "text": "f2"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 534,
                  "charLength": 159,
                  "snippet": {
                    "text": "\nint f1();                                         // warn here!\n[[maybe_unused]] inline int f2(int arg) noexcept; // warn here!\n\nvoid b(); // should warn here"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cf35b043c2e2c07c",
            "equalIndicator/v1": "aac4a5e68899210d42fe77ddbd4854e34cb524b8ff445a935e1bd0a911ff4ca7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Declaration of 'operator new' has no matching declaration of 'operator delete' at the same scope",
            "markdown": "Declaration of 'operator new' has no matching declaration of 'operator delete' at the same scope"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-new-delete-overloads.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 18,
                  "charOffset": 832,
                  "charLength": 3,
                  "snippet": {
                    "text": "new"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 786,
                  "charLength": 178,
                  "snippet": {
                    "text": "\nstruct [[maybe_unused]] S {\n  void *operator new(std::size_t size) noexcept(false) { // warn here!\n    void *ptr = ::operator new(size);\n    update_bookkeeping(ptr, size, true);"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7606979816bdc9d8",
            "equalIndicator/v1": "aae7da3cc1c63c12c91b54e17bf0478013ccedee179654afc018bf0cf458c066"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'tgmath.h'; consider using 'ctgmath' instead",
            "markdown": "Inclusion of deprecated C++ header 'tgmath.h'; consider using 'ctgmath' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 1074,
                  "charLength": 45,
                  "snippet": {
                    "text": "#include <tgmath.h> // deprecated since C++11"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1034,
                  "charLength": 148,
                  "snippet": {
                    "text": "#include <stdlib.h>\n#include <string.h>\n#include <tgmath.h> // deprecated since C++11\n#include <time.h>\n#include <uchar.h> // deprecated since C++11"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c627294ca040ebee",
            "equalIndicator/v1": "abc9c871aba2275dda046a6b2c6b05fae786aaa8bd9969e5374b9aceb884a4ca"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage",
            "markdown": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-non-copyable-objects.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 6,
                  "charOffset": 356,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "charOffset": 311,
                  "charLength": 216,
                  "snippet": {
                    "text": "\nnamespace misc::non_copyable_objects {\nvoid check() {\n  [[maybe_unused]] FILE my_stdout = *stdout; // warn here twice! NOLINT(misc-const-correctness)\n  std::cout << \"-- check misc-non-copyable-objects\" << std::endl;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "1492765fc434d893",
            "equalIndicator/v1": "ac793ae8eb24d8889db98bcfb8b5cc60bcf852681d9f80a8c81dfdfee346ff10"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "String constructor parameters are probably swapped; expecting string(count, character)",
            "markdown": "String constructor parameters are probably swapped; expecting string(count, character)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-string-constructor.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 15,
                  "charOffset": 977,
                  "charLength": 3,
                  "snippet": {
                    "text": "str"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 894,
                  "charLength": 228,
                  "snippet": {
                    "text": "  std::cout << \"-- check bugprone-string-constructor\" << std::endl;\n\n  std::string str('x', 50); // should be str(50, 'x')\n\n  std::string(\"test\", 200); // Will include random characters after \"test\". NOLINT(bugprone-unused-raii)"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d74e9327f6c9bf39",
            "equalIndicator/v1": "adbfd32474e1efc2557ffabd27c7046ecf033c1daa4de7c782e5d73065a969b6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Folding type 'float' into type 'int' might result in loss of precision",
            "markdown": "Folding type 'float' into type 'int' might result in loss of precision"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-fold-init-type.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "charOffset": 817,
                  "charLength": 15,
                  "snippet": {
                    "text": "std::accumulate"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 763,
                  "charLength": 180,
                  "snippet": {
                    "text": "void check() {\n  auto a = {0.5f, 0.5f, 0.5f, 0.5f};\n  std::accumulate(std::begin(a), std::end(a), 0); // warn here!\n\n  std::cout << \"-- check bugprone-fold-init-type\" << std::endl;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "52b7286962c53261",
            "equalIndicator/v1": "b0c712755689a77e938e9403af5a9fccfc229458149fed134085e8615ce41415"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'limits.h'; consider using 'climits' instead",
            "markdown": "Inclusion of deprecated C++ header 'limits.h'; consider using 'climits' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 857,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <limits.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 816,
                  "charLength": 98,
                  "snippet": {
                    "text": "#include <float.h>\n#include <inttypes.h>\n#include <limits.h>\n#include <locale.h>\n#include <math.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "931962bb982a4a3f",
            "equalIndicator/v1": "b217755ccfb3267689e011e08e8fc34740ca0beef11b2893ea7a5511489765e5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use std::to_wstring instead of boost::lexical_cast",
            "markdown": "Use std::to_wstring instead of boost::lexical_cast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "boost/boost-use-to-string.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 15,
                  "charOffset": 613,
                  "charLength": 33,
                  "snippet": {
                    "text": "boost::lexical_cast<std::wstring>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 507,
                  "charLength": 229,
                  "snippet": {
                    "text": "void check() {\n  auto str = boost::lexical_cast<std::string>(42);       // should warn here\n  auto wstr = boost::lexical_cast<std::wstring>(2137LL); // should warn here\n\n  std::cout << \"-- check boost-use-to-string\" << std::endl;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a64cca4c3cf937e9",
            "equalIndicator/v1": "b3c6d398338aae5ec7b8930765869c5211266cae2565bbedce1adf293a9d6cf4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local copy 'Copy' of the variable 'value' is never modified and never used; consider removing the statement",
            "markdown": "Local copy 'Copy' of the variable 'value' is never modified and never used; consider removing the statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance/performance-unnecessary-value-param.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 36,
                  "charOffset": 1881,
                  "charLength": 4,
                  "snippet": {
                    "text": "Copy"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1761,
                  "charLength": 135,
                  "snippet": {
                    "text": "  // The warning will suggest making Value a const reference.\n  value.ConstMethod();\n  [[maybe_unused]] ExpensiveToCopy Copy(value);\n}\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3d6e1ae5c1aea12c",
            "equalIndicator/v1": "b4ad138699bdd07ccaeadb44f567db4c750188f0ffa4db96dd8b9fb60a0531d8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Operator=() should take 'X const&', 'X&&' or 'X'",
            "markdown": "Operator=() should take 'X const\\&', 'X\\&\\&' or 'X'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-unconventional-assign-operator.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 3,
                  "charOffset": 559,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 537,
                  "charLength": 79,
                  "snippet": {
                    "text": "struct X {\n  X(){};\n  int operator=(X &) { return 0; }; // warn here twice!\n};\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2dd0b5d81dd2243d",
            "equalIndicator/v1": "b6f2af98e085fe3b178a80fc232dbf65750e9e9f268eb9c15c0a9fbd3263ca76"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not call 'longjmp'; consider using exception handling instead",
            "markdown": "Do not call 'longjmp'; consider using exception handling instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cert/cert-err52-cpp.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 3,
                  "charOffset": 526,
                  "charLength": 12,
                  "snippet": {
                    "text": "std::longjmp"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 500,
                  "charLength": 64,
                  "snippet": {
                    "text": "void f() {\n  Counter c;\n  std::longjmp(env, 1); // warn here!\n}\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "20f1fd52e08dfb4b",
            "equalIndicator/v1": "b9f92055a9db2914e556834bf98f9145abdca681264f59563355b4135b934bb4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "No header providing \"FILE\" is directly included",
            "markdown": "No header providing \"FILE\" is directly included"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-non-copyable-objects.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 20,
                  "charOffset": 385,
                  "charLength": 4,
                  "snippet": {
                    "text": "FILE"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "charOffset": 312,
                  "charLength": 217,
                  "snippet": {
                    "text": "namespace misc::non_copyable_objects {\nvoid check() {\n  [[maybe_unused]] FILE my_stdout = *stdout; // warn here twice! NOLINT(misc-const-correctness)\n  std::cout << \"-- check misc-non-copyable-objects\" << std::endl;\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2029b450ddc03f8f",
            "equalIndicator/v1": "baf9f99d9fbf32b239f58a593baa121b97a38de538e99272e188b916570654d1"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal in ternary expression result",
            "markdown": "Redundant boolean literal in ternary expression result"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 17,
                  "charOffset": 2155,
                  "charLength": 4,
                  "snippet": {
                    "text": "true"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 91,
                  "startColumn": 1,
                  "charOffset": 2117,
                  "charLength": 65,
                  "snippet": {
                    "text": "\n  auto i = random();\n  b = (i < 0) ? true : false;\n\n  b = foo();"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d8bac28921099f38",
            "equalIndicator/v1": "bc85b5675bd6a7f34f4d35e6f12d19764d2ade40517c0f64f5fb7afe93e2de2e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant void argument list in typedef",
            "markdown": "Redundant void argument list in typedef"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-redundant-void-arg.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 19,
                  "charOffset": 509,
                  "charLength": 4,
                  "snippet": {
                    "text": "void"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 399,
                  "charLength": 181,
                  "snippet": {
                    "text": "int f(void);                    // warn here!\nint (*fu(void))(void);          // warn here!\ntypedef int (*f_t(void))(void); // warn here! NOLINT(modernize-use-using)\n\nvoid check() {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "09960865053477e4",
            "equalIndicator/v1": "bd26daafd67bec9819575bb697597d90652bc01e566f10c32cfc860662ea78e7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Parameter 1 is const-qualified in the function declaration; const-qualification of parameters only has an effect in function definitions",
            "markdown": "Parameter 1 is const-qualified in the function declaration; const-qualification of parameters only has an effect in function definitions"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-avoid-const-params-in-decls.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 8,
                  "charOffset": 414,
                  "charLength": 17,
                  "snippet": {
                    "text": "const std::string"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "charOffset": 353,
                  "charLength": 184,
                  "snippet": {
                    "text": "\nnamespace readability::avoid_const_params_in_decls {\nvoid f(const std::string);   // warn here! Bad: const is top level.\nvoid f(const std::string &); // Good: const is not top level.\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a294dddbd9099c87",
            "equalIndicator/v1": "bed1316989e425ed5028621e8d10839c377c5cd221bc89119eadbe5c3af177dd"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use range-based for loop instead",
            "markdown": "Use range-based for loop instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-loop-convert.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 3,
                  "charOffset": 2288,
                  "charLength": 3,
                  "snippet": {
                    "text": "for"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 71,
                  "startColumn": 1,
                  "charOffset": 2264,
                  "charLength": 84,
                  "snippet": {
                    "text": "\n  // safe conversion\n  for (int i = 0; i < N; ++i) // warn here!\n    tmp = arr[i];\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "47cf072f3c2d2ec5",
            "equalIndicator/v1": "c100f9028d51639e215297278917d3dbf444605f7a57514caf94906631a0e3a3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Single-argument constructors must be marked explicit to avoid unintentional implicit conversions",
            "markdown": "Single-argument constructors must be marked explicit to avoid unintentional implicit conversions"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "google/google-explicit-constructor.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 3,
                  "charOffset": 369,
                  "charLength": 1,
                  "snippet": {
                    "text": "S"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 357,
                  "charLength": 100,
                  "snippet": {
                    "text": "  int x;\n\n  S(int x) : x(x) {} // warn here!\n\n  operator bool() const { return true; } // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2a55600532c2e1f9",
            "equalIndicator/v1": "c241f376bbe7f4fc826afe1642efb3e8f57ec5b0cf69f1c4f4d3fe740ba1032e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'fact' can be made static or moved into an anonymous namespace to enforce internal linkage",
            "markdown": "Function 'fact' can be made static or moved into an anonymous namespace to enforce internal linkage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 5,
                  "charOffset": 903,
                  "charLength": 4,
                  "snippet": {
                    "text": "fact"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 867,
                  "charLength": 136,
                  "snippet": {
                    "text": "namespace misc::no_recursion {\n\nint fact(int i) noexcept(false) { // warn here!\n  if (i < 0) {\n    // Negative factorials are undefined."
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bf0a20ed5f261db5",
            "equalIndicator/v1": "c28463de3358ce78aa53dcf4c4771b89dd317fba3860a6ea21ba4bb8141f7c8c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Static member accessed through instance",
            "markdown": "Static member accessed through instance"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-static-accessed-through-instance.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "charOffset": 770,
                  "charLength": 2,
                  "snippet": {
                    "text": "c1"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 719,
                  "charLength": 138,
                  "snippet": {
                    "text": "  auto *c1 = new C();\n  c1->foo(); // warn here!\n  c1->x;     // warn here!\n}\n} // namespace readability::static_accessed_through_instance"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b9f42f506359139a",
            "equalIndicator/v1": "c2e7b029d0fb162f02ca9e229b4aec7846cdf03df42e1d431df98da0cb9866d2"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Operator=() should return 'X&'",
            "markdown": "Operator=() should return 'X\\&'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-unconventional-assign-operator.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 3,
                  "charOffset": 559,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 537,
                  "charLength": 79,
                  "snippet": {
                    "text": "struct X {\n  X(){};\n  int operator=(X &) { return 0; }; // warn here twice!\n};\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2dd0b5d81dd2243d",
            "equalIndicator/v1": "c5db004aaf7d22420bb59a8125d7537901717ff128ffce161b43e892cd473c5a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Std::basic_string_view outlives its value",
            "markdown": "Std::basic_string_view outlives its value"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-dangling-handle.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 3,
                  "charOffset": 970,
                  "charLength": 1,
                  "snippet": {
                    "text": "V"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 889,
                  "charLength": 204,
                  "snippet": {
                    "text": "  std::vector<std::string_view> V;\n  V.push_back(std::string()); // warn here!\n  V.resize(3, std::string()); // warn here!\n\n  std::cout << \"-- check bugprone-dangling-handle [works in msvc]\" << std::endl;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ef24a988bd518185",
            "equalIndicator/v1": "c7d02d101c45d8937ba334fa42ae426c63f022853bd6235de5e09daeb50d6a99"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant void argument list in typedef",
            "markdown": "Redundant void argument list in typedef"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-redundant-void-arg.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 26,
                  "charOffset": 516,
                  "charLength": 4,
                  "snippet": {
                    "text": "void"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 399,
                  "charLength": 181,
                  "snippet": {
                    "text": "int f(void);                    // warn here!\nint (*fu(void))(void);          // warn here!\ntypedef int (*f_t(void))(void); // warn here! NOLINT(modernize-use-using)\n\nvoid check() {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bbfd6bc7bfb553a5",
            "equalIndicator/v1": "c893f1535d6a15d55e7623fe983f1910e3353f5bde1ea58ddd71424db6981779"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not use 'else' after 'throw'",
            "markdown": "Do not use 'else' after 'throw'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-else-after-return.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 7,
                  "charOffset": 979,
                  "charLength": 4,
                  "snippet": {
                    "text": "else"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 935,
                  "charLength": 85,
                  "snippet": {
                    "text": "    if (Value == 3) {\n      throw 42;\n    } else { // warn here!\n      Local++;\n    }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f6edb47a0ee8ba43",
            "equalIndicator/v1": "c8e01b7d7ed12121e7a1f3540109ca03225a2991f0b6db6f8ea17d7a08b4963f"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not declare C-style arrays, use std::array<> instead",
            "markdown": "Do not declare C-style arrays, use std::array\\<\\> instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-avoid-c-arrays.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 20,
                  "charOffset": 1067,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 993,
                  "charLength": 160,
                  "snippet": {
                    "text": "                              // std::array<> instead\n\n  [[maybe_unused]] int\n      e[1]; // warning: do not declare C-style arrays, use std::array<> instead\n};"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5b1e080c3b246b0e",
            "equalIndicator/v1": "c9cf3d831b43f940dc0c5928a7983f387a3024e6f94f91aa8b4a30499c7c3244"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'update_bookkeeping' can be made static or moved into an anonymous namespace to enforce internal linkage",
            "markdown": "Function 'update_bookkeeping' can be made static or moved into an anonymous namespace to enforce internal linkage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-new-delete-overloads.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 19,
                  "charOffset": 678,
                  "charLength": 18,
                  "snippet": {
                    "text": "update_bookkeeping"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 620,
                  "charLength": 166,
                  "snippet": {
                    "text": "namespace misc::new_delete_overloads {\n\nextern \"C++\" void update_bookkeeping(void *allocated_ptr, std::size_t size,\n                                     bool alloc);\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6e8352d798eeda91",
            "equalIndicator/v1": "ca77640db10470ea1e8337adb3b962b37ff1a2c7734f65a06e1087f447cee0eb"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal in conditional return statement",
            "markdown": "Redundant boolean literal in conditional return statement"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 12,
                  "charOffset": 1189,
                  "charLength": 4,
                  "snippet": {
                    "text": "true"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1162,
                  "charLength": 50,
                  "snippet": {
                    "text": "  X x;\n  if (x)\n    return true;\n  return false;\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e8e038c5fb220217",
            "equalIndicator/v1": "cafc237eb503a04a836ef6d13f0be9b827c7916395f9f7dbffe4b5d75337a92d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal in if statement condition",
            "markdown": "Redundant boolean literal in if statement condition"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 7,
                  "charOffset": 1753,
                  "charLength": 4,
                  "snippet": {
                    "text": "true"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 66,
                  "startColumn": 1,
                  "charOffset": 1679,
                  "charLength": 117,
                  "snippet": {
                    "text": "  e ? true : false; // warn here!\n  e ? false : true; // warn here!\n  if (true)         // warn here!\n    t();\n  else"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7d9592530b63b5a0",
            "equalIndicator/v1": "cd98124f142a885500e27097b4b9910873a2ec89141c58ca5a6f65248ad81cc9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Result of integer division used in a floating point context; possible loss of precision",
            "markdown": "Result of integer division used in a floating point context; possible loss of precision"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-integer-division.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 25,
                  "charOffset": 933,
                  "charLength": 1,
                  "snippet": {
                    "text": "7"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 862,
                  "charLength": 140,
                  "snippet": {
                    "text": "\n  d = 32 * 8 / (2 + i);         // warn here!\n  d = 8 * floatFunc(1 + 7 / 2); // warn here!\n  d = i / (1 << 4);             // warn here!\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6d1ffba199d45971",
            "equalIndicator/v1": "d3e94dfd5997b30d6ad6b7756f7d079ff701fa20b6571ce892beae793d6f5764"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Macro replacement list should be enclosed in parentheses",
            "markdown": "Macro replacement list should be enclosed in parentheses"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-macro-parentheses.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 9,
                  "charOffset": 782,
                  "charLength": 1,
                  "snippet": {
                    "text": "V"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 753,
                  "charLength": 91,
                  "snippet": {
                    "text": "#include <iostream>\n\n#define V 0 + 0 // warn here!\n\nnamespace bugprone::macro_parentheses {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ad5f041d82fb2b12",
            "equalIndicator/v1": "d461b5a3dd2ede0efe1e8b1563c483446fba6fa4f339407abca461101c2a0f99"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'ctype.h'; consider using 'cctype' instead",
            "markdown": "Inclusion of deprecated C++ header 'ctype.h'; consider using 'cctype' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 734,
                  "charLength": 18,
                  "snippet": {
                    "text": "#include <ctype.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 693,
                  "charLength": 122,
                  "snippet": {
                    "text": "#include <assert.h>\n#include <complex.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fenv.h> // deprecated since C++11"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7360729f5a71a0ed",
            "equalIndicator/v1": "d4efedb0e277f9197f0e15ec602b5a0875b992aabddb946cb5f4116bd965965b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not declare C-style arrays, use std::array<> instead",
            "markdown": "Do not declare C-style arrays, use std::array\\<\\> instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-avoid-c-arrays.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 24,
                  "charOffset": 1178,
                  "charLength": 6,
                  "snippet": {
                    "text": "int[4]"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1151,
                  "charLength": 113,
                  "snippet": {
                    "text": "};\n\n[[maybe_unused]] array<int[4], 2>\n    d; // warning: do not declare C-style arrays, use std::array<> instead\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2f10e65c4eae5bdf",
            "equalIndicator/v1": "d74e4f0213730dc39fb5b89d304c5cf620024e165de959593e1e068d0a223c1a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Side effects in the 1st macro argument 'x' are repeated in macro expansion",
            "markdown": "Side effects in the 1st macro argument 'x' are repeated in macro expansion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-macro-repeated-side-effects.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 14,
                  "charOffset": 394,
                  "charLength": 1,
                  "snippet": {
                    "text": "a"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 312,
                  "charLength": 121,
                  "snippet": {
                    "text": "\n[[maybe_unused]] void bad([[maybe_unused]] int ret, int a, int b) {\n  ret = badA(a++, b); // warn here!\n}\nvoid check() {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "50c7543d26a6edcf",
            "equalIndicator/v1": "dbd38feab69e290f5b9c7d7e3d375957db529267d7ab465c7f05866139b6404c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal supplied to boolean operator",
            "markdown": "Redundant boolean literal supplied to boolean operator"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 12,
                  "charOffset": 1508,
                  "charLength": 4,
                  "snippet": {
                    "text": "true"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 53,
                  "startColumn": 1,
                  "charOffset": 1459,
                  "charLength": 108,
                  "snippet": {
                    "text": "  if (b == false) { // warn here!\n  }\n  if (b && true) { // warn here!\n  }\n  if (b && false) { // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "30d648c0e7ff3266",
            "equalIndicator/v1": "dc8d9392c3feaf486d7d888d78bfd1ddd97a1c04feac9b73883b158f13c2df90"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Static member accessed through instance",
            "markdown": "Static member accessed through instance"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-static-accessed-through-instance.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 3,
                  "charOffset": 743,
                  "charLength": 2,
                  "snippet": {
                    "text": "c1"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 693,
                  "charLength": 103,
                  "snippet": {
                    "text": "            << std::endl;\n  auto *c1 = new C();\n  c1->foo(); // warn here!\n  c1->x;     // warn here!\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2190b2981ffa11c3",
            "equalIndicator/v1": "de8d1b987d4b4872a63bbf9a3bbd8969c6efcb25b0ad5e0ebfa55d4543185a01"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant boolean literal supplied to boolean operator",
            "markdown": "Redundant boolean literal supplied to boolean operator"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-simplify-boolean-expr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 12,
                  "charOffset": 1545,
                  "charLength": 5,
                  "snippet": {
                    "text": "false"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 55,
                  "startColumn": 1,
                  "charOffset": 1497,
                  "charLength": 107,
                  "snippet": {
                    "text": "  if (b && true) { // warn here!\n  }\n  if (b && false) { // warn here!\n  }\n  if (b || true) { // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8c56d75f50ca5988",
            "equalIndicator/v1": "dfc6356c340c8acc5e3d709b1a0a680b893ba8a2f04045f56eef73cb3056fda0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Calling a base constructor other than the copy constructor",
            "markdown": "Calling a base constructor other than the copy constructor"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-copy-constructor-init.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 3,
                  "charOffset": 780,
                  "charLength": 2,
                  "snippet": {
                    "text": "X4"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 731,
                  "charLength": 119,
                  "snippet": {
                    "text": "\nclass [[maybe_unused]] X4 : public Copyable {\n  X4([[maybe_unused]] const X4 &other) : Copyable() {} // warn here!\n};\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "215876381f8940db",
            "equalIndicator/v1": "e1642b37b773474c117aeedb346dfc6c8a4d004a98dee387887a713a46e71181"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Escaped string literal can be written as a raw string literal",
            "markdown": "Escaped string literal can be written as a raw string literal"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-raw-string-literal.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 24,
                  "charOffset": 1378,
                  "charLength": 44,
                  "snippet": {
                    "text": "\"C:\\\\Program Files\\\\Vendor\\\\Application.exe\""
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 1268,
                  "charLength": 228,
                  "snippet": {
                    "text": "const char *const Tab{\"One\\tTwo\\n\"};\nconst char *const Bell{\"Hello!\\a  And welcome!\"};\nconst char *const Path{\"C:\\\\Program Files\\\\Vendor\\\\Application.exe\"}; // warn here!\nconst char *const RegEx{\"\\\\w\\\\([a-z]\\\\)\"}; // warn here!\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d355b7619152f57a",
            "equalIndicator/v1": "e2239f6a554b2ab93c3e62483f583a5ad016edc6cebb335a996ffa0f29d30eb3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use range-based for loop instead",
            "markdown": "Use range-based for loop instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-loop-convert.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 3,
                  "charOffset": 2378,
                  "charLength": 3,
                  "snippet": {
                    "text": "for"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 75,
                  "startColumn": 1,
                  "charOffset": 2348,
                  "charLength": 106,
                  "snippet": {
                    "text": "\n  // reasonable conversion\n  for (auto it = v.begin(); it != v.end(); ++it) // warn here!\n    tmp = *it;\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f4cd253af625cca2",
            "equalIndicator/v1": "e377b4cc83c349ef484d657f73dc51b8d628c48fe9ea5bc150db289b84e2be77"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Modification of 'std' namespace can result in undefined behavior",
            "markdown": "Modification of 'std' namespace can result in undefined behavior"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cert/cert-dcl58-cpp.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 5,
                  "charOffset": 368,
                  "charLength": 1,
                  "snippet": {
                    "text": "x"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 9,
                  "startColumn": 1,
                  "charOffset": 347,
                  "charLength": 40,
                  "snippet": {
                    "text": "\nnamespace std {\nint x; // warn here!\n}\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fe65d45739b33ef1",
            "equalIndicator/v1": "e644a865f12cac0dc59cbb3203d7c0c23c8a9af6912223b0c16f189630fd2e64"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Converting integer literal to bool, use bool literal instead",
            "markdown": "Converting integer literal to bool, use bool literal instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-use-bool-literals.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "charOffset": 526,
                  "charLength": 1,
                  "snippet": {
                    "text": "0"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 365,
                  "charLength": 257,
                  "snippet": {
                    "text": "  bool p = 1;                                     // warn here!\n  [[maybe_unused]] bool f = static_cast<bool>(1); // warn here!\n  std::ios_base::sync_with_stdio(0);              // warn here!\n  [[maybe_unused]] bool x = p ? 1 : 0;            // warn here!\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "581f970154e3064b",
            "equalIndicator/v1": "e86146da06deeab1d914c48387c34843c2769f93081bb7fe0e5339ac45ed7d16"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage",
            "markdown": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-misplaced-const.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 6,
                  "charOffset": 674,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 666,
                  "charLength": 116,
                  "snippet": {
                    "text": "}\n\nvoid check() { std::cout << \"-- check misc-misplaced-const\" << std::endl; }\n} // namespace misc::misplaced_const\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "413e8601d4c045c8",
            "equalIndicator/v1": "e8e20cd28b6153f6cb06fb6e48a8360efc16dbd963f989445dfdbcc1551af6e7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'inttypes.h'; consider using 'cinttypes' instead",
            "markdown": "Inclusion of deprecated C++ header 'inttypes.h'; consider using 'cinttypes' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 835,
                  "charLength": 21,
                  "snippet": {
                    "text": "#include <inttypes.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 772,
                  "charLength": 124,
                  "snippet": {
                    "text": "#include <fenv.h> // deprecated since C++11\n#include <float.h>\n#include <inttypes.h>\n#include <limits.h>\n#include <locale.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "aaf0fe212d746535",
            "equalIndicator/v1": "e9008f497acfbdd65ce2919a35c7fb3ea79657af2109ac2de5dabefecfa20dc8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Expression has opaque data structure type 'FILE'; type should only be used as a pointer and not dereferenced",
            "markdown": "Expression has opaque data structure type 'FILE'; type should only be used as a pointer and not dereferenced"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-non-copyable-objects.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 37,
                  "charOffset": 402,
                  "charLength": 7,
                  "snippet": {
                    "text": "*stdout"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 10,
                  "startColumn": 1,
                  "charOffset": 312,
                  "charLength": 217,
                  "snippet": {
                    "text": "namespace misc::non_copyable_objects {\nvoid check() {\n  [[maybe_unused]] FILE my_stdout = *stdout; // warn here twice! NOLINT(misc-const-correctness)\n  std::cout << \"-- check misc-non-copyable-objects\" << std::endl;\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "188e121b104b6591",
            "equalIndicator/v1": "e94a81fcf2cf29444d164aee0c815783be3b1f3c3add08ddde168b982a21fd91"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'check' exceeds recommended size/complexity thresholds",
            "markdown": "Function 'check' exceeds recommended size/complexity thresholds"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-function-size.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 6,
                  "charOffset": 1461,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1416,
                  "charLength": 118,
                  "snippet": {
                    "text": "namespace readability::function_size {\n\nvoid check() { // warn here! LineThreshold\n  // long body of the function\n  //"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "182a7a8001ff0746",
            "equalIndicator/v1": "ea654b10f9a4e6d2d399b90da27642aedc1c8079d81f30a4d33a22978b292613"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'complex.h'; consider using 'complex' instead",
            "markdown": "Inclusion of deprecated C++ header 'complex.h'; consider using 'complex' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 713,
                  "charLength": 20,
                  "snippet": {
                    "text": "#include <complex.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 692,
                  "charLength": 79,
                  "snippet": {
                    "text": "\n#include <assert.h>\n#include <complex.h>\n#include <ctype.h>\n#include <errno.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ec96314d5e72de8a",
            "equalIndicator/v1": "ed958031e972134ac7794ea6c3775d8e2c5a83ab0c2d33694d457c858e748db5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not declare C VLA arrays, use std::vector<> instead",
            "markdown": "Do not declare C VLA arrays, use std::vector\\<\\> instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-avoid-c-arrays.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 20,
                  "charOffset": 752,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 719,
                  "charLength": 149,
                  "snippet": {
                    "text": "\nvoid foo() {\n  [[maybe_unused]] int c[b[0]]; // warning: do not declare C VLA arrays, use\n                                // std::vector<> instead\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7fef3866e22c275d",
            "equalIndicator/v1": "ef31b08bc97f6671dc0dc2c47d0844b6547094c497de0701556e5fe1ed7b9603"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character",
            "markdown": "'find' called with a string literal consisting of a single character; consider using the more effective overload accepting a character"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance/performance-faster-string-find.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 12,
                  "charOffset": 906,
                  "charLength": 3,
                  "snippet": {
                    "text": "\"A\""
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 861,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n  std::string str = \"Who am I?\";\n  str.find(\"A\"); // warn here!\n}\n} // namespace performance::faster_string_find"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "eb8b4bec09a53cfa",
            "equalIndicator/v1": "f0692fcf73d32ee5083423e216276f297d88ceabea90f52328c986f7559abdd7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Throwing an exception whose type 'int' is not derived from 'std::exception'",
            "markdown": "Throwing an exception whose type 'int' is not derived from 'std::exception'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "hicpp/hicpp-exception-baseclass.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 9,
                  "charOffset": 460,
                  "charLength": 3,
                  "snippet": {
                    "text": "int"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 364,
                  "charLength": 121,
                  "snippet": {
                    "text": "[[maybe_unused]] void throwing1() noexcept(false) {\n  // Problematic throw expressions.\n  throw int(42); // warn here!\n}\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "5f051c8329d268e4",
            "equalIndicator/v1": "f0923a6d17ed97b1170ae5e7e372599b18e33546d20f188fc6a302a0174f21d4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Converting integer literal to bool, use bool literal instead",
            "markdown": "Converting integer literal to bool, use bool literal instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-use-bool-literals.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 29,
                  "charOffset": 457,
                  "charLength": 11,
                  "snippet": {
                    "text": "static_cast"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 12,
                  "startColumn": 1,
                  "charOffset": 350,
                  "charLength": 270,
                  "snippet": {
                    "text": "void check() {\n  bool p = 1;                                     // warn here!\n  [[maybe_unused]] bool f = static_cast<bool>(1); // warn here!\n  std::ios_base::sync_with_stdio(0);              // warn here!\n  [[maybe_unused]] bool x = p ? 1 : 0;            // warn here!"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "73c9e643192d5b6d",
            "equalIndicator/v1": "f16edb3d66cf9dcd0bdf90fd79781c4cae189ccc24ef8f4b49d0d01cffce9c3e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Escaped string literal can be written as a raw string literal",
            "markdown": "Escaped string literal can be written as a raw string literal"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-raw-string-literal.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 25,
                  "charOffset": 1463,
                  "charLength": 16,
                  "snippet": {
                    "text": "\"\\\\w\\\\([a-z]\\\\)\""
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 1305,
                  "charLength": 206,
                  "snippet": {
                    "text": "const char *const Bell{\"Hello!\\a  And welcome!\"};\nconst char *const Path{\"C:\\\\Program Files\\\\Vendor\\\\Application.exe\"}; // warn here!\nconst char *const RegEx{\"\\\\w\\\\([a-z]\\\\)\"}; // warn here!\n\nvoid check() {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "be6de680685538f0",
            "equalIndicator/v1": "f35fe20c4f1b3c20e08f1fa589a8da5f6f973a206dcb7d92f58c6d4baf977bae"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'float.h'; consider using 'cfloat' instead",
            "markdown": "Inclusion of deprecated C++ header 'float.h'; consider using 'cfloat' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 816,
                  "charLength": 18,
                  "snippet": {
                    "text": "#include <float.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 753,
                  "charLength": 123,
                  "snippet": {
                    "text": "#include <errno.h>\n#include <fenv.h> // deprecated since C++11\n#include <float.h>\n#include <inttypes.h>\n#include <limits.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a45c813d6a74f0f5",
            "equalIndicator/v1": "f642bcee864fcfb1b0e29af2ce408e716c8866c6390e002dc6bcf3d4cecf1ecb"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The parameter 's' is copied for each invocation but only used as a const reference; consider making it a const reference",
            "markdown": "The parameter 's' is copied for each invocation but only used as a const reference; consider making it a const reference"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance/performance-unnecessary-value-param.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 61,
                  "charOffset": 1528,
                  "charLength": 1,
                  "snippet": {
                    "text": "s"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 42,
                  "startColumn": 1,
                  "charOffset": 1465,
                  "charLength": 122,
                  "snippet": {
                    "text": "}\n\nvoid ExpensiveToCopy::setValue([[maybe_unused]] std::string s) { // warn here!\n  // a = static_cast<int>(s.length());\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "d2980b3c3b2bc4d0",
            "equalIndicator/v1": "f723e2d7c033f824bf516e5e2fcb3a4cc8f98b80fbe7b13a957eda9beb7bf813"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The parameter 'value' is copied for each invocation but only used as a const reference; consider making it a const reference",
            "markdown": "The parameter 'value' is copied for each invocation but only used as a const reference; consider making it a const reference"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "performance/performance-unnecessary-value-param.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 24,
                  "charOffset": 1738,
                  "charLength": 5,
                  "snippet": {
                    "text": "value"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 50,
                  "startColumn": 1,
                  "charOffset": 1712,
                  "charLength": 133,
                  "snippet": {
                    "text": "}\n\nvoid g(ExpensiveToCopy value) { // warn here!\n  // The warning will suggest making Value a const reference.\n  value.ConstMethod();"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "7a6d06e935dd1b47",
            "equalIndicator/v1": "f740453e70ca864923a117dd446804ca3c9773ecd83c80edf73637e36cef20a0"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The 'empty' method should be used to check for emptiness instead of 'size'",
            "markdown": "The 'empty' method should be used to check for emptiness instead of 'size'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-container-size-empty.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 7,
                  "charOffset": 954,
                  "charLength": 1,
                  "snippet": {
                    "text": "v"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 884,
                  "charLength": 113,
                  "snippet": {
                    "text": "\n  std::vector<int> v; // NOLINT(readability-identifier-length)\n  if (v.size() == 0) { // warn here!\n    /**/\n  }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4a781b06a84c254f",
            "equalIndicator/v1": "f846e28b20f7c6a720828a3e34a58e9920284e6f9ea6bad0053b37131e41e303"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Inclusion of deprecated C++ header 'stddef.h'; consider using 'cstddef' instead",
            "markdown": "Inclusion of deprecated C++ header 'stddef.h'; consider using 'cstddef' instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 975,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <stddef.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 935,
                  "charLength": 98,
                  "snippet": {
                    "text": "#include <signal.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "18a17c13d7e6fc94",
            "equalIndicator/v1": "f8e86ad7df7d5ffd4499f04aab365f56252da03fca0a9523cacb34af16aab57b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Redundant string initialization",
            "markdown": "Redundant string initialization"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-redundant-string-init.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 15,
                  "charOffset": 588,
                  "charLength": 1,
                  "snippet": {
                    "text": "a"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 506,
                  "charLength": 141,
                  "snippet": {
                    "text": "\n  // Initializing string with empty string literal is unnecessary.\n  std::string a = \"\"; // warn here!\n  std::string b(\"\");  // warn here!\n}"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "decccafba25a480d",
            "equalIndicator/v1": "f9889bfbf8d6d13a6f485e2e020cd5e9ccc729d31ace5d1c8ed506e08a365542"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Variable 'pointerToNonConstInt' is non-const and globally accessible, consider making it const",
            "markdown": "Variable 'pointerToNonConstInt' is non-const and globally accessible, consider making it const"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cppcoreguidelines/avoid-non-const-global-variables.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 23,
                  "charOffset": 615,
                  "charLength": 20,
                  "snippet": {
                    "text": "pointerToNonConstInt"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 447,
                  "charLength": 234,
                  "snippet": {
                    "text": "int nonConstInt = 0;                                       // warn here!\n[[maybe_unused]] int &nonConstIntReference = nonConstInt;  // warn here!\n[[maybe_unused]] int *pointerToNonConstInt = &nonConstInt; // warn here!\n\nvoid check() {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "12122aaca52fa3a9",
            "equalIndicator/v1": "fae12253e0de11f8ef4c98707048f1f3d862fd4aaad3b8be2021078117ede965"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Use std::to_string instead of boost::lexical_cast",
            "markdown": "Use std::to_string instead of boost::lexical_cast"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "boost/boost-use-to-string.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 14,
                  "charOffset": 535,
                  "charLength": 32,
                  "snippet": {
                    "text": "boost::lexical_cast<std::string>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 474,
                  "charLength": 202,
                  "snippet": {
                    "text": "namespace boost::use_to_string {\nvoid check() {\n  auto str = boost::lexical_cast<std::string>(42);       // should warn here\n  auto wstr = boost::lexical_cast<std::wstring>(2137LL); // should warn here\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b9e610cf67bd573f",
            "equalIndicator/v1": "fb44d21beeb46242e9ccb744ae555613b30c659627cdca21120454407d706852"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage",
            "markdown": "Function 'check' can be made static or moved into an anonymous namespace to enforce internal linkage"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 6,
                  "charOffset": 1460,
                  "charLength": 5,
                  "snippet": {
                    "text": "check"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1415,
                  "charLength": 146,
                  "snippet": {
                    "text": "  return i > 0 ? i * fact(i - 1) : 1;\n}\nvoid check() { std::cout << \"-- check misc-no-recursion\" << std::endl; }\n} // namespace misc::no_recursion"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "b0b51a27d1eefba5",
            "equalIndicator/v1": "ff36c3484365530da6b21df959d2ff7ee71313e417982a6e093c1a0af7115522"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangTidy",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Do not declare C-style arrays, use std::array<> instead",
            "markdown": "Do not declare C-style arrays, use std::array\\<\\> instead"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-avoid-c-arrays.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 20,
                  "charOffset": 935,
                  "charLength": 1,
                  "snippet": {
                    "text": "T"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 869,
                  "charLength": 178,
                  "snippet": {
                    "text": "\ntemplate <typename T, int Size> class array {\n  [[maybe_unused]] T d[Size]; // warning: do not declare C-style arrays, use\n                              // std::array<> instead\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "58395952dcfa3eac",
            "equalIndicator/v1": "ff99b080f779b4daef8f6707c6136799274af04f148ad940ca9b6b4d4d491b86"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangdErrorsAndWarnings",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Explicitly defaulted copy assignment operator is implicitly deleted",
            "markdown": "Explicitly defaulted copy assignment operator is implicitly deleted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-deleted-default.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 11,
                  "charOffset": 680,
                  "charLength": 42,
                  "snippet": {
                    "text": "&operator=(const Example &Other) = default"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 595,
                  "charLength": 138,
                  "snippet": {
                    "text": "\n  // This operator is deleted because I cannot be assigned (it is const).\n  Example &operator=(const Example &Other) = default;\n\nprivate:"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "564b9da2449c6ab4",
            "equalIndicator/v1": "613cf359676584bb32706fb412a8e6f78b1a0a8b90608b1139d541aa55e34153"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangdErrorsAndWarnings",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Multiple unsequenced modifications to 'a'",
            "markdown": "Multiple unsequenced modifications to 'a'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-macro-repeated-side-effects.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 15,
                  "charOffset": 395,
                  "charLength": 2,
                  "snippet": {
                    "text": "++"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 312,
                  "charLength": 121,
                  "snippet": {
                    "text": "\n[[maybe_unused]] void bad([[maybe_unused]] int ret, int a, int b) {\n  ret = badA(a++, b); // warn here!\n}\nvoid check() {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "557523144f1da716",
            "equalIndicator/v1": "87e880da8fd14fdc5b0af4595240e42d52620eac9cd734a1f4e7ded7b14cd107"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangdErrorsAndWarnings",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Declaration shadows a variable in namespace 'bugprone::spuriously_wake_up_functions'",
            "markdown": "Declaration shadows a variable in namespace 'bugprone::spuriously_wake_up_functions'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-spuriously-wake-up-functions.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 51,
                  "charOffset": 851,
                  "charLength": 10,
                  "snippet": {
                    "text": "&condition"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 758,
                  "charLength": 145,
                  "snippet": {
                    "text": "static std::condition_variable condition;\n\nvoid consume_list_element(std::condition_variable &condition) {\n  std::unique_lock<std::mutex> lk(m);\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "cc315a4979f155ec",
            "equalIndicator/v1": "ab4b90b54456dc7ec214ee470b06e0aa0c94d319d0ef78adc4d40ecf70b89721"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "ClangdErrorsAndWarnings",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Explicitly defaulted default constructor is implicitly deleted",
            "markdown": "Explicitly defaulted default constructor is implicitly deleted"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "readability/readability-deleted-default.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "charOffset": 511,
                  "charLength": 19,
                  "snippet": {
                    "text": "Example() = default"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 430,
                  "charLength": 121,
                  "snippet": {
                    "text": "public:\n  // This constructor is deleted because I am missing a default value.\n  Example() = default;\n\n  // This is fine."
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c6d28b028a907dd4",
            "equalIndicator/v1": "bc7f7807a335aed53f3abf859b3d6219a2b9121e9df14047cad07186e2056550"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 41,
                  "charOffset": 1096,
                  "charLength": 7,
                  "snippet": {
                    "text": "fact(1)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 1051,
                  "charLength": 242,
                  "snippet": {
                    "text": "  }\n\n  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3f92c6212c861b3a",
            "equalIndicator/v1": "0504f76c5f4b8e3d552b57ba171386b87d7801f27e1fd85226dac27e4990a286"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 31,
                  "charOffset": 1086,
                  "charLength": 7,
                  "snippet": {
                    "text": "fact(0)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 1051,
                  "charLength": 242,
                  "snippet": {
                    "text": "  }\n\n  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6f23dae5aefd1366",
            "equalIndicator/v1": "0fc0bb589833d0ceb584d59b73f62b5ddd417ae28a63339f17c22dd095b0eb2a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 71,
                  "charOffset": 1126,
                  "charLength": 7,
                  "snippet": {
                    "text": "fact(4)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 1051,
                  "charLength": 242,
                  "snippet": {
                    "text": "  }\n\n  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ac5be400e695fe02",
            "equalIndicator/v1": "17624e9ecd1d1bd587f7cf1f9780bf88e79373fbd810c4c3d1e161e628568f13"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 61,
                  "charOffset": 1116,
                  "charLength": 7,
                  "snippet": {
                    "text": "fact(3)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 1051,
                  "charLength": 242,
                  "snippet": {
                    "text": "  }\n\n  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "64f8a548b02b9f5c",
            "equalIndicator/v1": "211d21e595e4d5d06bd284adb5fb64a5a4a9f1172323ad6bea9b221be85d10f3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 41,
                  "charOffset": 1334,
                  "charLength": 8,
                  "snippet": {
                    "text": "fact(16)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 1135,
                  "charLength": 253,
                  "snippet": {
                    "text": "                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};\n\n  if (i < (sizeof(cache) / sizeof(int))) {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "78cc0975ed5493c1",
            "equalIndicator/v1": "28889a46fea2bae0720cc23745f34d9dbd7a7c1e7b421549a5903c9a8a35d434"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 51,
                  "charOffset": 1264,
                  "charLength": 8,
                  "snippet": {
                    "text": "fact(12)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 1056,
                  "charLength": 289,
                  "snippet": {
                    "text": "  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bd832e29d0a121fa",
            "equalIndicator/v1": "30924f708ffedcf96cbe22edd821af012bb243e82ddb3ae17696f0ccee23ddd8"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 31,
                  "charOffset": 1244,
                  "charLength": 8,
                  "snippet": {
                    "text": "fact(10)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 1056,
                  "charLength": 289,
                  "snippet": {
                    "text": "  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "797ab3315911f176",
            "equalIndicator/v1": "39238cef52ca49b18f620d7a0eba26ca1a14f9746c125a8c3937407db9e9638d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 41,
                  "charOffset": 1254,
                  "charLength": 8,
                  "snippet": {
                    "text": "fact(11)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 1056,
                  "charLength": 289,
                  "snippet": {
                    "text": "  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "59b9cdc8452bdb66",
            "equalIndicator/v1": "4574fc80bd2a3c968443424468d91446bc2673dcc43d1e99d9635e5780517e72"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The value is never used",
            "markdown": "The value is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zircon/zircon-temporary-objects.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 9,
                  "charOffset": 638,
                  "charLength": 3,
                  "snippet": {
                    "text": "X()"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 608,
                  "charLength": 48,
                  "snippet": {
                    "text": "void check() {\n  X();\n  X F = X();\n  func(X());\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "30558309cb5ab129",
            "equalIndicator/v1": "48a106c8d473ed206e030157ed2de4bd9937df370fdde3031a4587b7dd5abe03"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Local variable 'F' is only assigned but never accessed",
            "markdown": "Local variable 'F' is only assigned but never accessed"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "zircon/zircon-temporary-objects.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 5,
                  "charOffset": 634,
                  "charLength": 1,
                  "snippet": {
                    "text": "F"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 608,
                  "charLength": 48,
                  "snippet": {
                    "text": "void check() {\n  X();\n  X F = X();\n  func(X());\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2bf1f55fb47d0135",
            "equalIndicator/v1": "4d502f57aea5b7f80f75506a5e9a2e474bd8975450e14e84c9374a4e3a64ed0d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 31,
                  "charOffset": 1324,
                  "charLength": 8,
                  "snippet": {
                    "text": "fact(15)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 1135,
                  "charLength": 253,
                  "snippet": {
                    "text": "                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};\n\n  if (i < (sizeof(cache) / sizeof(int))) {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "6d01d64bc6484930",
            "equalIndicator/v1": "4d6eac4f81757737c7e2062e2a637e673930982cc658b45a91c6ae8da125eed9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 71,
                  "charOffset": 1205,
                  "charLength": 7,
                  "snippet": {
                    "text": "fact(9)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 1055,
                  "charLength": 289,
                  "snippet": {
                    "text": "\n  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "81ccd21892102fdb",
            "equalIndicator/v1": "539a41f71e55e48ebc1a56d5c0d37564b5003d7414672ba087415a6786d5690c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "The value is never used",
            "markdown": "The value is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "cert/cert-dcl16-c.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 29,
                  "charOffset": 758,
                  "charLength": 2,
                  "snippet": {
                    "text": "1u"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 676,
                  "charLength": 173,
                  "snippet": {
                    "text": "  std::cout << \"-- check cert-dcl16-c\" << std::endl;\n\n  [[maybe_unused]] auto x = 1u; // warning: integer literal suffix 'u' is not upper-case\n}\n} // namespace cert::dcl16_c"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a6206f312be40dae",
            "equalIndicator/v1": "6d2a602723f14c0f60c0f173f98ef2ca2700b13745bd484fd03a4d2948f4f048"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 61,
                  "charOffset": 1274,
                  "charLength": 8,
                  "snippet": {
                    "text": "fact(13)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 1056,
                  "charLength": 289,
                  "snippet": {
                    "text": "  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "81fc1296602ee8fe",
            "equalIndicator/v1": "79431d5329dffee43cceb99e8527c96a8657187309c8abe0102ed86a337ce1af"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 71,
                  "charOffset": 1284,
                  "charLength": 8,
                  "snippet": {
                    "text": "fact(14)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 1056,
                  "charLength": 289,
                  "snippet": {
                    "text": "  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c45f00848f7c0806",
            "equalIndicator/v1": "826886de85ba7e764382cf01a50be8c422f2b1423f89786d4e8680fb6c16914f"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 51,
                  "charOffset": 1106,
                  "charLength": 7,
                  "snippet": {
                    "text": "fact(2)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 1051,
                  "charLength": 242,
                  "snippet": {
                    "text": "  }\n\n  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bbc1803a788ba062",
            "equalIndicator/v1": "84e90e04623b87c7409c7b30f68c6b42a9d58f3263dbf0991ab8fb41a97d848d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 51,
                  "charOffset": 1185,
                  "charLength": 7,
                  "snippet": {
                    "text": "fact(7)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 1055,
                  "charLength": 289,
                  "snippet": {
                    "text": "\n  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9a584c406596d2d3",
            "equalIndicator/v1": "96e4f1fa8ddace831c8835c698c0b1ed1dd64f560e30508c9ae9124b0dd2087e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Usage of non-initialized field 'Copied' when called from function 'f'",
            "markdown": "Usage of non-initialized field 'Copied' when called from function 'f'"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-pass-by-value.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 15,
                  "charOffset": 1680,
                  "charLength": 6,
                  "snippet": {
                    "text": "Copied"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 45,
                  "startColumn": 1,
                  "charOffset": 1656,
                  "charLength": 65,
                  "snippet": {
                    "text": "\nprivate:\n  std::string Copied;\n  const std::string &ReadOnly;\n};"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ce6ed30836cabe01",
            "equalIndicator/v1": "a2b73e1660cb0cdc767b7fb931c39a3a1e0500e1ca595f5b6063dd806427abbf"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Allocated memory is leaked",
            "markdown": "Allocated memory is leaked"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-use-auto.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 33,
                  "charOffset": 2093,
                  "charLength": 26,
                  "snippet": {
                    "text": "new char[str.length() + 1]"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 64,
                  "startColumn": 1,
                  "charOffset": 1999,
                  "charLength": 155,
                  "snippet": {
                    "text": "  std::string str(\"Please split this sentence into tokens\");\n\n  [[maybe_unused]] char *cstr = new char[str.length() + 1];\n\n  std::vector<int> my_container;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4b45f2a8eec9be4b",
            "equalIndicator/v1": "b9c73fc1b05d67bdd0fbcfd2120840cb44c0b44f4d65b5167df30c6e81f3717a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 61,
                  "charOffset": 1195,
                  "charLength": 7,
                  "snippet": {
                    "text": "fact(8)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 1055,
                  "charLength": 289,
                  "snippet": {
                    "text": "\n  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "e376a389790e24da",
            "equalIndicator/v1": "da91ccc28ad8efaf50c8be884681cdefb9dd22d31708fd3a03fa6691d15e4d74"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 31,
                  "charOffset": 1165,
                  "charLength": 7,
                  "snippet": {
                    "text": "fact(5)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 1055,
                  "charLength": 289,
                  "snippet": {
                    "text": "\n  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4f291e2e11ed7d9b",
            "equalIndicator/v1": "e85c8e2b43186fccdd68e93693ad664d1d08b0f20297a84d21173eb588907f11"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 22,
                  "charOffset": 1436,
                  "charLength": 11,
                  "snippet": {
                    "text": "fact(i - 1)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1410,
                  "charLength": 117,
                  "snippet": {
                    "text": "  }\n\n  return i > 0 ? i * fact(i - 1) : 1;\n}\nvoid check() { std::cout << \"-- check misc-no-recursion\" << std::endl; }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "da3dcba63de9a101",
            "equalIndicator/v1": "f2ace5327e4d379c74f3498d8df742bbb03ecd1ef3db8a099dde8c2c2a80c9e5"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Condition is always true",
            "markdown": "Condition is always true"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "google/google-explicit-constructor.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 7,
                  "charOffset": 606,
                  "charLength": 6,
                  "snippet": {
                    "text": "a == b"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 580,
                  "charLength": 53,
                  "snippet": {
                    "text": "  S a{1};\n  S b{2};\n  if (a == b) {\n    a.getX();\n  }"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "8ff76e3d0d560963",
            "equalIndicator/v1": "f745c76146484c7a65a9b484cfa590e845f309f5546d58e6761794b63dd1f04a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCDFABatch",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Infinite recursion",
            "markdown": "Infinite recursion"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "misc/misc-no-recursion.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 41,
                  "charOffset": 1175,
                  "charLength": 7,
                  "snippet": {
                    "text": "fact(6)"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 1055,
                  "charLength": 289,
                  "snippet": {
                    "text": "\n  static const int cache[] = {fact(0),  fact(1),  fact(2),  fact(3),  fact(4),\n                              fact(5),  fact(6),  fact(7),  fact(8),  fact(9),\n                              fact(10), fact(11), fact(12), fact(13), fact(14),\n                              fact(15), fact(16)};"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "98676a893f3f9485",
            "equalIndicator/v1": "ff11d26fb643f8565a2e402d519dbe8f970d202ce1fa0c5922bd5cbfef1c809d"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedGlobalDeclaration",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'p0_0' is never used",
            "markdown": "Function 'p0_0' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "openmp/openmp-use-default-none.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "charOffset": 989,
                  "charLength": 4,
                  "snippet": {
                    "text": "p0_0"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 881,
                  "charLength": 141,
                  "snippet": {
                    "text": "// ``parallel`` directive can have ``default`` clause, but said clause is not\n// specified, diagnosed.\nvoid p0_0() {\n#pragma omp parallel\n  ;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "c18c00c120f61b86",
            "equalIndicator/v1": "09fe5da145df594bd663f6b9382867594b69942a7fd498c1a7ccb76fee3b24a1"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedGlobalDeclaration",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'p0_2' is never used",
            "markdown": "Function 'p0_2' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "openmp/openmp-use-default-none.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 6,
                  "charOffset": 1493,
                  "charLength": 4,
                  "snippet": {
                    "text": "p0_2"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 40,
                  "startColumn": 1,
                  "charOffset": 1341,
                  "charLength": 201,
                  "snippet": {
                    "text": "// ``parallel`` directive can have ``default`` clause, and said clause is\n// specified, but with ``shared`` kind, which is not ``none``, diagnose.\nvoid p0_2() {\n#pragma omp parallel default(shared)\n  ;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "af6d9962c1370f63",
            "equalIndicator/v1": "53217c41a798bda8817fb5744be310900466ef6c61bea0f47a6de1f369441c0a"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedGlobalDeclaration",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'n0' is never used",
            "markdown": "Function 'n0' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "openmp/openmp-use-default-none.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 6,
                  "charOffset": 780,
                  "charLength": 2,
                  "snippet": {
                    "text": "n0"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 14,
                  "startColumn": 1,
                  "charOffset": 668,
                  "charLength": 175,
                  "snippet": {
                    "text": "namespace openmp::use_default_none {\n// ``for`` directive can not have ``default`` clause, no diagnostics.\nvoid n0(const int a) {\n#pragma omp for\n  for (int b = 0; b < a; b++)"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "ccfb89872a16e98f",
            "equalIndicator/v1": "54db8f164257d687833de1405ffda92749ecf711759a9be6f204cb8ad6ea4cd7"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedGlobalDeclaration",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'p0_1' is never used",
            "markdown": "Function 'p0_1' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "openmp/openmp-use-default-none.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 6,
                  "charOffset": 1290,
                  "charLength": 4,
                  "snippet": {
                    "text": "p0_1"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1167,
                  "charLength": 170,
                  "snippet": {
                    "text": "// ``parallel`` directive can have ``default`` clause, and said clause is\n// specified, with ``none`` kind, all good.\nvoid p0_1() {\n#pragma omp parallel default(none)\n  ;"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "9b1fecf672b52306",
            "equalIndicator/v1": "5c534b9b18c126511f4c7e618e1562612906f1a6c246b31ab3cb2f61ef3f0653"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedGlobalDeclaration",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Function 'consume_list_element' is never used",
            "markdown": "Function 'consume_list_element' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-spuriously-wake-up-functions.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 6,
                  "charOffset": 806,
                  "charLength": 20,
                  "snippet": {
                    "text": "consume_list_element"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 758,
                  "charLength": 145,
                  "snippet": {
                    "text": "static std::condition_variable condition;\n\nvoid consume_list_element(std::condition_variable &condition) {\n  std::unique_lock<std::mutex> lk(m);\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "bf9c8d7bf7d4feaf",
            "equalIndicator/v1": "d2a59fd457a113a48c000840605e0a5dcc36e20060e4bf618ded14bf018ab1cf"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedGlobalDeclaration",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Field 'node' is never used",
            "markdown": "Field 'node' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-spuriously-wake-up-functions.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 9,
                  "charOffset": 688,
                  "charLength": 4,
                  "snippet": {
                    "text": "node"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 665,
                  "charLength": 52,
                  "snippet": {
                    "text": "\nstruct Node {\n  void *node;\n  struct Node *next;\n};"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "188e01659a35f436",
            "equalIndicator/v1": "ee511df9a313021924ea1fcc43d9fa01cd5dea9a420c17ae9b6d93372d1c9718"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedGlobalDeclaration",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Global variable 'condition' is never used",
            "markdown": "Global variable 'condition' is never used"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "bugprone/bugprone-spuriously-wake-up-functions.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 32,
                  "charOffset": 789,
                  "charLength": 9,
                  "snippet": {
                    "text": "condition"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 719,
                  "charLength": 145,
                  "snippet": {
                    "text": "static Node list;\nstatic std::mutex m;\nstatic std::condition_variable condition;\n\nvoid consume_list_element(std::condition_variable &condition) {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "66b5dca715feeabf",
            "equalIndicator/v1": "fa3533d582d0c85ec9449343550f3bdb012f4e5ce6d5f3d764475fc98553ddf1"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 835,
                  "charLength": 21,
                  "snippet": {
                    "text": "#include <inttypes.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 772,
                  "charLength": 124,
                  "snippet": {
                    "text": "#include <fenv.h> // deprecated since C++11\n#include <float.h>\n#include <inttypes.h>\n#include <limits.h>\n#include <locale.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a110c4a36af7df69",
            "equalIndicator/v1": "08b4860441b1df2b56d9aa330e74da485e7773f91087d31f15e794ba823e6c35"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 734,
                  "charLength": 18,
                  "snippet": {
                    "text": "#include <ctype.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 693,
                  "charLength": 122,
                  "snippet": {
                    "text": "#include <assert.h>\n#include <complex.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fenv.h> // deprecated since C++11"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fc0ffc7c32b3e12f",
            "equalIndicator/v1": "0ee257abfc9cb1d10627d80bce1f5ee66618775de540465550cf6adde67d11d9"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "main.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <iostream>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 1,
                  "startColumn": 1,
                  "charOffset": 0,
                  "charLength": 45,
                  "snippet": {
                    "text": "#include <iostream>\n\n// Clang-Tidy via clangd"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "68b5655ca2e71392",
            "equalIndicator/v1": "13abfbbc81fd4b482ddf603fcbc08f06f1cd082b8d3ba4d8b29195961748bf57"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 995,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <stdint.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 955,
                  "charLength": 98,
                  "snippet": {
                    "text": "#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "46693959d7a164ed",
            "equalIndicator/v1": "175e147fa7e3c76a8628162cef9ce7f50d8d7da5abbc9418172f051f93ce3afe"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 1,
                  "charOffset": 955,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <stdarg.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 915,
                  "charLength": 99,
                  "snippet": {
                    "text": "#include <setjmp.h>\n#include <signal.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4e7a98ea560b6432",
            "equalIndicator/v1": "2447d77990c0864139587f8c1a70b589c666b6433304fe0ecaef3d51e7996601"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 975,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <stddef.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 935,
                  "charLength": 98,
                  "snippet": {
                    "text": "#include <signal.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fd8ffa660bf410f3",
            "equalIndicator/v1": "2c1dc140a506383eb4c4ce0de54c03045295b1e895bf2d253b3ba2e64e81d621"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 816,
                  "charLength": 18,
                  "snippet": {
                    "text": "#include <float.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 753,
                  "charLength": 123,
                  "snippet": {
                    "text": "#include <errno.h>\n#include <fenv.h> // deprecated since C++11\n#include <float.h>\n#include <inttypes.h>\n#include <limits.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "986b9267f2e9b98b",
            "equalIndicator/v1": "2e13da0260f38ec286a92ff7bf928eeea9296f74780511a1817eb3269354a05b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-replace-auto-ptr.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 1,
                  "charOffset": 592,
                  "charLength": 17,
                  "snippet": {
                    "text": "#include <memory>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 11,
                  "startColumn": 1,
                  "charOffset": 571,
                  "charLength": 79,
                  "snippet": {
                    "text": "\n#include <iostream>\n#include <memory>\n\nnamespace modernize::replace_auto_ptr {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2116e024d10d93eb",
            "equalIndicator/v1": "354956673470d10d42969c43fcfc2ba29ff4f986e980db5670116a1a87114caa"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 877,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <locale.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 23,
                  "startColumn": 1,
                  "charOffset": 835,
                  "charLength": 99,
                  "snippet": {
                    "text": "#include <inttypes.h>\n#include <limits.h>\n#include <locale.h>\n#include <math.h>\n#include <setjmp.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2dbd279f3094928a",
            "equalIndicator/v1": "35f5b0aa3d1865ea81b797653810fdee103e1a20408b1e0856b885b52359818e"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 713,
                  "charLength": 20,
                  "snippet": {
                    "text": "#include <complex.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 16,
                  "startColumn": 1,
                  "charOffset": 692,
                  "charLength": 79,
                  "snippet": {
                    "text": "\n#include <assert.h>\n#include <complex.h>\n#include <ctype.h>\n#include <errno.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "97f79fb13d314ffe",
            "equalIndicator/v1": "5b34c9118e624aa91716f731266205eb65de3ef7c4872ac41591cb2a6247f4c3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1120,
                  "charLength": 17,
                  "snippet": {
                    "text": "#include <time.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 1054,
                  "charLength": 147,
                  "snippet": {
                    "text": "#include <string.h>\n#include <tgmath.h> // deprecated since C++11\n#include <time.h>\n#include <uchar.h> // deprecated since C++11\n#include <wchar.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f2026ba08b6431e4",
            "equalIndicator/v1": "6b2225462f24f686bc4b31d21d68b57030f4159aaec817fe9e2b2e492df79c39"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 897,
                  "charLength": 17,
                  "snippet": {
                    "text": "#include <math.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 857,
                  "charLength": 97,
                  "snippet": {
                    "text": "#include <limits.h>\n#include <locale.h>\n#include <math.h>\n#include <setjmp.h>\n#include <signal.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2e172d923fd5c885",
            "equalIndicator/v1": "729d00b5d28a6588a392f35bbcf1083dee6a2cb5dabdd7b780bdadc1d8bf6da3"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "charOffset": 1183,
                  "charLength": 18,
                  "snippet": {
                    "text": "#include <wchar.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 36,
                  "startColumn": 1,
                  "charOffset": 1120,
                  "charLength": 102,
                  "snippet": {
                    "text": "#include <time.h>\n#include <uchar.h> // deprecated since C++11\n#include <wchar.h>\n#include <wctype.h>\n"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "99510017bb5e00dd",
            "equalIndicator/v1": "73206557bd0e3dcf844ef30d0b8f3e5287cb6ac479c90c500d38f54961f9473b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 1,
                  "charOffset": 915,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <setjmp.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 25,
                  "startColumn": 1,
                  "charOffset": 877,
                  "charLength": 97,
                  "snippet": {
                    "text": "#include <locale.h>\n#include <math.h>\n#include <setjmp.h>\n#include <signal.h>\n#include <stdarg.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2de0a329feaaa51b",
            "equalIndicator/v1": "768954505b26a95b340e00f2652023282a46b096ec7d0a186dde109d254defff"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-replace-random-shuffle.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 1,
                  "charOffset": 315,
                  "charLength": 20,
                  "snippet": {
                    "text": "#include <algorithm>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 6,
                  "startColumn": 1,
                  "charOffset": 226,
                  "charLength": 147,
                  "snippet": {
                    "text": "// https://clang.llvm.org/extra/clang-tidy/checks/modernize-replace-random-shuffle.html\n\n#include <algorithm>\n#include <iostream>\n#include <vector>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "32f7e016c4ad3f4a",
            "equalIndicator/v1": "972b26114b4a25f34b2aaa3d480291cd10eeaad065ae5a73c3ae9c7646a98447"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "charOffset": 935,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <signal.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 26,
                  "startColumn": 1,
                  "charOffset": 897,
                  "charLength": 97,
                  "snippet": {
                    "text": "#include <math.h>\n#include <setjmp.h>\n#include <signal.h>\n#include <stdarg.h>\n#include <stddef.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "a0cdbd6c695fec4c",
            "equalIndicator/v1": "9b702acfa1f17e4d8f877d871b7d92fc66a78547745317fb2bde6a9654666123"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1034,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <stdlib.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 31,
                  "startColumn": 1,
                  "charOffset": 995,
                  "charLength": 124,
                  "snippet": {
                    "text": "#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <tgmath.h> // deprecated since C++11"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "4365ed5438f9ba94",
            "equalIndicator/v1": "9bdf4b31760f1cfbb62de584210c177521c52e370482656c3abf94d66ce758ee"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 1,
                  "charOffset": 857,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <limits.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 22,
                  "startColumn": 1,
                  "charOffset": 816,
                  "charLength": 98,
                  "snippet": {
                    "text": "#include <float.h>\n#include <inttypes.h>\n#include <limits.h>\n#include <locale.h>\n#include <math.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f60b775c3fbe398f",
            "equalIndicator/v1": "a9d69f8e75685034319fe72d843f812dc57a767dce5c0d3f4ba3f45f61688f0c"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "charOffset": 693,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <assert.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 15,
                  "startColumn": 1,
                  "charOffset": 672,
                  "charLength": 80,
                  "snippet": {
                    "text": "#include <iostream>\n\n#include <assert.h>\n#include <complex.h>\n#include <ctype.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "3d71887f98d19b00",
            "equalIndicator/v1": "ad66d921d50438140c3a38d57d09e4aa7c593c3a4cd997835d8acc1ddeeac841"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "charOffset": 772,
                  "charLength": 17,
                  "snippet": {
                    "text": "#include <fenv.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 19,
                  "startColumn": 1,
                  "charOffset": 734,
                  "charLength": 122,
                  "snippet": {
                    "text": "#include <ctype.h>\n#include <errno.h>\n#include <fenv.h> // deprecated since C++11\n#include <float.h>\n#include <inttypes.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "2248eadcf7fa61d4",
            "equalIndicator/v1": "b49d182d5cb390128a8f21f02888c414c64cf2c2b9facf2654b4c9cc78e8c62b"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 1,
                  "charOffset": 1202,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <wctype.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1138,
                  "charLength": 126,
                  "snippet": {
                    "text": "#include <uchar.h> // deprecated since C++11\n#include <wchar.h>\n#include <wctype.h>\n\nnamespace modernize::deprecated_headers {"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "fd1c9c781d1ed20a",
            "equalIndicator/v1": "b81323f1a64c0f00f79713b99c7727724e46c9eac61aa7979319972d4f0415b4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 1074,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <tgmath.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 33,
                  "startColumn": 1,
                  "charOffset": 1034,
                  "charLength": 148,
                  "snippet": {
                    "text": "#include <stdlib.h>\n#include <string.h>\n#include <tgmath.h> // deprecated since C++11\n#include <time.h>\n#include <uchar.h> // deprecated since C++11"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "33d4dbb876cf54da",
            "equalIndicator/v1": "c3251cb56631ae1cfd47dbd4be848f7ba5384f40e351ee1f0c5b97e1b8580d08"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "charOffset": 1015,
                  "charLength": 18,
                  "snippet": {
                    "text": "#include <stdio.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 30,
                  "startColumn": 1,
                  "charOffset": 975,
                  "charLength": 98,
                  "snippet": {
                    "text": "#include <stddef.h>\n#include <stdint.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "81dbe51f1cd85b78",
            "equalIndicator/v1": "da39ad1a691a3be06a56c3597040230dfd854d4670e4f4b6d7592e6dfeb694d1"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 1,
                  "charOffset": 1138,
                  "charLength": 18,
                  "snippet": {
                    "text": "#include <uchar.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 35,
                  "startColumn": 1,
                  "charOffset": 1074,
                  "charLength": 147,
                  "snippet": {
                    "text": "#include <tgmath.h> // deprecated since C++11\n#include <time.h>\n#include <uchar.h> // deprecated since C++11\n#include <wchar.h>\n#include <wctype.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "27f3a0489de9069a",
            "equalIndicator/v1": "df90f36177f22260d039bad33a21aae1ddc5dd9cb31ff5cea9ca7c221ae705f4"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 1,
                  "charOffset": 753,
                  "charLength": 18,
                  "snippet": {
                    "text": "#include <errno.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 18,
                  "startColumn": 1,
                  "charOffset": 713,
                  "charLength": 121,
                  "snippet": {
                    "text": "#include <complex.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fenv.h> // deprecated since C++11\n#include <float.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "21e34c98bad1218e",
            "equalIndicator/v1": "e431ab2a3b6038d81bf69777b36f7ab5d71afe030e859d292f3f48c073c451c6"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        },
        {
          "ruleId": "OCUnusedIncludeDirective",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Unused \"#include \"",
            "markdown": "Unused \"#include \""
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "modernize/modernize-deprecated-headers.cpp",
                  "uriBaseId": "SRCROOT"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "charOffset": 1054,
                  "charLength": 19,
                  "snippet": {
                    "text": "#include <string.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                },
                "contextRegion": {
                  "startLine": 32,
                  "startColumn": 1,
                  "charOffset": 1015,
                  "charLength": 122,
                  "snippet": {
                    "text": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <tgmath.h> // deprecated since C++11\n#include <time.h>"
                  },
                  "sourceLanguage": "ObjectiveC"
                }
              },
              "logicalLocations": [
                {
                  "fullyQualifiedName": "clang-tidy-inspections",
                  "kind": "module"
                }
              ]
            }
          ],
          "partialFingerprints": {
            "equalIndicator/v2": "f5ce55cabad19dd1",
            "equalIndicator/v1": "fbf66fefce86dd26ac95af67b6403ae5787e9dc736c58f6b1cbdfc930faf336f"
          },
          "properties": {
            "ideaSeverity": "WARNING",
            "qodanaSeverity": "High",
            "tags": [
              "ObjectiveC"
            ]
          }
        }
      ],
      "automationDetails": {
        "id": "clang-tidy-inspection/qodana/2024-07-29",
        "guid": "e7f54d08-2daa-4508-8123-afe61594a74a",
        "properties": {
          "jobUrl": "",
          "analysisKind": "ide"
        }
      },
      "newlineSequences": [
        "\r\n",
        "\n"
      ],
      "properties": {
        "configProfile": "starter",
        "deviceId": "2802242a4f0451e-c7ac-481c-916e-5e6dfe2bc1c4",
        "qodanaNewResultSummary": {
          "high": 237,
          "total": 237
        }
      }
    }
  ],
  "properties": {
    "runTimestamp": "1722260476739"
  }
}